/*
* generated by Xtext
*/
package org.larz.dom3.dm.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.larz.dom3.dm.services.DmGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class DmParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private DmGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group(this, this, 0, inst);
			case 1: return new AbstractElement_Alternatives(this, this, 1, inst);
			case 2: return new Armor_Alternatives(this, this, 2, inst);
			case 3: return new SelectArmorById_Group(this, this, 3, inst);
			case 4: return new SelectArmorByName_Group(this, this, 4, inst);
			case 5: return new NewArmor_Group(this, this, 5, inst);
			case 6: return new ArmorMods_Alternatives(this, this, 6, inst);
			case 7: return new ArmorPattern1_Group(this, this, 7, inst);
			case 8: return new ArmorPattern2_Group(this, this, 8, inst);
			case 9: return new ArmorInst1_NameAssignment(this, this, 9, inst);
			case 10: return new ArmorInst2_Alternatives(this, this, 10, inst);
			case 11: return new Weapon_Alternatives(this, this, 11, inst);
			case 12: return new SelectWeaponById_Group(this, this, 12, inst);
			case 13: return new SelectWeaponByName_Group(this, this, 13, inst);
			case 14: return new NewWeapon_Group(this, this, 14, inst);
			case 15: return new WeaponMods_Alternatives(this, this, 15, inst);
			case 16: return new WeaponPattern1_Group(this, this, 16, inst);
			case 17: return new WeaponPattern2_Group(this, this, 17, inst);
			case 18: return new WeaponPattern3_Group(this, this, 18, inst);
			case 19: return new WeaponPattern4_Group(this, this, 19, inst);
			case 20: return new WeaponInst1_NameAssignment(this, this, 20, inst);
			case 21: return new WeaponInst2_Alternatives(this, this, 21, inst);
			case 22: return new WeaponInst3_FlysprAssignment(this, this, 22, inst);
			case 23: return new WeaponInst4_Alternatives(this, this, 23, inst);
			case 24: return new Monster_Alternatives(this, this, 24, inst);
			case 25: return new SelectMonsterById_Group(this, this, 25, inst);
			case 26: return new SelectMonsterByName_Group(this, this, 26, inst);
			case 27: return new NewMonster_Group(this, this, 27, inst);
			case 28: return new MonsterMods_Alternatives(this, this, 28, inst);
			case 29: return new MonsterPattern1_Group(this, this, 29, inst);
			case 30: return new MonsterPattern2_Group(this, this, 30, inst);
			case 31: return new MonsterPattern3_Group(this, this, 31, inst);
			case 32: return new MonsterPattern4_Group(this, this, 32, inst);
			case 33: return new MonsterPattern5_Group(this, this, 33, inst);
			case 34: return new MonsterPattern6_Group(this, this, 34, inst);
			case 35: return new MonsterInst1_Alternatives(this, this, 35, inst);
			case 36: return new MonsterInst2_Alternatives(this, this, 36, inst);
			case 37: return new MonsterInst3_Alternatives(this, this, 37, inst);
			case 38: return new MonsterInst4_Alternatives(this, this, 38, inst);
			case 39: return new MonsterInst5_Alternatives(this, this, 39, inst);
			case 40: return new MonsterInst6_Alternatives(this, this, 40, inst);
			case 41: return new Spell_Alternatives(this, this, 41, inst);
			case 42: return new SelectSpellById_Group(this, this, 42, inst);
			case 43: return new SelectSpellByName_Group(this, this, 43, inst);
			case 44: return new NewSpell_Group(this, this, 44, inst);
			case 45: return new SpellMods_Alternatives(this, this, 45, inst);
			case 46: return new SpellPattern1_Group(this, this, 46, inst);
			case 47: return new SpellPattern2_Group(this, this, 47, inst);
			case 48: return new SpellPattern3_Group(this, this, 48, inst);
			case 49: return new SpellPattern4_Group(this, this, 49, inst);
			case 50: return new SpellPattern5_Group(this, this, 50, inst);
			case 51: return new SpellInst1_Alternatives(this, this, 51, inst);
			case 52: return new SpellInst2_Alternatives(this, this, 52, inst);
			case 53: return new SpellInst3_Alternatives(this, this, 53, inst);
			case 54: return new SpellInst4_ClearAssignment(this, this, 54, inst);
			case 55: return new SpellInst5_Alternatives(this, this, 55, inst);
			case 56: return new Item_Alternatives(this, this, 56, inst);
			case 57: return new SelectItemById_Group(this, this, 57, inst);
			case 58: return new SelectItemByName_Group(this, this, 58, inst);
			case 59: return new NewItem_Group(this, this, 59, inst);
			case 60: return new ItemMods_Alternatives(this, this, 60, inst);
			case 61: return new ItemPattern1_Group(this, this, 61, inst);
			case 62: return new ItemPattern2_Group(this, this, 62, inst);
			case 63: return new ItemPattern3_Group(this, this, 63, inst);
			case 64: return new ItemInst1_Alternatives(this, this, 64, inst);
			case 65: return new ItemInst2_Alternatives(this, this, 65, inst);
			case 66: return new ItemInst3_CopysprAssignment(this, this, 66, inst);
			case 67: return new Name_SelectNameParserRuleCall(this, this, 67, inst);
			case 68: return new SelectName_Group(this, this, 68, inst);
			case 69: return new NameMods_Alternatives(this, this, 69, inst);
			case 70: return new NamePattern1_Group(this, this, 70, inst);
			case 71: return new NamePattern2_Group(this, this, 71, inst);
			case 72: return new NameInst1_NameAssignment(this, this, 72, inst);
			case 73: return new NameInst2_ClearAssignment(this, this, 73, inst);
			case 74: return new Site_Alternatives(this, this, 74, inst);
			case 75: return new SelectSiteById_Group(this, this, 75, inst);
			case 76: return new SelectSiteByName_Group(this, this, 76, inst);
			case 77: return new NewSite_Group(this, this, 77, inst);
			case 78: return new SiteMods_Alternatives(this, this, 78, inst);
			case 79: return new SitePattern1_Group(this, this, 79, inst);
			case 80: return new SitePattern2_Group(this, this, 80, inst);
			case 81: return new SitePattern3_Group(this, this, 81, inst);
			case 82: return new SitePattern4_Group(this, this, 82, inst);
			case 83: return new SiteInst1_NameAssignment(this, this, 83, inst);
			case 84: return new SiteInst2_Alternatives(this, this, 84, inst);
			case 85: return new SiteInst3_GemsAssignment(this, this, 85, inst);
			case 86: return new SiteInst4_Alternatives(this, this, 86, inst);
			case 87: return new Nation_Alternatives(this, this, 87, inst);
			case 88: return new SelectNation_Group(this, this, 88, inst);
			case 89: return new IndepFlag_Group(this, this, 89, inst);
			case 90: return new NationMods_Alternatives(this, this, 90, inst);
			case 91: return new NationPattern1_Group(this, this, 91, inst);
			case 92: return new NationPattern2_Group(this, this, 92, inst);
			case 93: return new NationPattern3_Group(this, this, 93, inst);
			case 94: return new NationPattern4_Group(this, this, 94, inst);
			case 95: return new NationPattern5_Group(this, this, 95, inst);
			case 96: return new NationInst1_Alternatives(this, this, 96, inst);
			case 97: return new NationInst2_Alternatives(this, this, 97, inst);
			case 98: return new NationInst3_Alternatives(this, this, 98, inst);
			case 99: return new NationInst4_Alternatives(this, this, 99, inst);
			case 100: return new NationInst5_ColorAssignment(this, this, 100, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Dom3Mod ****************
 *
 * Dom3Mod:
 * 	("#modname" modname=STRING & ("#description" desc=STRING)? & ("#icon" icon=STRING)? & ("#version"
 * 	version=DecimalValue)? & ("#domversion" domversion=DecimalValue)? & ("#poppergold" poppergold=INT)? & ("#resourcemult"
 * 	resourcemult=INT)? & ("#supplymult" supplymult=INT)? & ("#unresthalfinc" unresthalfinc=INT)? & ("#unresthalfres"
 * 	unresthalfres=INT)? & ("#eventisrare" eventisrare=INT)? & ("#turmoilincome" turmoilincome=INT)? & ("#turmoilevents"
 * 	turmoilevents=INT)? & ("#deathincome" deathincome=INT)? & ("#deathsupply" deathsupply=INT)? & ("#deathdeath"
 * 	deathdeath=INT)? & ("#slothincome" slothincome=INT)? & ("#slothresources" slothresources=INT)? & ("#coldincome"
 * 	coldincome=INT)? & ("#coldsupply" coldsupply=INT)? & ("#misfortune" misfortune=INT)? & ("#luckevents" luckevents=INT)?
 * 	& ("#researchscale" researchscale=INT)? & "#end"?) elements+=AbstractElement*;
 *
 **/

// ("#modname" modname=STRING & ("#description" desc=STRING)? & ("#icon" icon=STRING)? & ("#version" version=DecimalValue)?
// & ("#domversion" domversion=DecimalValue)? & ("#poppergold" poppergold=INT)? & ("#resourcemult" resourcemult=INT)? &
// ("#supplymult" supplymult=INT)? & ("#unresthalfinc" unresthalfinc=INT)? & ("#unresthalfres" unresthalfres=INT)? &
// ("#eventisrare" eventisrare=INT)? & ("#turmoilincome" turmoilincome=INT)? & ("#turmoilevents" turmoilevents=INT)? &
// ("#deathincome" deathincome=INT)? & ("#deathsupply" deathsupply=INT)? & ("#deathdeath" deathdeath=INT)? &
// ("#slothincome" slothincome=INT)? & ("#slothresources" slothresources=INT)? & ("#coldincome" coldincome=INT)? &
// ("#coldsupply" coldsupply=INT)? & ("#misfortune" misfortune=INT)? & ("#luckevents" luckevents=INT)? & ("#researchscale"
// researchscale=INT)? & "#end"?) elements+=AbstractElement*
protected class Dom3Mod_Group extends GroupToken {
	
	public Dom3Mod_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ElementsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_UnorderedGroup_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDom3ModRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#modname" modname=STRING & ("#description" desc=STRING)? & ("#icon" icon=STRING)? & ("#version" version=DecimalValue)?
// & ("#domversion" domversion=DecimalValue)? & ("#poppergold" poppergold=INT)? & ("#resourcemult" resourcemult=INT)? &
// ("#supplymult" supplymult=INT)? & ("#unresthalfinc" unresthalfinc=INT)? & ("#unresthalfres" unresthalfres=INT)? &
// ("#eventisrare" eventisrare=INT)? & ("#turmoilincome" turmoilincome=INT)? & ("#turmoilevents" turmoilevents=INT)? &
// ("#deathincome" deathincome=INT)? & ("#deathsupply" deathsupply=INT)? & ("#deathdeath" deathdeath=INT)? &
// ("#slothincome" slothincome=INT)? & ("#slothresources" slothresources=INT)? & ("#coldincome" coldincome=INT)? &
// ("#coldsupply" coldsupply=INT)? & ("#misfortune" misfortune=INT)? & ("#luckevents" luckevents=INT)? & ("#researchscale"
// researchscale=INT)? & "#end"?
protected class Dom3Mod_UnorderedGroup_0 extends UnorderedGroupToken {
	
	public Dom3Mod_UnorderedGroup_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public UnorderedGroup getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getUnorderedGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_22(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_21(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_20(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_19(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_18(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_17(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_16(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_15(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_14(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 16, inst);
			case 17: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 17, inst);
			case 18: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 18, inst);
			case 19: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 19, inst);
			case 20: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 20, inst);
			case 21: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 21, inst);
			case 22: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 22, inst);
			default: return null;
		}	
	}

}

// "#modname" modname=STRING
protected class Dom3Mod_Group_0_0 extends GroupToken {
	
	public Dom3Mod_Group_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ModnameAssignment_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#modname"
protected class Dom3Mod_ModnameKeyword_0_0_0 extends KeywordToken  {
	
	public Dom3Mod_ModnameKeyword_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getModnameKeyword_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// modname=STRING
protected class Dom3Mod_ModnameAssignment_0_0_1 extends AssignmentToken  {
	
	public Dom3Mod_ModnameAssignment_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getModnameAssignment_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ModnameKeyword_0_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modname",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modname");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getModnameSTRINGTerminalRuleCall_0_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getModnameSTRINGTerminalRuleCall_0_0_1_0();
			return obj;
		}
		return null;
	}

}


// ("#description" desc=STRING)?
protected class Dom3Mod_Group_0_1 extends GroupToken {
	
	public Dom3Mod_Group_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DescAssignment_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#description"
protected class Dom3Mod_DescriptionKeyword_0_1_0 extends KeywordToken  {
	
	public Dom3Mod_DescriptionKeyword_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDescriptionKeyword_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// desc=STRING
protected class Dom3Mod_DescAssignment_0_1_1 extends AssignmentToken  {
	
	public Dom3Mod_DescAssignment_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDescAssignment_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DescriptionKeyword_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("desc",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("desc");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getDescSTRINGTerminalRuleCall_0_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getDescSTRINGTerminalRuleCall_0_1_1_0();
			return obj;
		}
		return null;
	}

}


// ("#icon" icon=STRING)?
protected class Dom3Mod_Group_0_2 extends GroupToken {
	
	public Dom3Mod_Group_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_IconAssignment_0_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#icon"
protected class Dom3Mod_IconKeyword_0_2_0 extends KeywordToken  {
	
	public Dom3Mod_IconKeyword_0_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getIconKeyword_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// icon=STRING
protected class Dom3Mod_IconAssignment_0_2_1 extends AssignmentToken  {
	
	public Dom3Mod_IconAssignment_0_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getIconAssignment_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_IconKeyword_0_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("icon",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("icon");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getIconSTRINGTerminalRuleCall_0_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getIconSTRINGTerminalRuleCall_0_2_1_0();
			return obj;
		}
		return null;
	}

}


// ("#version" version=DecimalValue)?
protected class Dom3Mod_Group_0_3 extends GroupToken {
	
	public Dom3Mod_Group_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_VersionAssignment_0_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#version"
protected class Dom3Mod_VersionKeyword_0_3_0 extends KeywordToken  {
	
	public Dom3Mod_VersionKeyword_0_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getVersionKeyword_0_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// version=DecimalValue
protected class Dom3Mod_VersionAssignment_0_3_1 extends AssignmentToken  {
	
	public Dom3Mod_VersionAssignment_0_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getVersionAssignment_0_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_VersionKeyword_0_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("version",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("version");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getVersionDecimalValueParserRuleCall_0_3_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getVersionDecimalValueParserRuleCall_0_3_1_0();
			return obj;
		}
		return null;
	}

}


// ("#domversion" domversion=DecimalValue)?
protected class Dom3Mod_Group_0_4 extends GroupToken {
	
	public Dom3Mod_Group_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DomversionAssignment_0_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#domversion"
protected class Dom3Mod_DomversionKeyword_0_4_0 extends KeywordToken  {
	
	public Dom3Mod_DomversionKeyword_0_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDomversionKeyword_0_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// domversion=DecimalValue
protected class Dom3Mod_DomversionAssignment_0_4_1 extends AssignmentToken  {
	
	public Dom3Mod_DomversionAssignment_0_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDomversionAssignment_0_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DomversionKeyword_0_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("domversion",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("domversion");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getDomversionDecimalValueParserRuleCall_0_4_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getDomversionDecimalValueParserRuleCall_0_4_1_0();
			return obj;
		}
		return null;
	}

}


// ("#poppergold" poppergold=INT)?
protected class Dom3Mod_Group_0_5 extends GroupToken {
	
	public Dom3Mod_Group_0_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_PoppergoldAssignment_0_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#poppergold"
protected class Dom3Mod_PoppergoldKeyword_0_5_0 extends KeywordToken  {
	
	public Dom3Mod_PoppergoldKeyword_0_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getPoppergoldKeyword_0_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// poppergold=INT
protected class Dom3Mod_PoppergoldAssignment_0_5_1 extends AssignmentToken  {
	
	public Dom3Mod_PoppergoldAssignment_0_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getPoppergoldAssignment_0_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_PoppergoldKeyword_0_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("poppergold",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("poppergold");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getPoppergoldINTTerminalRuleCall_0_5_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getPoppergoldINTTerminalRuleCall_0_5_1_0();
			return obj;
		}
		return null;
	}

}


// ("#resourcemult" resourcemult=INT)?
protected class Dom3Mod_Group_0_6 extends GroupToken {
	
	public Dom3Mod_Group_0_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ResourcemultAssignment_0_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#resourcemult"
protected class Dom3Mod_ResourcemultKeyword_0_6_0 extends KeywordToken  {
	
	public Dom3Mod_ResourcemultKeyword_0_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getResourcemultKeyword_0_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// resourcemult=INT
protected class Dom3Mod_ResourcemultAssignment_0_6_1 extends AssignmentToken  {
	
	public Dom3Mod_ResourcemultAssignment_0_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getResourcemultAssignment_0_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ResourcemultKeyword_0_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("resourcemult",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("resourcemult");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getResourcemultINTTerminalRuleCall_0_6_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getResourcemultINTTerminalRuleCall_0_6_1_0();
			return obj;
		}
		return null;
	}

}


// ("#supplymult" supplymult=INT)?
protected class Dom3Mod_Group_0_7 extends GroupToken {
	
	public Dom3Mod_Group_0_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_SupplymultAssignment_0_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#supplymult"
protected class Dom3Mod_SupplymultKeyword_0_7_0 extends KeywordToken  {
	
	public Dom3Mod_SupplymultKeyword_0_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getSupplymultKeyword_0_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

}

// supplymult=INT
protected class Dom3Mod_SupplymultAssignment_0_7_1 extends AssignmentToken  {
	
	public Dom3Mod_SupplymultAssignment_0_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getSupplymultAssignment_0_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_SupplymultKeyword_0_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("supplymult",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("supplymult");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getSupplymultINTTerminalRuleCall_0_7_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getSupplymultINTTerminalRuleCall_0_7_1_0();
			return obj;
		}
		return null;
	}

}


// ("#unresthalfinc" unresthalfinc=INT)?
protected class Dom3Mod_Group_0_8 extends GroupToken {
	
	public Dom3Mod_Group_0_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_UnresthalfincAssignment_0_8_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#unresthalfinc"
protected class Dom3Mod_UnresthalfincKeyword_0_8_0 extends KeywordToken  {
	
	public Dom3Mod_UnresthalfincKeyword_0_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getUnresthalfincKeyword_0_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

}

// unresthalfinc=INT
protected class Dom3Mod_UnresthalfincAssignment_0_8_1 extends AssignmentToken  {
	
	public Dom3Mod_UnresthalfincAssignment_0_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getUnresthalfincAssignment_0_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_UnresthalfincKeyword_0_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("unresthalfinc",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("unresthalfinc");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getUnresthalfincINTTerminalRuleCall_0_8_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getUnresthalfincINTTerminalRuleCall_0_8_1_0();
			return obj;
		}
		return null;
	}

}


// ("#unresthalfres" unresthalfres=INT)?
protected class Dom3Mod_Group_0_9 extends GroupToken {
	
	public Dom3Mod_Group_0_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_UnresthalfresAssignment_0_9_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#unresthalfres"
protected class Dom3Mod_UnresthalfresKeyword_0_9_0 extends KeywordToken  {
	
	public Dom3Mod_UnresthalfresKeyword_0_9_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getUnresthalfresKeyword_0_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 8, inst);
			default: return null;
		}	
	}

}

// unresthalfres=INT
protected class Dom3Mod_UnresthalfresAssignment_0_9_1 extends AssignmentToken  {
	
	public Dom3Mod_UnresthalfresAssignment_0_9_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getUnresthalfresAssignment_0_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_UnresthalfresKeyword_0_9_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("unresthalfres",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("unresthalfres");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getUnresthalfresINTTerminalRuleCall_0_9_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getUnresthalfresINTTerminalRuleCall_0_9_1_0();
			return obj;
		}
		return null;
	}

}


// ("#eventisrare" eventisrare=INT)?
protected class Dom3Mod_Group_0_10 extends GroupToken {
	
	public Dom3Mod_Group_0_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_EventisrareAssignment_0_10_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#eventisrare"
protected class Dom3Mod_EventisrareKeyword_0_10_0 extends KeywordToken  {
	
	public Dom3Mod_EventisrareKeyword_0_10_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getEventisrareKeyword_0_10_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 9, inst);
			default: return null;
		}	
	}

}

// eventisrare=INT
protected class Dom3Mod_EventisrareAssignment_0_10_1 extends AssignmentToken  {
	
	public Dom3Mod_EventisrareAssignment_0_10_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getEventisrareAssignment_0_10_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_EventisrareKeyword_0_10_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eventisrare",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eventisrare");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getEventisrareINTTerminalRuleCall_0_10_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getEventisrareINTTerminalRuleCall_0_10_1_0();
			return obj;
		}
		return null;
	}

}


// ("#turmoilincome" turmoilincome=INT)?
protected class Dom3Mod_Group_0_11 extends GroupToken {
	
	public Dom3Mod_Group_0_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_TurmoilincomeAssignment_0_11_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#turmoilincome"
protected class Dom3Mod_TurmoilincomeKeyword_0_11_0 extends KeywordToken  {
	
	public Dom3Mod_TurmoilincomeKeyword_0_11_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getTurmoilincomeKeyword_0_11_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 10, inst);
			default: return null;
		}	
	}

}

// turmoilincome=INT
protected class Dom3Mod_TurmoilincomeAssignment_0_11_1 extends AssignmentToken  {
	
	public Dom3Mod_TurmoilincomeAssignment_0_11_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getTurmoilincomeAssignment_0_11_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_TurmoilincomeKeyword_0_11_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("turmoilincome",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("turmoilincome");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getTurmoilincomeINTTerminalRuleCall_0_11_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getTurmoilincomeINTTerminalRuleCall_0_11_1_0();
			return obj;
		}
		return null;
	}

}


// ("#turmoilevents" turmoilevents=INT)?
protected class Dom3Mod_Group_0_12 extends GroupToken {
	
	public Dom3Mod_Group_0_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_TurmoileventsAssignment_0_12_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#turmoilevents"
protected class Dom3Mod_TurmoileventsKeyword_0_12_0 extends KeywordToken  {
	
	public Dom3Mod_TurmoileventsKeyword_0_12_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getTurmoileventsKeyword_0_12_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 11, inst);
			default: return null;
		}	
	}

}

// turmoilevents=INT
protected class Dom3Mod_TurmoileventsAssignment_0_12_1 extends AssignmentToken  {
	
	public Dom3Mod_TurmoileventsAssignment_0_12_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getTurmoileventsAssignment_0_12_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_TurmoileventsKeyword_0_12_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("turmoilevents",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("turmoilevents");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getTurmoileventsINTTerminalRuleCall_0_12_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getTurmoileventsINTTerminalRuleCall_0_12_1_0();
			return obj;
		}
		return null;
	}

}


// ("#deathincome" deathincome=INT)?
protected class Dom3Mod_Group_0_13 extends GroupToken {
	
	public Dom3Mod_Group_0_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DeathincomeAssignment_0_13_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#deathincome"
protected class Dom3Mod_DeathincomeKeyword_0_13_0 extends KeywordToken  {
	
	public Dom3Mod_DeathincomeKeyword_0_13_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDeathincomeKeyword_0_13_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 12, inst);
			default: return null;
		}	
	}

}

// deathincome=INT
protected class Dom3Mod_DeathincomeAssignment_0_13_1 extends AssignmentToken  {
	
	public Dom3Mod_DeathincomeAssignment_0_13_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDeathincomeAssignment_0_13_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DeathincomeKeyword_0_13_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("deathincome",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("deathincome");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getDeathincomeINTTerminalRuleCall_0_13_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getDeathincomeINTTerminalRuleCall_0_13_1_0();
			return obj;
		}
		return null;
	}

}


// ("#deathsupply" deathsupply=INT)?
protected class Dom3Mod_Group_0_14 extends GroupToken {
	
	public Dom3Mod_Group_0_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DeathsupplyAssignment_0_14_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#deathsupply"
protected class Dom3Mod_DeathsupplyKeyword_0_14_0 extends KeywordToken  {
	
	public Dom3Mod_DeathsupplyKeyword_0_14_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDeathsupplyKeyword_0_14_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 13, inst);
			default: return null;
		}	
	}

}

// deathsupply=INT
protected class Dom3Mod_DeathsupplyAssignment_0_14_1 extends AssignmentToken  {
	
	public Dom3Mod_DeathsupplyAssignment_0_14_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDeathsupplyAssignment_0_14_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DeathsupplyKeyword_0_14_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("deathsupply",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("deathsupply");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getDeathsupplyINTTerminalRuleCall_0_14_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getDeathsupplyINTTerminalRuleCall_0_14_1_0();
			return obj;
		}
		return null;
	}

}


// ("#deathdeath" deathdeath=INT)?
protected class Dom3Mod_Group_0_15 extends GroupToken {
	
	public Dom3Mod_Group_0_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DeathdeathAssignment_0_15_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#deathdeath"
protected class Dom3Mod_DeathdeathKeyword_0_15_0 extends KeywordToken  {
	
	public Dom3Mod_DeathdeathKeyword_0_15_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDeathdeathKeyword_0_15_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_14(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 14, inst);
			default: return null;
		}	
	}

}

// deathdeath=INT
protected class Dom3Mod_DeathdeathAssignment_0_15_1 extends AssignmentToken  {
	
	public Dom3Mod_DeathdeathAssignment_0_15_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getDeathdeathAssignment_0_15_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_DeathdeathKeyword_0_15_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("deathdeath",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("deathdeath");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getDeathdeathINTTerminalRuleCall_0_15_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getDeathdeathINTTerminalRuleCall_0_15_1_0();
			return obj;
		}
		return null;
	}

}


// ("#slothincome" slothincome=INT)?
protected class Dom3Mod_Group_0_16 extends GroupToken {
	
	public Dom3Mod_Group_0_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_SlothincomeAssignment_0_16_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#slothincome"
protected class Dom3Mod_SlothincomeKeyword_0_16_0 extends KeywordToken  {
	
	public Dom3Mod_SlothincomeKeyword_0_16_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getSlothincomeKeyword_0_16_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_15(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_14(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 15, inst);
			default: return null;
		}	
	}

}

// slothincome=INT
protected class Dom3Mod_SlothincomeAssignment_0_16_1 extends AssignmentToken  {
	
	public Dom3Mod_SlothincomeAssignment_0_16_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getSlothincomeAssignment_0_16_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_SlothincomeKeyword_0_16_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("slothincome",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("slothincome");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getSlothincomeINTTerminalRuleCall_0_16_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getSlothincomeINTTerminalRuleCall_0_16_1_0();
			return obj;
		}
		return null;
	}

}


// ("#slothresources" slothresources=INT)?
protected class Dom3Mod_Group_0_17 extends GroupToken {
	
	public Dom3Mod_Group_0_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_SlothresourcesAssignment_0_17_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#slothresources"
protected class Dom3Mod_SlothresourcesKeyword_0_17_0 extends KeywordToken  {
	
	public Dom3Mod_SlothresourcesKeyword_0_17_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getSlothresourcesKeyword_0_17_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_16(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_15(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_14(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 16, inst);
			default: return null;
		}	
	}

}

// slothresources=INT
protected class Dom3Mod_SlothresourcesAssignment_0_17_1 extends AssignmentToken  {
	
	public Dom3Mod_SlothresourcesAssignment_0_17_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getSlothresourcesAssignment_0_17_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_SlothresourcesKeyword_0_17_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("slothresources",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("slothresources");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getSlothresourcesINTTerminalRuleCall_0_17_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getSlothresourcesINTTerminalRuleCall_0_17_1_0();
			return obj;
		}
		return null;
	}

}


// ("#coldincome" coldincome=INT)?
protected class Dom3Mod_Group_0_18 extends GroupToken {
	
	public Dom3Mod_Group_0_18(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_18();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ColdincomeAssignment_0_18_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#coldincome"
protected class Dom3Mod_ColdincomeKeyword_0_18_0 extends KeywordToken  {
	
	public Dom3Mod_ColdincomeKeyword_0_18_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getColdincomeKeyword_0_18_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_17(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_16(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_15(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_14(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 16, inst);
			case 17: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 17, inst);
			default: return null;
		}	
	}

}

// coldincome=INT
protected class Dom3Mod_ColdincomeAssignment_0_18_1 extends AssignmentToken  {
	
	public Dom3Mod_ColdincomeAssignment_0_18_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getColdincomeAssignment_0_18_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ColdincomeKeyword_0_18_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("coldincome",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("coldincome");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getColdincomeINTTerminalRuleCall_0_18_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getColdincomeINTTerminalRuleCall_0_18_1_0();
			return obj;
		}
		return null;
	}

}


// ("#coldsupply" coldsupply=INT)?
protected class Dom3Mod_Group_0_19 extends GroupToken {
	
	public Dom3Mod_Group_0_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ColdsupplyAssignment_0_19_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#coldsupply"
protected class Dom3Mod_ColdsupplyKeyword_0_19_0 extends KeywordToken  {
	
	public Dom3Mod_ColdsupplyKeyword_0_19_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getColdsupplyKeyword_0_19_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_18(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_17(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_16(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_15(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_14(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 16, inst);
			case 17: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 17, inst);
			case 18: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 18, inst);
			default: return null;
		}	
	}

}

// coldsupply=INT
protected class Dom3Mod_ColdsupplyAssignment_0_19_1 extends AssignmentToken  {
	
	public Dom3Mod_ColdsupplyAssignment_0_19_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getColdsupplyAssignment_0_19_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ColdsupplyKeyword_0_19_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("coldsupply",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("coldsupply");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getColdsupplyINTTerminalRuleCall_0_19_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getColdsupplyINTTerminalRuleCall_0_19_1_0();
			return obj;
		}
		return null;
	}

}


// ("#misfortune" misfortune=INT)?
protected class Dom3Mod_Group_0_20 extends GroupToken {
	
	public Dom3Mod_Group_0_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_MisfortuneAssignment_0_20_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#misfortune"
protected class Dom3Mod_MisfortuneKeyword_0_20_0 extends KeywordToken  {
	
	public Dom3Mod_MisfortuneKeyword_0_20_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getMisfortuneKeyword_0_20_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_19(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_18(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_17(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_16(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_15(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_14(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 16, inst);
			case 17: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 17, inst);
			case 18: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 18, inst);
			case 19: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 19, inst);
			default: return null;
		}	
	}

}

// misfortune=INT
protected class Dom3Mod_MisfortuneAssignment_0_20_1 extends AssignmentToken  {
	
	public Dom3Mod_MisfortuneAssignment_0_20_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getMisfortuneAssignment_0_20_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_MisfortuneKeyword_0_20_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("misfortune",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("misfortune");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getMisfortuneINTTerminalRuleCall_0_20_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getMisfortuneINTTerminalRuleCall_0_20_1_0();
			return obj;
		}
		return null;
	}

}


// ("#luckevents" luckevents=INT)?
protected class Dom3Mod_Group_0_21 extends GroupToken {
	
	public Dom3Mod_Group_0_21(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_21();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_LuckeventsAssignment_0_21_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#luckevents"
protected class Dom3Mod_LuckeventsKeyword_0_21_0 extends KeywordToken  {
	
	public Dom3Mod_LuckeventsKeyword_0_21_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getLuckeventsKeyword_0_21_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_20(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_19(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_18(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_17(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_16(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_15(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_14(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 16, inst);
			case 17: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 17, inst);
			case 18: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 18, inst);
			case 19: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 19, inst);
			case 20: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 20, inst);
			default: return null;
		}	
	}

}

// luckevents=INT
protected class Dom3Mod_LuckeventsAssignment_0_21_1 extends AssignmentToken  {
	
	public Dom3Mod_LuckeventsAssignment_0_21_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getLuckeventsAssignment_0_21_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_LuckeventsKeyword_0_21_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("luckevents",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("luckevents");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getLuckeventsINTTerminalRuleCall_0_21_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getLuckeventsINTTerminalRuleCall_0_21_1_0();
			return obj;
		}
		return null;
	}

}


// ("#researchscale" researchscale=INT)?
protected class Dom3Mod_Group_0_22 extends GroupToken {
	
	public Dom3Mod_Group_0_22(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getGroup_0_22();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ResearchscaleAssignment_0_22_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "#researchscale"
protected class Dom3Mod_ResearchscaleKeyword_0_22_0 extends KeywordToken  {
	
	public Dom3Mod_ResearchscaleKeyword_0_22_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getResearchscaleKeyword_0_22_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_Group_0_21(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Dom3Mod_Group_0_20(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Dom3Mod_Group_0_19(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Dom3Mod_Group_0_18(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Dom3Mod_Group_0_17(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Dom3Mod_Group_0_16(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Dom3Mod_Group_0_15(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Dom3Mod_Group_0_14(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Dom3Mod_Group_0_13(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Dom3Mod_Group_0_12(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Dom3Mod_Group_0_11(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Dom3Mod_Group_0_10(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Dom3Mod_Group_0_9(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Dom3Mod_Group_0_8(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Dom3Mod_Group_0_7(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Dom3Mod_Group_0_6(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Dom3Mod_Group_0_5(lastRuleCallOrigin, this, 16, inst);
			case 17: return new Dom3Mod_Group_0_4(lastRuleCallOrigin, this, 17, inst);
			case 18: return new Dom3Mod_Group_0_3(lastRuleCallOrigin, this, 18, inst);
			case 19: return new Dom3Mod_Group_0_2(lastRuleCallOrigin, this, 19, inst);
			case 20: return new Dom3Mod_Group_0_1(lastRuleCallOrigin, this, 20, inst);
			case 21: return new Dom3Mod_Group_0_0(lastRuleCallOrigin, this, 21, inst);
			default: return null;
		}	
	}

}

// researchscale=INT
protected class Dom3Mod_ResearchscaleAssignment_0_22_1 extends AssignmentToken  {
	
	public Dom3Mod_ResearchscaleAssignment_0_22_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getResearchscaleAssignment_0_22_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dom3Mod_ResearchscaleKeyword_0_22_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("researchscale",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("researchscale");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDom3ModAccess().getResearchscaleINTTerminalRuleCall_0_22_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDom3ModAccess().getResearchscaleINTTerminalRuleCall_0_22_1_0();
			return obj;
		}
		return null;
	}

}



// elements+=AbstractElement*
protected class Dom3Mod_ElementsAssignment_1 extends AssignmentToken  {
	
	public Dom3Mod_ElementsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDom3ModAccess().getElementsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbstractElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractElementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDom3ModAccess().getElementsAbstractElementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Dom3Mod_ElementsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Dom3Mod_UnorderedGroup_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Dom3Mod ****************/


/************ begin Rule AbstractElement ****************
 *
 * AbstractElement:
 * 	Armor | Weapon | Monster | Spell | Item | Name | Site | Nation;
 *
 **/

// Armor | Weapon | Monster | Spell | Item | Name | Site | Nation
protected class AbstractElement_Alternatives extends AlternativesToken {

	public AbstractElement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbstractElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbstractElement_ArmorParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AbstractElement_WeaponParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AbstractElement_MonsterParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new AbstractElement_SpellParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new AbstractElement_ItemParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new AbstractElement_NameParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new AbstractElement_SiteParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new AbstractElement_NationParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIndepFlagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewArmorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewItemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewMonsterRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewSiteRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewSpellRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewWeaponRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectArmorByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectArmorByNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectItemByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectItemByNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectMonsterByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectMonsterByNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectNationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSiteByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSiteByNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSpellByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSpellByNameRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectWeaponByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectWeaponByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Armor
protected class AbstractElement_ArmorParserRuleCall_0 extends RuleCallToken {
	
	public AbstractElement_ArmorParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractElementAccess().getArmorParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Armor_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewArmorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectArmorByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectArmorByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Armor_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Weapon
protected class AbstractElement_WeaponParserRuleCall_1 extends RuleCallToken {
	
	public AbstractElement_WeaponParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractElementAccess().getWeaponParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Weapon_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewWeaponRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectWeaponByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectWeaponByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Weapon_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Monster
protected class AbstractElement_MonsterParserRuleCall_2 extends RuleCallToken {
	
	public AbstractElement_MonsterParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractElementAccess().getMonsterParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Monster_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewMonsterRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectMonsterByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectMonsterByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Monster_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Spell
protected class AbstractElement_SpellParserRuleCall_3 extends RuleCallToken {
	
	public AbstractElement_SpellParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractElementAccess().getSpellParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Spell_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewSpellRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSpellByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSpellByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Spell_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Item
protected class AbstractElement_ItemParserRuleCall_4 extends RuleCallToken {
	
	public AbstractElement_ItemParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractElementAccess().getItemParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Item_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewItemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectItemByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectItemByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Item_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Name
protected class AbstractElement_NameParserRuleCall_5 extends RuleCallToken {
	
	public AbstractElement_NameParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractElementAccess().getNameParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Name_SelectNameParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Name_SelectNameParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Site
protected class AbstractElement_SiteParserRuleCall_6 extends RuleCallToken {
	
	public AbstractElement_SiteParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractElementAccess().getSiteParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Site_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewSiteRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSiteByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSiteByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Site_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Nation
protected class AbstractElement_NationParserRuleCall_7 extends RuleCallToken {
	
	public AbstractElement_NationParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractElementAccess().getNationParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Nation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIndepFlagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectNationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Nation_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AbstractElement ****************/


/************ begin Rule Armor ****************
 *
 * / ************** / / * Armor Mods * / / ************** / Armor:
 * 	SelectArmorById | SelectArmorByName | NewArmor;
 *
 **/

// SelectArmorById | SelectArmorByName | NewArmor
protected class Armor_Alternatives extends AlternativesToken {

	public Armor_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getArmorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Armor_SelectArmorByIdParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Armor_SelectArmorByNameParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Armor_NewArmorParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewArmorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectArmorByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectArmorByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SelectArmorById
protected class Armor_SelectArmorByIdParserRuleCall_0 extends RuleCallToken {
	
	public Armor_SelectArmorByIdParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArmorAccess().getSelectArmorByIdParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectArmorById_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectArmorByIdRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectArmorById_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SelectArmorByName
protected class Armor_SelectArmorByNameParserRuleCall_1 extends RuleCallToken {
	
	public Armor_SelectArmorByNameParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArmorAccess().getSelectArmorByNameParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectArmorByName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectArmorByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectArmorByName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NewArmor
protected class Armor_NewArmorParserRuleCall_2 extends RuleCallToken {
	
	public Armor_NewArmorParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArmorAccess().getNewArmorParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewArmor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewArmorRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NewArmor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Armor ****************/


/************ begin Rule SelectArmorById ****************
 *
 * SelectArmorById:
 * 	"#selectarmor" value=INT FREE_FORM_COMMENT* mods+=ArmorMods* "#end";
 *
 **/

// "#selectarmor" value=INT FREE_FORM_COMMENT* mods+=ArmorMods* "#end"
protected class SelectArmorById_Group extends GroupToken {
	
	public SelectArmorById_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectArmorByIdAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectArmorById_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectArmorByIdRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectarmor"
protected class SelectArmorById_SelectarmorKeyword_0 extends KeywordToken  {
	
	public SelectArmorById_SelectarmorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectArmorByIdAccess().getSelectarmorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class SelectArmorById_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectArmorById_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectArmorByIdAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectArmorById_SelectarmorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectArmorByIdAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectArmorByIdAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=ArmorMods*
protected class SelectArmorById_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectArmorById_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectArmorByIdAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArmorModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectArmorByIdAccess().getModsArmorModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectArmorById_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectArmorById_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectArmorById_EndKeyword_4 extends KeywordToken  {
	
	public SelectArmorById_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectArmorByIdAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectArmorById_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectArmorById_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectArmorById ****************/


/************ begin Rule SelectArmorByName ****************
 *
 * SelectArmorByName:
 * 	"#selectarmor" value=STRING FREE_FORM_COMMENT* mods+=ArmorMods* "#end";
 *
 **/

// "#selectarmor" value=STRING FREE_FORM_COMMENT* mods+=ArmorMods* "#end"
protected class SelectArmorByName_Group extends GroupToken {
	
	public SelectArmorByName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectArmorByNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectArmorByName_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectArmorByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectarmor"
protected class SelectArmorByName_SelectarmorKeyword_0 extends KeywordToken  {
	
	public SelectArmorByName_SelectarmorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectArmorByNameAccess().getSelectarmorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=STRING
protected class SelectArmorByName_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectArmorByName_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectArmorByNameAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectArmorByName_SelectarmorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectArmorByNameAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectArmorByNameAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=ArmorMods*
protected class SelectArmorByName_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectArmorByName_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectArmorByNameAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArmorModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectArmorByNameAccess().getModsArmorModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectArmorByName_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectArmorByName_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectArmorByName_EndKeyword_4 extends KeywordToken  {
	
	public SelectArmorByName_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectArmorByNameAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectArmorByName_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectArmorByName_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectArmorByName ****************/


/************ begin Rule NewArmor ****************
 *
 * NewArmor:
 * 	"#newarmor" value=INT FREE_FORM_COMMENT* mods+=ArmorMods* "#end";
 *
 **/

// "#newarmor" value=INT FREE_FORM_COMMENT* mods+=ArmorMods* "#end"
protected class NewArmor_Group extends GroupToken {
	
	public NewArmor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNewArmorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewArmor_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewArmorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#newarmor"
protected class NewArmor_NewarmorKeyword_0 extends KeywordToken  {
	
	public NewArmor_NewarmorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewArmorAccess().getNewarmorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class NewArmor_ValueAssignment_1 extends AssignmentToken  {
	
	public NewArmor_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewArmorAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewArmor_NewarmorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNewArmorAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNewArmorAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=ArmorMods*
protected class NewArmor_ModsAssignment_3 extends AssignmentToken  {
	
	public NewArmor_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewArmorAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArmorModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNewArmorAccess().getModsArmorModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NewArmor_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NewArmor_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class NewArmor_EndKeyword_4 extends KeywordToken  {
	
	public NewArmor_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewArmorAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewArmor_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NewArmor_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NewArmor ****************/


/************ begin Rule ArmorMods ****************
 *
 * ArmorMods:
 * 	ArmorPattern1 | ArmorPattern2;
 *
 **/

// ArmorPattern1 | ArmorPattern2
protected class ArmorMods_Alternatives extends AlternativesToken {

	public ArmorMods_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getArmorModsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorMods_ArmorPattern1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArmorMods_ArmorPattern2ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArmorInst1Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getArmorInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ArmorPattern1
protected class ArmorMods_ArmorPattern1ParserRuleCall_0 extends RuleCallToken {
	
	public ArmorMods_ArmorPattern1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArmorModsAccess().getArmorPattern1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorPattern1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArmorInst1Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(ArmorPattern1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ArmorPattern2
protected class ArmorMods_ArmorPattern2ParserRuleCall_1 extends RuleCallToken {
	
	public ArmorMods_ArmorPattern2ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArmorModsAccess().getArmorPattern2ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorPattern2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArmorInst2Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(ArmorPattern2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ArmorMods ****************/


/************ begin Rule ArmorPattern1 ****************
 *
 * ArmorPattern1:
 * 	ArmorInst1 value=STRING FREE_FORM_COMMENT*;
 *
 **/

// ArmorInst1 value=STRING FREE_FORM_COMMENT*
protected class ArmorPattern1_Group extends GroupToken {
	
	public ArmorPattern1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArmorPattern1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorPattern1_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArmorInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ArmorInst1
protected class ArmorPattern1_ArmorInst1ParserRuleCall_0 extends RuleCallToken {
	
	public ArmorPattern1_ArmorInst1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArmorPattern1Access().getArmorInst1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorInst1_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ArmorInst1_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=STRING
protected class ArmorPattern1_ValueAssignment_1 extends AssignmentToken  {
	
	public ArmorPattern1_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArmorPattern1Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorPattern1_ArmorInst1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArmorPattern1Access().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArmorPattern1Access().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ArmorPattern1 ****************/


/************ begin Rule ArmorPattern2 ****************
 *
 * ArmorPattern2:
 * 	ArmorInst2 value=INT FREE_FORM_COMMENT*;
 *
 **/

// ArmorInst2 value=INT FREE_FORM_COMMENT*
protected class ArmorPattern2_Group extends GroupToken {
	
	public ArmorPattern2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArmorPattern2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorPattern2_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArmorInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ArmorInst2
protected class ArmorPattern2_ArmorInst2ParserRuleCall_0 extends RuleCallToken {
	
	public ArmorPattern2_ArmorInst2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArmorPattern2Access().getArmorInst2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorInst2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ArmorInst2_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=INT
protected class ArmorPattern2_ValueAssignment_1 extends AssignmentToken  {
	
	public ArmorPattern2_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArmorPattern2Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorPattern2_ArmorInst2ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArmorPattern2Access().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArmorPattern2Access().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ArmorPattern2 ****************/


/************ begin Rule ArmorInst1 ****************
 *
 * ArmorInst1:
 * 	name?="#name";
 *
 **/

// name?="#name"
protected class ArmorInst1_NameAssignment extends AssignmentToken  {
	
	public ArmorInst1_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArmorInst1Access().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArmorInst1Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getArmorInst1Access().getNameNameKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule ArmorInst1 ****************/


/************ begin Rule ArmorInst2 ****************
 *
 * ArmorInst2:
 * 	type?="#type" | prot?="#prot" | def?="#def" | enc?="#enc" | rcost?="#rcost";
 *
 **/

// type?="#type" | prot?="#prot" | def?="#def" | enc?="#enc" | rcost?="#rcost"
protected class ArmorInst2_Alternatives extends AlternativesToken {

	public ArmorInst2_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getArmorInst2Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArmorInst2_TypeAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArmorInst2_ProtAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ArmorInst2_DefAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ArmorInst2_EncAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ArmorInst2_RcostAssignment_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArmorInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type?="#type"
protected class ArmorInst2_TypeAssignment_0 extends AssignmentToken  {
	
	public ArmorInst2_TypeAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArmorInst2Access().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getArmorInst2Access().getTypeTypeKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// prot?="#prot"
protected class ArmorInst2_ProtAssignment_1 extends AssignmentToken  {
	
	public ArmorInst2_ProtAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArmorInst2Access().getProtAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("prot",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("prot");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getArmorInst2Access().getProtProtKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// def?="#def"
protected class ArmorInst2_DefAssignment_2 extends AssignmentToken  {
	
	public ArmorInst2_DefAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArmorInst2Access().getDefAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("def",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("def");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getArmorInst2Access().getDefDefKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// enc?="#enc"
protected class ArmorInst2_EncAssignment_3 extends AssignmentToken  {
	
	public ArmorInst2_EncAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArmorInst2Access().getEncAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("enc",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("enc");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getArmorInst2Access().getEncEncKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// rcost?="#rcost"
protected class ArmorInst2_RcostAssignment_4 extends AssignmentToken  {
	
	public ArmorInst2_RcostAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArmorInst2Access().getRcostAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getArmorInst2Access().getRcostRcostKeyword_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ArmorInst2 ****************/


/************ begin Rule Weapon ****************
 *
 * / *************** / / * Weapon Mods * / / *************** / Weapon:
 * 	SelectWeaponById | SelectWeaponByName | NewWeapon;
 *
 **/

// SelectWeaponById | SelectWeaponByName | NewWeapon
protected class Weapon_Alternatives extends AlternativesToken {

	public Weapon_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWeaponAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Weapon_SelectWeaponByIdParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Weapon_SelectWeaponByNameParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Weapon_NewWeaponParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewWeaponRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectWeaponByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectWeaponByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SelectWeaponById
protected class Weapon_SelectWeaponByIdParserRuleCall_0 extends RuleCallToken {
	
	public Weapon_SelectWeaponByIdParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponAccess().getSelectWeaponByIdParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectWeaponById_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectWeaponByIdRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectWeaponById_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SelectWeaponByName
protected class Weapon_SelectWeaponByNameParserRuleCall_1 extends RuleCallToken {
	
	public Weapon_SelectWeaponByNameParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponAccess().getSelectWeaponByNameParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectWeaponByName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectWeaponByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectWeaponByName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NewWeapon
protected class Weapon_NewWeaponParserRuleCall_2 extends RuleCallToken {
	
	public Weapon_NewWeaponParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponAccess().getNewWeaponParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewWeapon_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewWeaponRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NewWeapon_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Weapon ****************/


/************ begin Rule SelectWeaponById ****************
 *
 * SelectWeaponById:
 * 	"#selectweapon" value=INT FREE_FORM_COMMENT* mods+=WeaponMods* "#end";
 *
 **/

// "#selectweapon" value=INT FREE_FORM_COMMENT* mods+=WeaponMods* "#end"
protected class SelectWeaponById_Group extends GroupToken {
	
	public SelectWeaponById_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectWeaponByIdAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectWeaponById_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectWeaponByIdRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectweapon"
protected class SelectWeaponById_SelectweaponKeyword_0 extends KeywordToken  {
	
	public SelectWeaponById_SelectweaponKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectWeaponByIdAccess().getSelectweaponKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class SelectWeaponById_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectWeaponById_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectWeaponByIdAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectWeaponById_SelectweaponKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectWeaponByIdAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectWeaponByIdAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=WeaponMods*
protected class SelectWeaponById_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectWeaponById_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectWeaponByIdAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWeaponModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectWeaponByIdAccess().getModsWeaponModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectWeaponById_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectWeaponById_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectWeaponById_EndKeyword_4 extends KeywordToken  {
	
	public SelectWeaponById_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectWeaponByIdAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectWeaponById_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectWeaponById_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectWeaponById ****************/


/************ begin Rule SelectWeaponByName ****************
 *
 * SelectWeaponByName:
 * 	"#selectweapon" value=STRING FREE_FORM_COMMENT* mods+=WeaponMods* "#end";
 *
 **/

// "#selectweapon" value=STRING FREE_FORM_COMMENT* mods+=WeaponMods* "#end"
protected class SelectWeaponByName_Group extends GroupToken {
	
	public SelectWeaponByName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectWeaponByNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectWeaponByName_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectWeaponByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectweapon"
protected class SelectWeaponByName_SelectweaponKeyword_0 extends KeywordToken  {
	
	public SelectWeaponByName_SelectweaponKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectWeaponByNameAccess().getSelectweaponKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=STRING
protected class SelectWeaponByName_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectWeaponByName_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectWeaponByNameAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectWeaponByName_SelectweaponKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectWeaponByNameAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectWeaponByNameAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=WeaponMods*
protected class SelectWeaponByName_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectWeaponByName_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectWeaponByNameAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWeaponModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectWeaponByNameAccess().getModsWeaponModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectWeaponByName_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectWeaponByName_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectWeaponByName_EndKeyword_4 extends KeywordToken  {
	
	public SelectWeaponByName_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectWeaponByNameAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectWeaponByName_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectWeaponByName_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectWeaponByName ****************/


/************ begin Rule NewWeapon ****************
 *
 * NewWeapon:
 * 	"#newweapon" value=INT FREE_FORM_COMMENT* mods+=WeaponMods* "#end";
 *
 **/

// "#newweapon" value=INT FREE_FORM_COMMENT* mods+=WeaponMods* "#end"
protected class NewWeapon_Group extends GroupToken {
	
	public NewWeapon_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNewWeaponAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewWeapon_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewWeaponRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#newweapon"
protected class NewWeapon_NewweaponKeyword_0 extends KeywordToken  {
	
	public NewWeapon_NewweaponKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewWeaponAccess().getNewweaponKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class NewWeapon_ValueAssignment_1 extends AssignmentToken  {
	
	public NewWeapon_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewWeaponAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewWeapon_NewweaponKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNewWeaponAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNewWeaponAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=WeaponMods*
protected class NewWeapon_ModsAssignment_3 extends AssignmentToken  {
	
	public NewWeapon_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewWeaponAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWeaponModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNewWeaponAccess().getModsWeaponModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NewWeapon_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NewWeapon_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class NewWeapon_EndKeyword_4 extends KeywordToken  {
	
	public NewWeapon_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewWeaponAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewWeapon_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NewWeapon_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NewWeapon ****************/


/************ begin Rule WeaponMods ****************
 *
 * WeaponMods:
 * 	WeaponPattern1 | WeaponPattern2 | WeaponPattern3 | WeaponPattern4;
 *
 **/

// WeaponPattern1 | WeaponPattern2 | WeaponPattern3 | WeaponPattern4
protected class WeaponMods_Alternatives extends AlternativesToken {

	public WeaponMods_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWeaponModsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponMods_WeaponPattern1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WeaponMods_WeaponPattern2ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WeaponMods_WeaponPattern3ParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new WeaponMods_WeaponPattern4ParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst1Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWeaponInst2Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWeaponInst3Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWeaponInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WeaponPattern1
protected class WeaponMods_WeaponPattern1ParserRuleCall_0 extends RuleCallToken {
	
	public WeaponMods_WeaponPattern1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponModsAccess().getWeaponPattern1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst1Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(WeaponPattern1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WeaponPattern2
protected class WeaponMods_WeaponPattern2ParserRuleCall_1 extends RuleCallToken {
	
	public WeaponMods_WeaponPattern2ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponModsAccess().getWeaponPattern2ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst2Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(WeaponPattern2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WeaponPattern3
protected class WeaponMods_WeaponPattern3ParserRuleCall_2 extends RuleCallToken {
	
	public WeaponMods_WeaponPattern3ParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponModsAccess().getWeaponPattern3ParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst3Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(WeaponPattern3_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WeaponPattern4
protected class WeaponMods_WeaponPattern4ParserRuleCall_3 extends RuleCallToken {
	
	public WeaponMods_WeaponPattern4ParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponModsAccess().getWeaponPattern4ParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst4Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(WeaponPattern4_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WeaponMods ****************/


/************ begin Rule WeaponPattern1 ****************
 *
 * WeaponPattern1:
 * 	WeaponInst1 value=STRING FREE_FORM_COMMENT*;
 *
 **/

// WeaponInst1 value=STRING FREE_FORM_COMMENT*
protected class WeaponPattern1_Group extends GroupToken {
	
	public WeaponPattern1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWeaponPattern1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern1_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WeaponInst1
protected class WeaponPattern1_WeaponInst1ParserRuleCall_0 extends RuleCallToken {
	
	public WeaponPattern1_WeaponInst1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponPattern1Access().getWeaponInst1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponInst1_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(WeaponInst1_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=STRING
protected class WeaponPattern1_ValueAssignment_1 extends AssignmentToken  {
	
	public WeaponPattern1_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponPattern1Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern1_WeaponInst1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWeaponPattern1Access().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWeaponPattern1Access().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WeaponPattern1 ****************/


/************ begin Rule WeaponPattern2 ****************
 *
 * WeaponPattern2:
 * 	WeaponInst2 value=INT FREE_FORM_COMMENT*;
 *
 **/

// WeaponInst2 value=INT FREE_FORM_COMMENT*
protected class WeaponPattern2_Group extends GroupToken {
	
	public WeaponPattern2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWeaponPattern2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern2_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WeaponInst2
protected class WeaponPattern2_WeaponInst2ParserRuleCall_0 extends RuleCallToken {
	
	public WeaponPattern2_WeaponInst2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponPattern2Access().getWeaponInst2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponInst2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(WeaponInst2_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=INT
protected class WeaponPattern2_ValueAssignment_1 extends AssignmentToken  {
	
	public WeaponPattern2_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponPattern2Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern2_WeaponInst2ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWeaponPattern2Access().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWeaponPattern2Access().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WeaponPattern2 ****************/


/************ begin Rule WeaponPattern3 ****************
 *
 * WeaponPattern3:
 * 	WeaponInst3 value1=INT value2=INT FREE_FORM_COMMENT*;
 *
 **/

// WeaponInst3 value1=INT value2=INT FREE_FORM_COMMENT*
protected class WeaponPattern3_Group extends GroupToken {
	
	public WeaponPattern3_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWeaponPattern3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern3_Value2Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WeaponInst3
protected class WeaponPattern3_WeaponInst3ParserRuleCall_0 extends RuleCallToken {
	
	public WeaponPattern3_WeaponInst3ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponPattern3Access().getWeaponInst3ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponInst3_FlysprAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(WeaponInst3_FlysprAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value1=INT
protected class WeaponPattern3_Value1Assignment_1 extends AssignmentToken  {
	
	public WeaponPattern3_Value1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponPattern3Access().getValue1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern3_WeaponInst3ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWeaponPattern3Access().getValue1INTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWeaponPattern3Access().getValue1INTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// value2=INT
protected class WeaponPattern3_Value2Assignment_2 extends AssignmentToken  {
	
	public WeaponPattern3_Value2Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponPattern3Access().getValue2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern3_Value1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWeaponPattern3Access().getValue2INTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWeaponPattern3Access().getValue2INTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WeaponPattern3 ****************/


/************ begin Rule WeaponPattern4 ****************
 *
 * WeaponPattern4:
 * 	WeaponInst4 FREE_FORM_COMMENT*;
 *
 **/

// WeaponInst4 FREE_FORM_COMMENT*
protected class WeaponPattern4_Group extends GroupToken {
	
	public WeaponPattern4_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWeaponPattern4Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponPattern4_WeaponInst4ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WeaponInst4
protected class WeaponPattern4_WeaponInst4ParserRuleCall_0 extends RuleCallToken {
	
	public WeaponPattern4_WeaponInst4ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWeaponPattern4Access().getWeaponInst4ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponInst4_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(WeaponInst4_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WeaponPattern4 ****************/


/************ begin Rule WeaponInst1 ****************
 *
 * WeaponInst1:
 * 	name?="#name";
 *
 **/

// name?="#name"
protected class WeaponInst1_NameAssignment extends AssignmentToken  {
	
	public WeaponInst1_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst1Access().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst1Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst1Access().getNameNameKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule WeaponInst1 ****************/


/************ begin Rule WeaponInst2 ****************
 *
 * WeaponInst2:
 * 	dmg?="#dmg" | nratt?="#nratt" | att?="#att" | def?="#def" | len?="#len" | range?="#range" | ammo?="#ammo" |
 * 	rcost?="#rcost" | sound?="#sound" | aoe?="#aoe" | secondaryeffect?="#secondaryeffect" |
 * 	secondaryeffectalways?="#secondaryeffectalways" | explspr?="#explspr";
 *
 **/

// dmg?="#dmg" | nratt?="#nratt" | att?="#att" | def?="#def" | len?="#len" | range?="#range" | ammo?="#ammo" |
// rcost?="#rcost" | sound?="#sound" | aoe?="#aoe" | secondaryeffect?="#secondaryeffect" |
// secondaryeffectalways?="#secondaryeffectalways" | explspr?="#explspr"
protected class WeaponInst2_Alternatives extends AlternativesToken {

	public WeaponInst2_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponInst2_DmgAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WeaponInst2_NrattAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WeaponInst2_AttAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new WeaponInst2_DefAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new WeaponInst2_LenAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new WeaponInst2_RangeAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new WeaponInst2_AmmoAssignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new WeaponInst2_RcostAssignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new WeaponInst2_SoundAssignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new WeaponInst2_AoeAssignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new WeaponInst2_SecondaryeffectAssignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new WeaponInst2_SecondaryeffectalwaysAssignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new WeaponInst2_ExplsprAssignment_12(lastRuleCallOrigin, this, 12, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// dmg?="#dmg"
protected class WeaponInst2_DmgAssignment_0 extends AssignmentToken  {
	
	public WeaponInst2_DmgAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getDmgAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dmg",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dmg");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getDmgDmgKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// nratt?="#nratt"
protected class WeaponInst2_NrattAssignment_1 extends AssignmentToken  {
	
	public WeaponInst2_NrattAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getNrattAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nratt",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nratt");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getNrattNrattKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// att?="#att"
protected class WeaponInst2_AttAssignment_2 extends AssignmentToken  {
	
	public WeaponInst2_AttAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getAttAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("att",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("att");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getAttAttKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// def?="#def"
protected class WeaponInst2_DefAssignment_3 extends AssignmentToken  {
	
	public WeaponInst2_DefAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getDefAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("def",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("def");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getDefDefKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// len?="#len"
protected class WeaponInst2_LenAssignment_4 extends AssignmentToken  {
	
	public WeaponInst2_LenAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getLenAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("len",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("len");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getLenLenKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// range?="#range"
protected class WeaponInst2_RangeAssignment_5 extends AssignmentToken  {
	
	public WeaponInst2_RangeAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getRangeAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("range",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("range");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getRangeRangeKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// ammo?="#ammo"
protected class WeaponInst2_AmmoAssignment_6 extends AssignmentToken  {
	
	public WeaponInst2_AmmoAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getAmmoAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ammo",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ammo");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getAmmoAmmoKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// rcost?="#rcost"
protected class WeaponInst2_RcostAssignment_7 extends AssignmentToken  {
	
	public WeaponInst2_RcostAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getRcostAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getRcostRcostKeyword_7_0();
			return obj;
		}
		return null;
	}

}

// sound?="#sound"
protected class WeaponInst2_SoundAssignment_8 extends AssignmentToken  {
	
	public WeaponInst2_SoundAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getSoundAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sound",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sound");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getSoundSoundKeyword_8_0();
			return obj;
		}
		return null;
	}

}

// aoe?="#aoe"
protected class WeaponInst2_AoeAssignment_9 extends AssignmentToken  {
	
	public WeaponInst2_AoeAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getAoeAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("aoe",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("aoe");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getAoeAoeKeyword_9_0();
			return obj;
		}
		return null;
	}

}

// secondaryeffect?="#secondaryeffect"
protected class WeaponInst2_SecondaryeffectAssignment_10 extends AssignmentToken  {
	
	public WeaponInst2_SecondaryeffectAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getSecondaryeffectAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("secondaryeffect",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("secondaryeffect");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getSecondaryeffectSecondaryeffectKeyword_10_0();
			return obj;
		}
		return null;
	}

}

// secondaryeffectalways?="#secondaryeffectalways"
protected class WeaponInst2_SecondaryeffectalwaysAssignment_11 extends AssignmentToken  {
	
	public WeaponInst2_SecondaryeffectalwaysAssignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getSecondaryeffectalwaysAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("secondaryeffectalways",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("secondaryeffectalways");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getSecondaryeffectalwaysSecondaryeffectalwaysKeyword_11_0();
			return obj;
		}
		return null;
	}

}

// explspr?="#explspr"
protected class WeaponInst2_ExplsprAssignment_12 extends AssignmentToken  {
	
	public WeaponInst2_ExplsprAssignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst2Access().getExplsprAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("explspr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("explspr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst2Access().getExplsprExplsprKeyword_12_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WeaponInst2 ****************/


/************ begin Rule WeaponInst3 ****************
 *
 * WeaponInst3:
 * 	flyspr?="#flyspr";
 *
 **/

// flyspr?="#flyspr"
protected class WeaponInst3_FlysprAssignment extends AssignmentToken  {
	
	public WeaponInst3_FlysprAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst3Access().getFlysprAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst3Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("flyspr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("flyspr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst3Access().getFlysprFlysprKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule WeaponInst3 ****************/


/************ begin Rule WeaponInst4 ****************
 *
 * WeaponInst4:
 * 	twohanded?="#twohanded" | armorpiercing?="#armorpiercing" | armornegating?="#armornegating" | magic?="#magic" |
 * 	dt_normal?="#dt_normal" | dt_stun?="#dt_stun" | dt_paralyze?="#dt_paralyze" | dt_poison?="#dt_poison" |
 * 	dt_cap?="#dt_cap" | dt_demon?="#dt_demon" | dt_demononly?="#dt_demononly" | dt_holy?="#dt_holy" |
 * 	dt_magic?="#dt_magic" | dt_small?="#dt_small" | dt_large?="#dt_large" | dt_constructonly?="#dt_constructonly" |
 * 	dt_raise?="#dt_raise" | mind?="#mind" | cold?="#cold" | fire?="#fire" | shock?="#shock" | poison?="#poison" |
 * 	bonus?="#bonus" | charge?="#charge" | flail?="#flail" | nostr?="#nostr" | nostr?="#nostrength" |
 * 	mrnegates?="#mrnegates" | mrnegateseasily?="#mrnegateseasily";
 *
 **/

// twohanded?="#twohanded" | armorpiercing?="#armorpiercing" | armornegating?="#armornegating" | magic?="#magic" |
// dt_normal?="#dt_normal" | dt_stun?="#dt_stun" | dt_paralyze?="#dt_paralyze" | dt_poison?="#dt_poison" |
// dt_cap?="#dt_cap" | dt_demon?="#dt_demon" | dt_demononly?="#dt_demononly" | dt_holy?="#dt_holy" | dt_magic?="#dt_magic"
// | dt_small?="#dt_small" | dt_large?="#dt_large" | dt_constructonly?="#dt_constructonly" | dt_raise?="#dt_raise" |
// mind?="#mind" | cold?="#cold" | fire?="#fire" | shock?="#shock" | poison?="#poison" | bonus?="#bonus" |
// charge?="#charge" | flail?="#flail" | nostr?="#nostr" | nostr?="#nostrength" | mrnegates?="#mrnegates" |
// mrnegateseasily?="#mrnegateseasily"
protected class WeaponInst4_Alternatives extends AlternativesToken {

	public WeaponInst4_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WeaponInst4_TwohandedAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WeaponInst4_ArmorpiercingAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WeaponInst4_ArmornegatingAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new WeaponInst4_MagicAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new WeaponInst4_Dt_normalAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new WeaponInst4_Dt_stunAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new WeaponInst4_Dt_paralyzeAssignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new WeaponInst4_Dt_poisonAssignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new WeaponInst4_Dt_capAssignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new WeaponInst4_Dt_demonAssignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new WeaponInst4_Dt_demononlyAssignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new WeaponInst4_Dt_holyAssignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new WeaponInst4_Dt_magicAssignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new WeaponInst4_Dt_smallAssignment_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new WeaponInst4_Dt_largeAssignment_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new WeaponInst4_Dt_constructonlyAssignment_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new WeaponInst4_Dt_raiseAssignment_16(lastRuleCallOrigin, this, 16, inst);
			case 17: return new WeaponInst4_MindAssignment_17(lastRuleCallOrigin, this, 17, inst);
			case 18: return new WeaponInst4_ColdAssignment_18(lastRuleCallOrigin, this, 18, inst);
			case 19: return new WeaponInst4_FireAssignment_19(lastRuleCallOrigin, this, 19, inst);
			case 20: return new WeaponInst4_ShockAssignment_20(lastRuleCallOrigin, this, 20, inst);
			case 21: return new WeaponInst4_PoisonAssignment_21(lastRuleCallOrigin, this, 21, inst);
			case 22: return new WeaponInst4_BonusAssignment_22(lastRuleCallOrigin, this, 22, inst);
			case 23: return new WeaponInst4_ChargeAssignment_23(lastRuleCallOrigin, this, 23, inst);
			case 24: return new WeaponInst4_FlailAssignment_24(lastRuleCallOrigin, this, 24, inst);
			case 25: return new WeaponInst4_NostrAssignment_25(lastRuleCallOrigin, this, 25, inst);
			case 26: return new WeaponInst4_NostrAssignment_26(lastRuleCallOrigin, this, 26, inst);
			case 27: return new WeaponInst4_MrnegatesAssignment_27(lastRuleCallOrigin, this, 27, inst);
			case 28: return new WeaponInst4_MrnegateseasilyAssignment_28(lastRuleCallOrigin, this, 28, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWeaponInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// twohanded?="#twohanded"
protected class WeaponInst4_TwohandedAssignment_0 extends AssignmentToken  {
	
	public WeaponInst4_TwohandedAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getTwohandedAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("twohanded",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("twohanded");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getTwohandedTwohandedKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// armorpiercing?="#armorpiercing"
protected class WeaponInst4_ArmorpiercingAssignment_1 extends AssignmentToken  {
	
	public WeaponInst4_ArmorpiercingAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getArmorpiercingAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("armorpiercing",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("armorpiercing");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getArmorpiercingArmorpiercingKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// armornegating?="#armornegating"
protected class WeaponInst4_ArmornegatingAssignment_2 extends AssignmentToken  {
	
	public WeaponInst4_ArmornegatingAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getArmornegatingAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("armornegating",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("armornegating");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getArmornegatingArmornegatingKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// magic?="#magic"
protected class WeaponInst4_MagicAssignment_3 extends AssignmentToken  {
	
	public WeaponInst4_MagicAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getMagicAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("magic",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("magic");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getMagicMagicKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// dt_normal?="#dt_normal"
protected class WeaponInst4_Dt_normalAssignment_4 extends AssignmentToken  {
	
	public WeaponInst4_Dt_normalAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_normalAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_normal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_normal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_normalDt_normalKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// dt_stun?="#dt_stun"
protected class WeaponInst4_Dt_stunAssignment_5 extends AssignmentToken  {
	
	public WeaponInst4_Dt_stunAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_stunAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_stun",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_stun");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_stunDt_stunKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// dt_paralyze?="#dt_paralyze"
protected class WeaponInst4_Dt_paralyzeAssignment_6 extends AssignmentToken  {
	
	public WeaponInst4_Dt_paralyzeAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_paralyzeAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_paralyze",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_paralyze");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_paralyzeDt_paralyzeKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// dt_poison?="#dt_poison"
protected class WeaponInst4_Dt_poisonAssignment_7 extends AssignmentToken  {
	
	public WeaponInst4_Dt_poisonAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_poisonAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_poison",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_poison");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_poisonDt_poisonKeyword_7_0();
			return obj;
		}
		return null;
	}

}

// dt_cap?="#dt_cap"
protected class WeaponInst4_Dt_capAssignment_8 extends AssignmentToken  {
	
	public WeaponInst4_Dt_capAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_capAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_cap",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_cap");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_capDt_capKeyword_8_0();
			return obj;
		}
		return null;
	}

}

// dt_demon?="#dt_demon"
protected class WeaponInst4_Dt_demonAssignment_9 extends AssignmentToken  {
	
	public WeaponInst4_Dt_demonAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_demonAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_demon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_demon");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_demonDt_demonKeyword_9_0();
			return obj;
		}
		return null;
	}

}

// dt_demononly?="#dt_demononly"
protected class WeaponInst4_Dt_demononlyAssignment_10 extends AssignmentToken  {
	
	public WeaponInst4_Dt_demononlyAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_demononlyAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_demononly",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_demononly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_demononlyDt_demononlyKeyword_10_0();
			return obj;
		}
		return null;
	}

}

// dt_holy?="#dt_holy"
protected class WeaponInst4_Dt_holyAssignment_11 extends AssignmentToken  {
	
	public WeaponInst4_Dt_holyAssignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_holyAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_holy",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_holy");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_holyDt_holyKeyword_11_0();
			return obj;
		}
		return null;
	}

}

// dt_magic?="#dt_magic"
protected class WeaponInst4_Dt_magicAssignment_12 extends AssignmentToken  {
	
	public WeaponInst4_Dt_magicAssignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_magicAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_magic",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_magic");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_magicDt_magicKeyword_12_0();
			return obj;
		}
		return null;
	}

}

// dt_small?="#dt_small"
protected class WeaponInst4_Dt_smallAssignment_13 extends AssignmentToken  {
	
	public WeaponInst4_Dt_smallAssignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_smallAssignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_small",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_small");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_smallDt_smallKeyword_13_0();
			return obj;
		}
		return null;
	}

}

// dt_large?="#dt_large"
protected class WeaponInst4_Dt_largeAssignment_14 extends AssignmentToken  {
	
	public WeaponInst4_Dt_largeAssignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_largeAssignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_large",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_large");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_largeDt_largeKeyword_14_0();
			return obj;
		}
		return null;
	}

}

// dt_constructonly?="#dt_constructonly"
protected class WeaponInst4_Dt_constructonlyAssignment_15 extends AssignmentToken  {
	
	public WeaponInst4_Dt_constructonlyAssignment_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_constructonlyAssignment_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_constructonly",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_constructonly");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_constructonlyDt_constructonlyKeyword_15_0();
			return obj;
		}
		return null;
	}

}

// dt_raise?="#dt_raise"
protected class WeaponInst4_Dt_raiseAssignment_16 extends AssignmentToken  {
	
	public WeaponInst4_Dt_raiseAssignment_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getDt_raiseAssignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dt_raise",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dt_raise");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getDt_raiseDt_raiseKeyword_16_0();
			return obj;
		}
		return null;
	}

}

// mind?="#mind"
protected class WeaponInst4_MindAssignment_17 extends AssignmentToken  {
	
	public WeaponInst4_MindAssignment_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getMindAssignment_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mind",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mind");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getMindMindKeyword_17_0();
			return obj;
		}
		return null;
	}

}

// cold?="#cold"
protected class WeaponInst4_ColdAssignment_18 extends AssignmentToken  {
	
	public WeaponInst4_ColdAssignment_18(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getColdAssignment_18();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cold",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cold");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getColdColdKeyword_18_0();
			return obj;
		}
		return null;
	}

}

// fire?="#fire"
protected class WeaponInst4_FireAssignment_19 extends AssignmentToken  {
	
	public WeaponInst4_FireAssignment_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getFireAssignment_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fire",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fire");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getFireFireKeyword_19_0();
			return obj;
		}
		return null;
	}

}

// shock?="#shock"
protected class WeaponInst4_ShockAssignment_20 extends AssignmentToken  {
	
	public WeaponInst4_ShockAssignment_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getShockAssignment_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("shock",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("shock");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getShockShockKeyword_20_0();
			return obj;
		}
		return null;
	}

}

// poison?="#poison"
protected class WeaponInst4_PoisonAssignment_21 extends AssignmentToken  {
	
	public WeaponInst4_PoisonAssignment_21(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getPoisonAssignment_21();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("poison",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("poison");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getPoisonPoisonKeyword_21_0();
			return obj;
		}
		return null;
	}

}

// bonus?="#bonus"
protected class WeaponInst4_BonusAssignment_22 extends AssignmentToken  {
	
	public WeaponInst4_BonusAssignment_22(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getBonusAssignment_22();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bonus",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bonus");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getBonusBonusKeyword_22_0();
			return obj;
		}
		return null;
	}

}

// charge?="#charge"
protected class WeaponInst4_ChargeAssignment_23 extends AssignmentToken  {
	
	public WeaponInst4_ChargeAssignment_23(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getChargeAssignment_23();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("charge",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("charge");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getChargeChargeKeyword_23_0();
			return obj;
		}
		return null;
	}

}

// flail?="#flail"
protected class WeaponInst4_FlailAssignment_24 extends AssignmentToken  {
	
	public WeaponInst4_FlailAssignment_24(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getFlailAssignment_24();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("flail",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("flail");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getFlailFlailKeyword_24_0();
			return obj;
		}
		return null;
	}

}

// nostr?="#nostr"
protected class WeaponInst4_NostrAssignment_25 extends AssignmentToken  {
	
	public WeaponInst4_NostrAssignment_25(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getNostrAssignment_25();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nostr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nostr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getNostrNostrKeyword_25_0();
			return obj;
		}
		return null;
	}

}

// nostr?="#nostrength"
protected class WeaponInst4_NostrAssignment_26 extends AssignmentToken  {
	
	public WeaponInst4_NostrAssignment_26(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getNostrAssignment_26();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nostr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nostr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getNostrNostrengthKeyword_26_0();
			return obj;
		}
		return null;
	}

}

// mrnegates?="#mrnegates"
protected class WeaponInst4_MrnegatesAssignment_27 extends AssignmentToken  {
	
	public WeaponInst4_MrnegatesAssignment_27(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getMrnegatesAssignment_27();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mrnegates",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mrnegates");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getMrnegatesMrnegatesKeyword_27_0();
			return obj;
		}
		return null;
	}

}

// mrnegateseasily?="#mrnegateseasily"
protected class WeaponInst4_MrnegateseasilyAssignment_28 extends AssignmentToken  {
	
	public WeaponInst4_MrnegateseasilyAssignment_28(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWeaponInst4Access().getMrnegateseasilyAssignment_28();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mrnegateseasily",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mrnegateseasily");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWeaponInst4Access().getMrnegateseasilyMrnegateseasilyKeyword_28_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WeaponInst4 ****************/


/************ begin Rule Monster ****************
 *
 * / **************** / / * Monster Mods * / / **************** / Monster:
 * 	SelectMonsterById | SelectMonsterByName | NewMonster;
 *
 **/

// SelectMonsterById | SelectMonsterByName | NewMonster
protected class Monster_Alternatives extends AlternativesToken {

	public Monster_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMonsterAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Monster_SelectMonsterByIdParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Monster_SelectMonsterByNameParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Monster_NewMonsterParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewMonsterRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectMonsterByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectMonsterByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SelectMonsterById
protected class Monster_SelectMonsterByIdParserRuleCall_0 extends RuleCallToken {
	
	public Monster_SelectMonsterByIdParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterAccess().getSelectMonsterByIdParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectMonsterById_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectMonsterByIdRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectMonsterById_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SelectMonsterByName
protected class Monster_SelectMonsterByNameParserRuleCall_1 extends RuleCallToken {
	
	public Monster_SelectMonsterByNameParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterAccess().getSelectMonsterByNameParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectMonsterByName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectMonsterByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectMonsterByName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NewMonster
protected class Monster_NewMonsterParserRuleCall_2 extends RuleCallToken {
	
	public Monster_NewMonsterParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterAccess().getNewMonsterParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewMonster_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewMonsterRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NewMonster_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Monster ****************/


/************ begin Rule SelectMonsterById ****************
 *
 * SelectMonsterById:
 * 	"#selectmonster" value=INT FREE_FORM_COMMENT* mods+=MonsterMods* "#end";
 *
 **/

// "#selectmonster" value=INT FREE_FORM_COMMENT* mods+=MonsterMods* "#end"
protected class SelectMonsterById_Group extends GroupToken {
	
	public SelectMonsterById_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectMonsterByIdAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectMonsterById_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectMonsterByIdRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectmonster"
protected class SelectMonsterById_SelectmonsterKeyword_0 extends KeywordToken  {
	
	public SelectMonsterById_SelectmonsterKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectMonsterByIdAccess().getSelectmonsterKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class SelectMonsterById_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectMonsterById_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectMonsterByIdAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectMonsterById_SelectmonsterKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectMonsterByIdAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectMonsterByIdAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=MonsterMods*
protected class SelectMonsterById_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectMonsterById_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectMonsterByIdAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMonsterModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectMonsterByIdAccess().getModsMonsterModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectMonsterById_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectMonsterById_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectMonsterById_EndKeyword_4 extends KeywordToken  {
	
	public SelectMonsterById_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectMonsterByIdAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectMonsterById_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectMonsterById_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectMonsterById ****************/


/************ begin Rule SelectMonsterByName ****************
 *
 * SelectMonsterByName:
 * 	"#selectmonster" value=STRING FREE_FORM_COMMENT* mods+=MonsterMods* "#end";
 *
 **/

// "#selectmonster" value=STRING FREE_FORM_COMMENT* mods+=MonsterMods* "#end"
protected class SelectMonsterByName_Group extends GroupToken {
	
	public SelectMonsterByName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectMonsterByNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectMonsterByName_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectMonsterByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectmonster"
protected class SelectMonsterByName_SelectmonsterKeyword_0 extends KeywordToken  {
	
	public SelectMonsterByName_SelectmonsterKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectMonsterByNameAccess().getSelectmonsterKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=STRING
protected class SelectMonsterByName_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectMonsterByName_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectMonsterByNameAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectMonsterByName_SelectmonsterKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectMonsterByNameAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectMonsterByNameAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=MonsterMods*
protected class SelectMonsterByName_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectMonsterByName_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectMonsterByNameAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMonsterModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectMonsterByNameAccess().getModsMonsterModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectMonsterByName_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectMonsterByName_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectMonsterByName_EndKeyword_4 extends KeywordToken  {
	
	public SelectMonsterByName_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectMonsterByNameAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectMonsterByName_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectMonsterByName_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectMonsterByName ****************/


/************ begin Rule NewMonster ****************
 *
 * NewMonster:
 * 	"#newmonster" value=INT FREE_FORM_COMMENT* mods+=MonsterMods* "#end";
 *
 **/

// "#newmonster" value=INT FREE_FORM_COMMENT* mods+=MonsterMods* "#end"
protected class NewMonster_Group extends GroupToken {
	
	public NewMonster_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNewMonsterAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewMonster_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewMonsterRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#newmonster"
protected class NewMonster_NewmonsterKeyword_0 extends KeywordToken  {
	
	public NewMonster_NewmonsterKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewMonsterAccess().getNewmonsterKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class NewMonster_ValueAssignment_1 extends AssignmentToken  {
	
	public NewMonster_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewMonsterAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewMonster_NewmonsterKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNewMonsterAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNewMonsterAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=MonsterMods*
protected class NewMonster_ModsAssignment_3 extends AssignmentToken  {
	
	public NewMonster_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewMonsterAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMonsterModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNewMonsterAccess().getModsMonsterModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NewMonster_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NewMonster_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class NewMonster_EndKeyword_4 extends KeywordToken  {
	
	public NewMonster_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewMonsterAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewMonster_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NewMonster_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NewMonster ****************/


/************ begin Rule MonsterMods ****************
 *
 * MonsterMods:
 * 	MonsterPattern1 | MonsterPattern2 | MonsterPattern3 | MonsterPattern4 | MonsterPattern5 | MonsterPattern6;
 *
 **/

// MonsterPattern1 | MonsterPattern2 | MonsterPattern3 | MonsterPattern4 | MonsterPattern5 | MonsterPattern6
protected class MonsterMods_Alternatives extends AlternativesToken {

	public MonsterMods_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMonsterModsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterMods_MonsterPattern1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MonsterMods_MonsterPattern2ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MonsterMods_MonsterPattern3ParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new MonsterMods_MonsterPattern4ParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new MonsterMods_MonsterPattern5ParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new MonsterMods_MonsterPattern6ParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst1Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMonsterInst2Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMonsterInst3Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMonsterInst4Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMonsterInst5Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMonsterInst6Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MonsterPattern1
protected class MonsterMods_MonsterPattern1ParserRuleCall_0 extends RuleCallToken {
	
	public MonsterMods_MonsterPattern1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterModsAccess().getMonsterPattern1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst1Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(MonsterPattern1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MonsterPattern2
protected class MonsterMods_MonsterPattern2ParserRuleCall_1 extends RuleCallToken {
	
	public MonsterMods_MonsterPattern2ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterModsAccess().getMonsterPattern2ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst2Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(MonsterPattern2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MonsterPattern3
protected class MonsterMods_MonsterPattern3ParserRuleCall_2 extends RuleCallToken {
	
	public MonsterMods_MonsterPattern3ParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterModsAccess().getMonsterPattern3ParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst3Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(MonsterPattern3_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MonsterPattern4
protected class MonsterMods_MonsterPattern4ParserRuleCall_3 extends RuleCallToken {
	
	public MonsterMods_MonsterPattern4ParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterModsAccess().getMonsterPattern4ParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst4Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(MonsterPattern4_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MonsterPattern5
protected class MonsterMods_MonsterPattern5ParserRuleCall_4 extends RuleCallToken {
	
	public MonsterMods_MonsterPattern5ParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterModsAccess().getMonsterPattern5ParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern5_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst5Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(MonsterPattern5_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MonsterPattern6
protected class MonsterMods_MonsterPattern6ParserRuleCall_5 extends RuleCallToken {
	
	public MonsterMods_MonsterPattern6ParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterModsAccess().getMonsterPattern6ParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern6_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst6Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(MonsterPattern6_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule MonsterMods ****************/


/************ begin Rule MonsterPattern1 ****************
 *
 * MonsterPattern1:
 * 	MonsterInst1 value=STRING FREE_FORM_COMMENT*;
 *
 **/

// MonsterInst1 value=STRING FREE_FORM_COMMENT*
protected class MonsterPattern1_Group extends GroupToken {
	
	public MonsterPattern1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMonsterPattern1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern1_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MonsterInst1
protected class MonsterPattern1_MonsterInst1ParserRuleCall_0 extends RuleCallToken {
	
	public MonsterPattern1_MonsterInst1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterPattern1Access().getMonsterInst1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst1_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(MonsterInst1_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=STRING
protected class MonsterPattern1_ValueAssignment_1 extends AssignmentToken  {
	
	public MonsterPattern1_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterPattern1Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern1_MonsterInst1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMonsterPattern1Access().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMonsterPattern1Access().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterPattern1 ****************/


/************ begin Rule MonsterPattern2 ****************
 *
 * MonsterPattern2:
 * 	MonsterInst2 value=INT FREE_FORM_COMMENT*;
 *
 **/

// MonsterInst2 value=INT FREE_FORM_COMMENT*
protected class MonsterPattern2_Group extends GroupToken {
	
	public MonsterPattern2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMonsterPattern2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern2_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MonsterInst2
protected class MonsterPattern2_MonsterInst2ParserRuleCall_0 extends RuleCallToken {
	
	public MonsterPattern2_MonsterInst2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterPattern2Access().getMonsterInst2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(MonsterInst2_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=INT
protected class MonsterPattern2_ValueAssignment_1 extends AssignmentToken  {
	
	public MonsterPattern2_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterPattern2Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern2_MonsterInst2ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMonsterPattern2Access().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMonsterPattern2Access().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterPattern2 ****************/


/************ begin Rule MonsterPattern3 ****************
 *
 * MonsterPattern3:
 * 	MonsterInst3 value1=INT value2=INT FREE_FORM_COMMENT*;
 *
 **/

// MonsterInst3 value1=INT value2=INT FREE_FORM_COMMENT*
protected class MonsterPattern3_Group extends GroupToken {
	
	public MonsterPattern3_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMonsterPattern3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern3_Value2Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MonsterInst3
protected class MonsterPattern3_MonsterInst3ParserRuleCall_0 extends RuleCallToken {
	
	public MonsterPattern3_MonsterInst3ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterPattern3Access().getMonsterInst3ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst3_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(MonsterInst3_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value1=INT
protected class MonsterPattern3_Value1Assignment_1 extends AssignmentToken  {
	
	public MonsterPattern3_Value1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterPattern3Access().getValue1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern3_MonsterInst3ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMonsterPattern3Access().getValue1INTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMonsterPattern3Access().getValue1INTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// value2=INT
protected class MonsterPattern3_Value2Assignment_2 extends AssignmentToken  {
	
	public MonsterPattern3_Value2Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterPattern3Access().getValue2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern3_Value1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMonsterPattern3Access().getValue2INTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMonsterPattern3Access().getValue2INTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterPattern3 ****************/


/************ begin Rule MonsterPattern4 ****************
 *
 * MonsterPattern4:
 * 	MonsterInst4 FREE_FORM_COMMENT*;
 *
 **/

// MonsterInst4 FREE_FORM_COMMENT*
protected class MonsterPattern4_Group extends GroupToken {
	
	public MonsterPattern4_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMonsterPattern4Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern4_MonsterInst4ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MonsterInst4
protected class MonsterPattern4_MonsterInst4ParserRuleCall_0 extends RuleCallToken {
	
	public MonsterPattern4_MonsterInst4ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterPattern4Access().getMonsterInst4ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst4_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(MonsterInst4_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule MonsterPattern4 ****************/


/************ begin Rule MonsterPattern5 ****************
 *
 * MonsterPattern5:
 * 	MonsterInst5 (value1=STRING | value2=INT) FREE_FORM_COMMENT*;
 *
 **/

// MonsterInst5 (value1=STRING | value2=INT) FREE_FORM_COMMENT*
protected class MonsterPattern5_Group extends GroupToken {
	
	public MonsterPattern5_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMonsterPattern5Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern5_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst5Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MonsterInst5
protected class MonsterPattern5_MonsterInst5ParserRuleCall_0 extends RuleCallToken {
	
	public MonsterPattern5_MonsterInst5ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterPattern5Access().getMonsterInst5ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst5_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(MonsterInst5_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value1=STRING | value2=INT
protected class MonsterPattern5_Alternatives_1 extends AlternativesToken {

	public MonsterPattern5_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMonsterPattern5Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern5_Value1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MonsterPattern5_Value2Assignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// value1=STRING
protected class MonsterPattern5_Value1Assignment_1_0 extends AssignmentToken  {
	
	public MonsterPattern5_Value1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterPattern5Access().getValue1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern5_MonsterInst5ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMonsterPattern5Access().getValue1STRINGTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMonsterPattern5Access().getValue1STRINGTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// value2=INT
protected class MonsterPattern5_Value2Assignment_1_1 extends AssignmentToken  {
	
	public MonsterPattern5_Value2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterPattern5Access().getValue2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern5_MonsterInst5ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMonsterPattern5Access().getValue2INTTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMonsterPattern5Access().getValue2INTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule MonsterPattern5 ****************/


/************ begin Rule MonsterPattern6 ****************
 *
 * MonsterPattern6:
 * 	MonsterInst6 value=INT? FREE_FORM_COMMENT*;
 *
 **/

// MonsterInst6 value=INT? FREE_FORM_COMMENT*
protected class MonsterPattern6_Group extends GroupToken {
	
	public MonsterPattern6_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMonsterPattern6Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern6_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MonsterPattern6_MonsterInst6ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst6Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// MonsterInst6
protected class MonsterPattern6_MonsterInst6ParserRuleCall_0 extends RuleCallToken {
	
	public MonsterPattern6_MonsterInst6ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMonsterPattern6Access().getMonsterInst6ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst6_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(MonsterInst6_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=INT?
protected class MonsterPattern6_ValueAssignment_1 extends AssignmentToken  {
	
	public MonsterPattern6_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterPattern6Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterPattern6_MonsterInst6ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMonsterPattern6Access().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMonsterPattern6Access().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterPattern6 ****************/


/************ begin Rule MonsterInst1 ****************
 *
 * MonsterInst1:
 * 	name?="#name" | spr1?="#spr1" | spr2?="#spr2" | descr?="#descr";
 *
 **/

// name?="#name" | spr1?="#spr1" | spr2?="#spr2" | descr?="#descr"
protected class MonsterInst1_Alternatives extends AlternativesToken {

	public MonsterInst1_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMonsterInst1Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst1_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MonsterInst1_Spr1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MonsterInst1_Spr2Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new MonsterInst1_DescrAssignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name?="#name"
protected class MonsterInst1_NameAssignment_0 extends AssignmentToken  {
	
	public MonsterInst1_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst1Access().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst1Access().getNameNameKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// spr1?="#spr1"
protected class MonsterInst1_Spr1Assignment_1 extends AssignmentToken  {
	
	public MonsterInst1_Spr1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst1Access().getSpr1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("spr1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("spr1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst1Access().getSpr1Spr1Keyword_1_0();
			return obj;
		}
		return null;
	}

}

// spr2?="#spr2"
protected class MonsterInst1_Spr2Assignment_2 extends AssignmentToken  {
	
	public MonsterInst1_Spr2Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst1Access().getSpr2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("spr2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("spr2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst1Access().getSpr2Spr2Keyword_2_0();
			return obj;
		}
		return null;
	}

}

// descr?="#descr"
protected class MonsterInst1_DescrAssignment_3 extends AssignmentToken  {
	
	public MonsterInst1_DescrAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst1Access().getDescrAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("descr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("descr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst1Access().getDescrDescrKeyword_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterInst1 ****************/


/************ begin Rule MonsterInst2 ****************
 *
 * MonsterInst2:
 * 	speciallook?="#speciallook" | ap?="#ap" | mapmove?="#mapmove" | hp?="#hp" | prot?="#prot" | size?="#size" |
 * 	ressize?="#ressize" | str?="#str" | enc?="#enc" | att?="#att" | def?="#def" | prec?="#prec" | mr?="#mr" | mor?="#mor"
 * 	| gcost?="#gcost" | rcost?="#rcost" | pathcost?="#pathcost" | startdom?="#startdom" | eyes?="#eyes" |
 * 	copystats?="#copystats" | copyspr?="#copyspr" | restrictedgod?="#restrictedgod" | shatteredsoul?="#shatteredsoul" |
 * 	coldres?="#coldres" | coldres?="#coldresist" | fireres?="#fireres" | fireres?="#fireresist" | poisonres?="#poisonres"
 * 	| shockres?="#shockres" | darkvision?="#darkvision" | seduce?="#seduce" | succubus?="#succubus" | beckon?="#beckon" |
 * 	startage?="#startage" | maxage?="#maxage" | older?="#older" | healer?="#healer" | startaff?="#startaff" |
 * 	supplybonus?="#supplybonus" | uwdamage?="#uwdamage" | homesick?="#homesick" | coldpower?="#coldpower" |
 * 	firepower?="#firepower" | stormpower?="#stormpower" | darkpower?="#darkpower" | springpower?="#springpower" |
 * 	summerpower?="#summerpower" | fallpower?="#fallpower" | winterpower?="#winterpower" | ambidextrous?="#ambidextrous" |
 * 	banefireshield?="#banefireshield" | berserk?="#berserk" | standard?="#standard" | animalawe?="#animalawe" |
 * 	awe?="#awe" | fear?="#fear" | regeneration?="#regeneration" | reinvigoration?="#reinvigoration" |
 * 	fireshield?="#fireshield" | iceprot?="#iceprot" | poisoncloud?="#poisoncloud" | diseasecloud?="#diseasecloud" |
 * 	bloodvengeance?="#bloodvengeance" | castledef?="#castledef" | siegebonus?="#siegebonus" | patrolbonus?="#patrolbonus"
 * 	| pillagebonus?="#pillagebonus" | researchbonus?="#researchbonus" | forgebonus?="#forgebonus" | douse?="#douse" |
 * 	nobadevents?="#nobadevents" | incunrest?="#incunrest" | spreaddom?="#spreaddom" | leper?="#leper" |
 * 	popkill?="#popkill" | heretic?="#heretic" | itemslots?="#itemslots" | nametype?="#nametype";
 *
 **/

// speciallook?="#speciallook" | ap?="#ap" | mapmove?="#mapmove" | hp?="#hp" | prot?="#prot" | size?="#size" |
// ressize?="#ressize" | str?="#str" | enc?="#enc" | att?="#att" | def?="#def" | prec?="#prec" | mr?="#mr" | mor?="#mor" |
// gcost?="#gcost" | rcost?="#rcost" | pathcost?="#pathcost" | startdom?="#startdom" | eyes?="#eyes" |
// copystats?="#copystats" | copyspr?="#copyspr" | restrictedgod?="#restrictedgod" | shatteredsoul?="#shatteredsoul" |
// coldres?="#coldres" | coldres?="#coldresist" | fireres?="#fireres" | fireres?="#fireresist" | poisonres?="#poisonres" |
// shockres?="#shockres" | darkvision?="#darkvision" | seduce?="#seduce" | succubus?="#succubus" | beckon?="#beckon" |
// startage?="#startage" | maxage?="#maxage" | older?="#older" | healer?="#healer" | startaff?="#startaff" |
// supplybonus?="#supplybonus" | uwdamage?="#uwdamage" | homesick?="#homesick" | coldpower?="#coldpower" |
// firepower?="#firepower" | stormpower?="#stormpower" | darkpower?="#darkpower" | springpower?="#springpower" |
// summerpower?="#summerpower" | fallpower?="#fallpower" | winterpower?="#winterpower" | ambidextrous?="#ambidextrous" |
// banefireshield?="#banefireshield" | berserk?="#berserk" | standard?="#standard" | animalawe?="#animalawe" | awe?="#awe"
// | fear?="#fear" | regeneration?="#regeneration" | reinvigoration?="#reinvigoration" | fireshield?="#fireshield" |
// iceprot?="#iceprot" | poisoncloud?="#poisoncloud" | diseasecloud?="#diseasecloud" | bloodvengeance?="#bloodvengeance" |
// castledef?="#castledef" | siegebonus?="#siegebonus" | patrolbonus?="#patrolbonus" | pillagebonus?="#pillagebonus" |
// researchbonus?="#researchbonus" | forgebonus?="#forgebonus" | douse?="#douse" | nobadevents?="#nobadevents" |
// incunrest?="#incunrest" | spreaddom?="#spreaddom" | leper?="#leper" | popkill?="#popkill" | heretic?="#heretic" |
// itemslots?="#itemslots" | nametype?="#nametype"
protected class MonsterInst2_Alternatives extends AlternativesToken {

	public MonsterInst2_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst2_SpeciallookAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MonsterInst2_ApAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MonsterInst2_MapmoveAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new MonsterInst2_HpAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new MonsterInst2_ProtAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new MonsterInst2_SizeAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new MonsterInst2_RessizeAssignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new MonsterInst2_StrAssignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new MonsterInst2_EncAssignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new MonsterInst2_AttAssignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new MonsterInst2_DefAssignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new MonsterInst2_PrecAssignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new MonsterInst2_MrAssignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new MonsterInst2_MorAssignment_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new MonsterInst2_GcostAssignment_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new MonsterInst2_RcostAssignment_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new MonsterInst2_PathcostAssignment_16(lastRuleCallOrigin, this, 16, inst);
			case 17: return new MonsterInst2_StartdomAssignment_17(lastRuleCallOrigin, this, 17, inst);
			case 18: return new MonsterInst2_EyesAssignment_18(lastRuleCallOrigin, this, 18, inst);
			case 19: return new MonsterInst2_CopystatsAssignment_19(lastRuleCallOrigin, this, 19, inst);
			case 20: return new MonsterInst2_CopysprAssignment_20(lastRuleCallOrigin, this, 20, inst);
			case 21: return new MonsterInst2_RestrictedgodAssignment_21(lastRuleCallOrigin, this, 21, inst);
			case 22: return new MonsterInst2_ShatteredsoulAssignment_22(lastRuleCallOrigin, this, 22, inst);
			case 23: return new MonsterInst2_ColdresAssignment_23(lastRuleCallOrigin, this, 23, inst);
			case 24: return new MonsterInst2_ColdresAssignment_24(lastRuleCallOrigin, this, 24, inst);
			case 25: return new MonsterInst2_FireresAssignment_25(lastRuleCallOrigin, this, 25, inst);
			case 26: return new MonsterInst2_FireresAssignment_26(lastRuleCallOrigin, this, 26, inst);
			case 27: return new MonsterInst2_PoisonresAssignment_27(lastRuleCallOrigin, this, 27, inst);
			case 28: return new MonsterInst2_ShockresAssignment_28(lastRuleCallOrigin, this, 28, inst);
			case 29: return new MonsterInst2_DarkvisionAssignment_29(lastRuleCallOrigin, this, 29, inst);
			case 30: return new MonsterInst2_SeduceAssignment_30(lastRuleCallOrigin, this, 30, inst);
			case 31: return new MonsterInst2_SuccubusAssignment_31(lastRuleCallOrigin, this, 31, inst);
			case 32: return new MonsterInst2_BeckonAssignment_32(lastRuleCallOrigin, this, 32, inst);
			case 33: return new MonsterInst2_StartageAssignment_33(lastRuleCallOrigin, this, 33, inst);
			case 34: return new MonsterInst2_MaxageAssignment_34(lastRuleCallOrigin, this, 34, inst);
			case 35: return new MonsterInst2_OlderAssignment_35(lastRuleCallOrigin, this, 35, inst);
			case 36: return new MonsterInst2_HealerAssignment_36(lastRuleCallOrigin, this, 36, inst);
			case 37: return new MonsterInst2_StartaffAssignment_37(lastRuleCallOrigin, this, 37, inst);
			case 38: return new MonsterInst2_SupplybonusAssignment_38(lastRuleCallOrigin, this, 38, inst);
			case 39: return new MonsterInst2_UwdamageAssignment_39(lastRuleCallOrigin, this, 39, inst);
			case 40: return new MonsterInst2_HomesickAssignment_40(lastRuleCallOrigin, this, 40, inst);
			case 41: return new MonsterInst2_ColdpowerAssignment_41(lastRuleCallOrigin, this, 41, inst);
			case 42: return new MonsterInst2_FirepowerAssignment_42(lastRuleCallOrigin, this, 42, inst);
			case 43: return new MonsterInst2_StormpowerAssignment_43(lastRuleCallOrigin, this, 43, inst);
			case 44: return new MonsterInst2_DarkpowerAssignment_44(lastRuleCallOrigin, this, 44, inst);
			case 45: return new MonsterInst2_SpringpowerAssignment_45(lastRuleCallOrigin, this, 45, inst);
			case 46: return new MonsterInst2_SummerpowerAssignment_46(lastRuleCallOrigin, this, 46, inst);
			case 47: return new MonsterInst2_FallpowerAssignment_47(lastRuleCallOrigin, this, 47, inst);
			case 48: return new MonsterInst2_WinterpowerAssignment_48(lastRuleCallOrigin, this, 48, inst);
			case 49: return new MonsterInst2_AmbidextrousAssignment_49(lastRuleCallOrigin, this, 49, inst);
			case 50: return new MonsterInst2_BanefireshieldAssignment_50(lastRuleCallOrigin, this, 50, inst);
			case 51: return new MonsterInst2_BerserkAssignment_51(lastRuleCallOrigin, this, 51, inst);
			case 52: return new MonsterInst2_StandardAssignment_52(lastRuleCallOrigin, this, 52, inst);
			case 53: return new MonsterInst2_AnimalaweAssignment_53(lastRuleCallOrigin, this, 53, inst);
			case 54: return new MonsterInst2_AweAssignment_54(lastRuleCallOrigin, this, 54, inst);
			case 55: return new MonsterInst2_FearAssignment_55(lastRuleCallOrigin, this, 55, inst);
			case 56: return new MonsterInst2_RegenerationAssignment_56(lastRuleCallOrigin, this, 56, inst);
			case 57: return new MonsterInst2_ReinvigorationAssignment_57(lastRuleCallOrigin, this, 57, inst);
			case 58: return new MonsterInst2_FireshieldAssignment_58(lastRuleCallOrigin, this, 58, inst);
			case 59: return new MonsterInst2_IceprotAssignment_59(lastRuleCallOrigin, this, 59, inst);
			case 60: return new MonsterInst2_PoisoncloudAssignment_60(lastRuleCallOrigin, this, 60, inst);
			case 61: return new MonsterInst2_DiseasecloudAssignment_61(lastRuleCallOrigin, this, 61, inst);
			case 62: return new MonsterInst2_BloodvengeanceAssignment_62(lastRuleCallOrigin, this, 62, inst);
			case 63: return new MonsterInst2_CastledefAssignment_63(lastRuleCallOrigin, this, 63, inst);
			case 64: return new MonsterInst2_SiegebonusAssignment_64(lastRuleCallOrigin, this, 64, inst);
			case 65: return new MonsterInst2_PatrolbonusAssignment_65(lastRuleCallOrigin, this, 65, inst);
			case 66: return new MonsterInst2_PillagebonusAssignment_66(lastRuleCallOrigin, this, 66, inst);
			case 67: return new MonsterInst2_ResearchbonusAssignment_67(lastRuleCallOrigin, this, 67, inst);
			case 68: return new MonsterInst2_ForgebonusAssignment_68(lastRuleCallOrigin, this, 68, inst);
			case 69: return new MonsterInst2_DouseAssignment_69(lastRuleCallOrigin, this, 69, inst);
			case 70: return new MonsterInst2_NobadeventsAssignment_70(lastRuleCallOrigin, this, 70, inst);
			case 71: return new MonsterInst2_IncunrestAssignment_71(lastRuleCallOrigin, this, 71, inst);
			case 72: return new MonsterInst2_SpreaddomAssignment_72(lastRuleCallOrigin, this, 72, inst);
			case 73: return new MonsterInst2_LeperAssignment_73(lastRuleCallOrigin, this, 73, inst);
			case 74: return new MonsterInst2_PopkillAssignment_74(lastRuleCallOrigin, this, 74, inst);
			case 75: return new MonsterInst2_HereticAssignment_75(lastRuleCallOrigin, this, 75, inst);
			case 76: return new MonsterInst2_ItemslotsAssignment_76(lastRuleCallOrigin, this, 76, inst);
			case 77: return new MonsterInst2_NametypeAssignment_77(lastRuleCallOrigin, this, 77, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// speciallook?="#speciallook"
protected class MonsterInst2_SpeciallookAssignment_0 extends AssignmentToken  {
	
	public MonsterInst2_SpeciallookAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getSpeciallookAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("speciallook",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("speciallook");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getSpeciallookSpeciallookKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// ap?="#ap"
protected class MonsterInst2_ApAssignment_1 extends AssignmentToken  {
	
	public MonsterInst2_ApAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getApAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ap",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ap");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getApApKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// mapmove?="#mapmove"
protected class MonsterInst2_MapmoveAssignment_2 extends AssignmentToken  {
	
	public MonsterInst2_MapmoveAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getMapmoveAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mapmove",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mapmove");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getMapmoveMapmoveKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// hp?="#hp"
protected class MonsterInst2_HpAssignment_3 extends AssignmentToken  {
	
	public MonsterInst2_HpAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getHpAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hp",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hp");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getHpHpKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// prot?="#prot"
protected class MonsterInst2_ProtAssignment_4 extends AssignmentToken  {
	
	public MonsterInst2_ProtAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getProtAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("prot",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("prot");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getProtProtKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// size?="#size"
protected class MonsterInst2_SizeAssignment_5 extends AssignmentToken  {
	
	public MonsterInst2_SizeAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getSizeAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("size",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("size");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getSizeSizeKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// ressize?="#ressize"
protected class MonsterInst2_RessizeAssignment_6 extends AssignmentToken  {
	
	public MonsterInst2_RessizeAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getRessizeAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ressize",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ressize");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getRessizeRessizeKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// str?="#str"
protected class MonsterInst2_StrAssignment_7 extends AssignmentToken  {
	
	public MonsterInst2_StrAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getStrAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("str",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("str");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getStrStrKeyword_7_0();
			return obj;
		}
		return null;
	}

}

// enc?="#enc"
protected class MonsterInst2_EncAssignment_8 extends AssignmentToken  {
	
	public MonsterInst2_EncAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getEncAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("enc",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("enc");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getEncEncKeyword_8_0();
			return obj;
		}
		return null;
	}

}

// att?="#att"
protected class MonsterInst2_AttAssignment_9 extends AssignmentToken  {
	
	public MonsterInst2_AttAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getAttAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("att",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("att");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getAttAttKeyword_9_0();
			return obj;
		}
		return null;
	}

}

// def?="#def"
protected class MonsterInst2_DefAssignment_10 extends AssignmentToken  {
	
	public MonsterInst2_DefAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getDefAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("def",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("def");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getDefDefKeyword_10_0();
			return obj;
		}
		return null;
	}

}

// prec?="#prec"
protected class MonsterInst2_PrecAssignment_11 extends AssignmentToken  {
	
	public MonsterInst2_PrecAssignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getPrecAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("prec",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("prec");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getPrecPrecKeyword_11_0();
			return obj;
		}
		return null;
	}

}

// mr?="#mr"
protected class MonsterInst2_MrAssignment_12 extends AssignmentToken  {
	
	public MonsterInst2_MrAssignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getMrAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getMrMrKeyword_12_0();
			return obj;
		}
		return null;
	}

}

// mor?="#mor"
protected class MonsterInst2_MorAssignment_13 extends AssignmentToken  {
	
	public MonsterInst2_MorAssignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getMorAssignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mor",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mor");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getMorMorKeyword_13_0();
			return obj;
		}
		return null;
	}

}

// gcost?="#gcost"
protected class MonsterInst2_GcostAssignment_14 extends AssignmentToken  {
	
	public MonsterInst2_GcostAssignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getGcostAssignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("gcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("gcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getGcostGcostKeyword_14_0();
			return obj;
		}
		return null;
	}

}

// rcost?="#rcost"
protected class MonsterInst2_RcostAssignment_15 extends AssignmentToken  {
	
	public MonsterInst2_RcostAssignment_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getRcostAssignment_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getRcostRcostKeyword_15_0();
			return obj;
		}
		return null;
	}

}

// pathcost?="#pathcost"
protected class MonsterInst2_PathcostAssignment_16 extends AssignmentToken  {
	
	public MonsterInst2_PathcostAssignment_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getPathcostAssignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("pathcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("pathcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getPathcostPathcostKeyword_16_0();
			return obj;
		}
		return null;
	}

}

// startdom?="#startdom"
protected class MonsterInst2_StartdomAssignment_17 extends AssignmentToken  {
	
	public MonsterInst2_StartdomAssignment_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getStartdomAssignment_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startdom",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startdom");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getStartdomStartdomKeyword_17_0();
			return obj;
		}
		return null;
	}

}

// eyes?="#eyes"
protected class MonsterInst2_EyesAssignment_18 extends AssignmentToken  {
	
	public MonsterInst2_EyesAssignment_18(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getEyesAssignment_18();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eyes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eyes");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getEyesEyesKeyword_18_0();
			return obj;
		}
		return null;
	}

}

// copystats?="#copystats"
protected class MonsterInst2_CopystatsAssignment_19 extends AssignmentToken  {
	
	public MonsterInst2_CopystatsAssignment_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getCopystatsAssignment_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("copystats",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("copystats");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getCopystatsCopystatsKeyword_19_0();
			return obj;
		}
		return null;
	}

}

// copyspr?="#copyspr"
protected class MonsterInst2_CopysprAssignment_20 extends AssignmentToken  {
	
	public MonsterInst2_CopysprAssignment_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getCopysprAssignment_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("copyspr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("copyspr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getCopysprCopysprKeyword_20_0();
			return obj;
		}
		return null;
	}

}

// restrictedgod?="#restrictedgod"
protected class MonsterInst2_RestrictedgodAssignment_21 extends AssignmentToken  {
	
	public MonsterInst2_RestrictedgodAssignment_21(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getRestrictedgodAssignment_21();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("restrictedgod",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("restrictedgod");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getRestrictedgodRestrictedgodKeyword_21_0();
			return obj;
		}
		return null;
	}

}

// shatteredsoul?="#shatteredsoul"
protected class MonsterInst2_ShatteredsoulAssignment_22 extends AssignmentToken  {
	
	public MonsterInst2_ShatteredsoulAssignment_22(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getShatteredsoulAssignment_22();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("shatteredsoul",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("shatteredsoul");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getShatteredsoulShatteredsoulKeyword_22_0();
			return obj;
		}
		return null;
	}

}

// coldres?="#coldres"
protected class MonsterInst2_ColdresAssignment_23 extends AssignmentToken  {
	
	public MonsterInst2_ColdresAssignment_23(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getColdresAssignment_23();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("coldres",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("coldres");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getColdresColdresKeyword_23_0();
			return obj;
		}
		return null;
	}

}

// coldres?="#coldresist"
protected class MonsterInst2_ColdresAssignment_24 extends AssignmentToken  {
	
	public MonsterInst2_ColdresAssignment_24(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getColdresAssignment_24();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("coldres",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("coldres");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getColdresColdresistKeyword_24_0();
			return obj;
		}
		return null;
	}

}

// fireres?="#fireres"
protected class MonsterInst2_FireresAssignment_25 extends AssignmentToken  {
	
	public MonsterInst2_FireresAssignment_25(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getFireresAssignment_25();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fireres",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fireres");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getFireresFireresKeyword_25_0();
			return obj;
		}
		return null;
	}

}

// fireres?="#fireresist"
protected class MonsterInst2_FireresAssignment_26 extends AssignmentToken  {
	
	public MonsterInst2_FireresAssignment_26(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getFireresAssignment_26();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fireres",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fireres");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getFireresFireresistKeyword_26_0();
			return obj;
		}
		return null;
	}

}

// poisonres?="#poisonres"
protected class MonsterInst2_PoisonresAssignment_27 extends AssignmentToken  {
	
	public MonsterInst2_PoisonresAssignment_27(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getPoisonresAssignment_27();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("poisonres",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("poisonres");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getPoisonresPoisonresKeyword_27_0();
			return obj;
		}
		return null;
	}

}

// shockres?="#shockres"
protected class MonsterInst2_ShockresAssignment_28 extends AssignmentToken  {
	
	public MonsterInst2_ShockresAssignment_28(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getShockresAssignment_28();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("shockres",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("shockres");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getShockresShockresKeyword_28_0();
			return obj;
		}
		return null;
	}

}

// darkvision?="#darkvision"
protected class MonsterInst2_DarkvisionAssignment_29 extends AssignmentToken  {
	
	public MonsterInst2_DarkvisionAssignment_29(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getDarkvisionAssignment_29();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("darkvision",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("darkvision");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getDarkvisionDarkvisionKeyword_29_0();
			return obj;
		}
		return null;
	}

}

// seduce?="#seduce"
protected class MonsterInst2_SeduceAssignment_30 extends AssignmentToken  {
	
	public MonsterInst2_SeduceAssignment_30(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getSeduceAssignment_30();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("seduce",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("seduce");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getSeduceSeduceKeyword_30_0();
			return obj;
		}
		return null;
	}

}

// succubus?="#succubus"
protected class MonsterInst2_SuccubusAssignment_31 extends AssignmentToken  {
	
	public MonsterInst2_SuccubusAssignment_31(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getSuccubusAssignment_31();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("succubus",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("succubus");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getSuccubusSuccubusKeyword_31_0();
			return obj;
		}
		return null;
	}

}

// beckon?="#beckon"
protected class MonsterInst2_BeckonAssignment_32 extends AssignmentToken  {
	
	public MonsterInst2_BeckonAssignment_32(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getBeckonAssignment_32();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("beckon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("beckon");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getBeckonBeckonKeyword_32_0();
			return obj;
		}
		return null;
	}

}

// startage?="#startage"
protected class MonsterInst2_StartageAssignment_33 extends AssignmentToken  {
	
	public MonsterInst2_StartageAssignment_33(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getStartageAssignment_33();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startage",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startage");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getStartageStartageKeyword_33_0();
			return obj;
		}
		return null;
	}

}

// maxage?="#maxage"
protected class MonsterInst2_MaxageAssignment_34 extends AssignmentToken  {
	
	public MonsterInst2_MaxageAssignment_34(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getMaxageAssignment_34();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("maxage",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("maxage");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getMaxageMaxageKeyword_34_0();
			return obj;
		}
		return null;
	}

}

// older?="#older"
protected class MonsterInst2_OlderAssignment_35 extends AssignmentToken  {
	
	public MonsterInst2_OlderAssignment_35(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getOlderAssignment_35();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("older",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("older");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getOlderOlderKeyword_35_0();
			return obj;
		}
		return null;
	}

}

// healer?="#healer"
protected class MonsterInst2_HealerAssignment_36 extends AssignmentToken  {
	
	public MonsterInst2_HealerAssignment_36(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getHealerAssignment_36();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("healer",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("healer");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getHealerHealerKeyword_36_0();
			return obj;
		}
		return null;
	}

}

// startaff?="#startaff"
protected class MonsterInst2_StartaffAssignment_37 extends AssignmentToken  {
	
	public MonsterInst2_StartaffAssignment_37(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getStartaffAssignment_37();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startaff",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startaff");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getStartaffStartaffKeyword_37_0();
			return obj;
		}
		return null;
	}

}

// supplybonus?="#supplybonus"
protected class MonsterInst2_SupplybonusAssignment_38 extends AssignmentToken  {
	
	public MonsterInst2_SupplybonusAssignment_38(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getSupplybonusAssignment_38();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("supplybonus",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("supplybonus");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getSupplybonusSupplybonusKeyword_38_0();
			return obj;
		}
		return null;
	}

}

// uwdamage?="#uwdamage"
protected class MonsterInst2_UwdamageAssignment_39 extends AssignmentToken  {
	
	public MonsterInst2_UwdamageAssignment_39(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getUwdamageAssignment_39();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwdamage",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwdamage");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getUwdamageUwdamageKeyword_39_0();
			return obj;
		}
		return null;
	}

}

// homesick?="#homesick"
protected class MonsterInst2_HomesickAssignment_40 extends AssignmentToken  {
	
	public MonsterInst2_HomesickAssignment_40(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getHomesickAssignment_40();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("homesick",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("homesick");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getHomesickHomesickKeyword_40_0();
			return obj;
		}
		return null;
	}

}

// coldpower?="#coldpower"
protected class MonsterInst2_ColdpowerAssignment_41 extends AssignmentToken  {
	
	public MonsterInst2_ColdpowerAssignment_41(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getColdpowerAssignment_41();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("coldpower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("coldpower");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getColdpowerColdpowerKeyword_41_0();
			return obj;
		}
		return null;
	}

}

// firepower?="#firepower"
protected class MonsterInst2_FirepowerAssignment_42 extends AssignmentToken  {
	
	public MonsterInst2_FirepowerAssignment_42(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getFirepowerAssignment_42();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("firepower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("firepower");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getFirepowerFirepowerKeyword_42_0();
			return obj;
		}
		return null;
	}

}

// stormpower?="#stormpower"
protected class MonsterInst2_StormpowerAssignment_43 extends AssignmentToken  {
	
	public MonsterInst2_StormpowerAssignment_43(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getStormpowerAssignment_43();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stormpower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stormpower");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getStormpowerStormpowerKeyword_43_0();
			return obj;
		}
		return null;
	}

}

// darkpower?="#darkpower"
protected class MonsterInst2_DarkpowerAssignment_44 extends AssignmentToken  {
	
	public MonsterInst2_DarkpowerAssignment_44(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getDarkpowerAssignment_44();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("darkpower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("darkpower");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getDarkpowerDarkpowerKeyword_44_0();
			return obj;
		}
		return null;
	}

}

// springpower?="#springpower"
protected class MonsterInst2_SpringpowerAssignment_45 extends AssignmentToken  {
	
	public MonsterInst2_SpringpowerAssignment_45(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getSpringpowerAssignment_45();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("springpower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("springpower");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getSpringpowerSpringpowerKeyword_45_0();
			return obj;
		}
		return null;
	}

}

// summerpower?="#summerpower"
protected class MonsterInst2_SummerpowerAssignment_46 extends AssignmentToken  {
	
	public MonsterInst2_SummerpowerAssignment_46(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getSummerpowerAssignment_46();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("summerpower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("summerpower");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getSummerpowerSummerpowerKeyword_46_0();
			return obj;
		}
		return null;
	}

}

// fallpower?="#fallpower"
protected class MonsterInst2_FallpowerAssignment_47 extends AssignmentToken  {
	
	public MonsterInst2_FallpowerAssignment_47(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getFallpowerAssignment_47();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fallpower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fallpower");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getFallpowerFallpowerKeyword_47_0();
			return obj;
		}
		return null;
	}

}

// winterpower?="#winterpower"
protected class MonsterInst2_WinterpowerAssignment_48 extends AssignmentToken  {
	
	public MonsterInst2_WinterpowerAssignment_48(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getWinterpowerAssignment_48();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("winterpower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("winterpower");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getWinterpowerWinterpowerKeyword_48_0();
			return obj;
		}
		return null;
	}

}

// ambidextrous?="#ambidextrous"
protected class MonsterInst2_AmbidextrousAssignment_49 extends AssignmentToken  {
	
	public MonsterInst2_AmbidextrousAssignment_49(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getAmbidextrousAssignment_49();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ambidextrous",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ambidextrous");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getAmbidextrousAmbidextrousKeyword_49_0();
			return obj;
		}
		return null;
	}

}

// banefireshield?="#banefireshield"
protected class MonsterInst2_BanefireshieldAssignment_50 extends AssignmentToken  {
	
	public MonsterInst2_BanefireshieldAssignment_50(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getBanefireshieldAssignment_50();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("banefireshield",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("banefireshield");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getBanefireshieldBanefireshieldKeyword_50_0();
			return obj;
		}
		return null;
	}

}

// berserk?="#berserk"
protected class MonsterInst2_BerserkAssignment_51 extends AssignmentToken  {
	
	public MonsterInst2_BerserkAssignment_51(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getBerserkAssignment_51();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("berserk",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("berserk");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getBerserkBerserkKeyword_51_0();
			return obj;
		}
		return null;
	}

}

// standard?="#standard"
protected class MonsterInst2_StandardAssignment_52 extends AssignmentToken  {
	
	public MonsterInst2_StandardAssignment_52(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getStandardAssignment_52();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("standard",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("standard");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getStandardStandardKeyword_52_0();
			return obj;
		}
		return null;
	}

}

// animalawe?="#animalawe"
protected class MonsterInst2_AnimalaweAssignment_53 extends AssignmentToken  {
	
	public MonsterInst2_AnimalaweAssignment_53(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getAnimalaweAssignment_53();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("animalawe",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("animalawe");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getAnimalaweAnimalaweKeyword_53_0();
			return obj;
		}
		return null;
	}

}

// awe?="#awe"
protected class MonsterInst2_AweAssignment_54 extends AssignmentToken  {
	
	public MonsterInst2_AweAssignment_54(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getAweAssignment_54();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("awe",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("awe");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getAweAweKeyword_54_0();
			return obj;
		}
		return null;
	}

}

// fear?="#fear"
protected class MonsterInst2_FearAssignment_55 extends AssignmentToken  {
	
	public MonsterInst2_FearAssignment_55(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getFearAssignment_55();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fear",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fear");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getFearFearKeyword_55_0();
			return obj;
		}
		return null;
	}

}

// regeneration?="#regeneration"
protected class MonsterInst2_RegenerationAssignment_56 extends AssignmentToken  {
	
	public MonsterInst2_RegenerationAssignment_56(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getRegenerationAssignment_56();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("regeneration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("regeneration");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getRegenerationRegenerationKeyword_56_0();
			return obj;
		}
		return null;
	}

}

// reinvigoration?="#reinvigoration"
protected class MonsterInst2_ReinvigorationAssignment_57 extends AssignmentToken  {
	
	public MonsterInst2_ReinvigorationAssignment_57(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getReinvigorationAssignment_57();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("reinvigoration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("reinvigoration");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getReinvigorationReinvigorationKeyword_57_0();
			return obj;
		}
		return null;
	}

}

// fireshield?="#fireshield"
protected class MonsterInst2_FireshieldAssignment_58 extends AssignmentToken  {
	
	public MonsterInst2_FireshieldAssignment_58(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getFireshieldAssignment_58();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fireshield",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fireshield");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getFireshieldFireshieldKeyword_58_0();
			return obj;
		}
		return null;
	}

}

// iceprot?="#iceprot"
protected class MonsterInst2_IceprotAssignment_59 extends AssignmentToken  {
	
	public MonsterInst2_IceprotAssignment_59(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getIceprotAssignment_59();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("iceprot",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("iceprot");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getIceprotIceprotKeyword_59_0();
			return obj;
		}
		return null;
	}

}

// poisoncloud?="#poisoncloud"
protected class MonsterInst2_PoisoncloudAssignment_60 extends AssignmentToken  {
	
	public MonsterInst2_PoisoncloudAssignment_60(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getPoisoncloudAssignment_60();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("poisoncloud",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("poisoncloud");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getPoisoncloudPoisoncloudKeyword_60_0();
			return obj;
		}
		return null;
	}

}

// diseasecloud?="#diseasecloud"
protected class MonsterInst2_DiseasecloudAssignment_61 extends AssignmentToken  {
	
	public MonsterInst2_DiseasecloudAssignment_61(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getDiseasecloudAssignment_61();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("diseasecloud",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("diseasecloud");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getDiseasecloudDiseasecloudKeyword_61_0();
			return obj;
		}
		return null;
	}

}

// bloodvengeance?="#bloodvengeance"
protected class MonsterInst2_BloodvengeanceAssignment_62 extends AssignmentToken  {
	
	public MonsterInst2_BloodvengeanceAssignment_62(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getBloodvengeanceAssignment_62();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bloodvengeance",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bloodvengeance");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getBloodvengeanceBloodvengeanceKeyword_62_0();
			return obj;
		}
		return null;
	}

}

// castledef?="#castledef"
protected class MonsterInst2_CastledefAssignment_63 extends AssignmentToken  {
	
	public MonsterInst2_CastledefAssignment_63(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getCastledefAssignment_63();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("castledef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("castledef");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getCastledefCastledefKeyword_63_0();
			return obj;
		}
		return null;
	}

}

// siegebonus?="#siegebonus"
protected class MonsterInst2_SiegebonusAssignment_64 extends AssignmentToken  {
	
	public MonsterInst2_SiegebonusAssignment_64(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getSiegebonusAssignment_64();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("siegebonus",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("siegebonus");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getSiegebonusSiegebonusKeyword_64_0();
			return obj;
		}
		return null;
	}

}

// patrolbonus?="#patrolbonus"
protected class MonsterInst2_PatrolbonusAssignment_65 extends AssignmentToken  {
	
	public MonsterInst2_PatrolbonusAssignment_65(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getPatrolbonusAssignment_65();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("patrolbonus",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("patrolbonus");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getPatrolbonusPatrolbonusKeyword_65_0();
			return obj;
		}
		return null;
	}

}

// pillagebonus?="#pillagebonus"
protected class MonsterInst2_PillagebonusAssignment_66 extends AssignmentToken  {
	
	public MonsterInst2_PillagebonusAssignment_66(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getPillagebonusAssignment_66();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("pillagebonus",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("pillagebonus");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getPillagebonusPillagebonusKeyword_66_0();
			return obj;
		}
		return null;
	}

}

// researchbonus?="#researchbonus"
protected class MonsterInst2_ResearchbonusAssignment_67 extends AssignmentToken  {
	
	public MonsterInst2_ResearchbonusAssignment_67(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getResearchbonusAssignment_67();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("researchbonus",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("researchbonus");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getResearchbonusResearchbonusKeyword_67_0();
			return obj;
		}
		return null;
	}

}

// forgebonus?="#forgebonus"
protected class MonsterInst2_ForgebonusAssignment_68 extends AssignmentToken  {
	
	public MonsterInst2_ForgebonusAssignment_68(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getForgebonusAssignment_68();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("forgebonus",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("forgebonus");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getForgebonusForgebonusKeyword_68_0();
			return obj;
		}
		return null;
	}

}

// douse?="#douse"
protected class MonsterInst2_DouseAssignment_69 extends AssignmentToken  {
	
	public MonsterInst2_DouseAssignment_69(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getDouseAssignment_69();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("douse",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("douse");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getDouseDouseKeyword_69_0();
			return obj;
		}
		return null;
	}

}

// nobadevents?="#nobadevents"
protected class MonsterInst2_NobadeventsAssignment_70 extends AssignmentToken  {
	
	public MonsterInst2_NobadeventsAssignment_70(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getNobadeventsAssignment_70();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nobadevents",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nobadevents");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getNobadeventsNobadeventsKeyword_70_0();
			return obj;
		}
		return null;
	}

}

// incunrest?="#incunrest"
protected class MonsterInst2_IncunrestAssignment_71 extends AssignmentToken  {
	
	public MonsterInst2_IncunrestAssignment_71(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getIncunrestAssignment_71();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("incunrest",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("incunrest");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getIncunrestIncunrestKeyword_71_0();
			return obj;
		}
		return null;
	}

}

// spreaddom?="#spreaddom"
protected class MonsterInst2_SpreaddomAssignment_72 extends AssignmentToken  {
	
	public MonsterInst2_SpreaddomAssignment_72(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getSpreaddomAssignment_72();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("spreaddom",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("spreaddom");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getSpreaddomSpreaddomKeyword_72_0();
			return obj;
		}
		return null;
	}

}

// leper?="#leper"
protected class MonsterInst2_LeperAssignment_73 extends AssignmentToken  {
	
	public MonsterInst2_LeperAssignment_73(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getLeperAssignment_73();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("leper",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("leper");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getLeperLeperKeyword_73_0();
			return obj;
		}
		return null;
	}

}

// popkill?="#popkill"
protected class MonsterInst2_PopkillAssignment_74 extends AssignmentToken  {
	
	public MonsterInst2_PopkillAssignment_74(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getPopkillAssignment_74();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("popkill",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("popkill");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getPopkillPopkillKeyword_74_0();
			return obj;
		}
		return null;
	}

}

// heretic?="#heretic"
protected class MonsterInst2_HereticAssignment_75 extends AssignmentToken  {
	
	public MonsterInst2_HereticAssignment_75(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getHereticAssignment_75();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("heretic",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("heretic");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getHereticHereticKeyword_75_0();
			return obj;
		}
		return null;
	}

}

// itemslots?="#itemslots"
protected class MonsterInst2_ItemslotsAssignment_76 extends AssignmentToken  {
	
	public MonsterInst2_ItemslotsAssignment_76(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getItemslotsAssignment_76();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("itemslots",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("itemslots");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getItemslotsItemslotsKeyword_76_0();
			return obj;
		}
		return null;
	}

}

// nametype?="#nametype"
protected class MonsterInst2_NametypeAssignment_77 extends AssignmentToken  {
	
	public MonsterInst2_NametypeAssignment_77(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst2Access().getNametypeAssignment_77();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nametype",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nametype");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst2Access().getNametypeNametypeKeyword_77_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterInst2 ****************/


/************ begin Rule MonsterInst3 ****************
 *
 * MonsterInst3:
 * 	magicskill?="#magicskill" | custommagic?="#custommagic" | magicboost?="#magicboost" | gemprod?="#gemprod";
 *
 **/

// magicskill?="#magicskill" | custommagic?="#custommagic" | magicboost?="#magicboost" | gemprod?="#gemprod"
protected class MonsterInst3_Alternatives extends AlternativesToken {

	public MonsterInst3_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMonsterInst3Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst3_MagicskillAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MonsterInst3_CustommagicAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MonsterInst3_MagicboostAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new MonsterInst3_GemprodAssignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// magicskill?="#magicskill"
protected class MonsterInst3_MagicskillAssignment_0 extends AssignmentToken  {
	
	public MonsterInst3_MagicskillAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst3Access().getMagicskillAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("magicskill",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("magicskill");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst3Access().getMagicskillMagicskillKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// custommagic?="#custommagic"
protected class MonsterInst3_CustommagicAssignment_1 extends AssignmentToken  {
	
	public MonsterInst3_CustommagicAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst3Access().getCustommagicAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("custommagic",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("custommagic");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst3Access().getCustommagicCustommagicKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// magicboost?="#magicboost"
protected class MonsterInst3_MagicboostAssignment_2 extends AssignmentToken  {
	
	public MonsterInst3_MagicboostAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst3Access().getMagicboostAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("magicboost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("magicboost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst3Access().getMagicboostMagicboostKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// gemprod?="#gemprod"
protected class MonsterInst3_GemprodAssignment_3 extends AssignmentToken  {
	
	public MonsterInst3_GemprodAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst3Access().getGemprodAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("gemprod",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("gemprod");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst3Access().getGemprodGemprodKeyword_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterInst3 ****************/


/************ begin Rule MonsterInst4 ****************
 *
 * MonsterInst4:
 * 	clear?="#clear" | clearweapons?="#clearweapons" | cleararmor?="#cleararmor" | clearmagic?="#clearmagic" |
 * 	clearspec?="#clearspec" | female?="#female" | mounted?="#mounted" | holy?="#holy" | animal?="#animal" |
 * 	undead?="#undead" | demon?="#demon" | magicbeing?="#magicbeing" | stonebeing?="#stonebeing" | inanimate?="#inanimate"
 * 	| coldblood?="#coldblood" | coldblood?="#coldblooded" | immortal?="#immortal" | blind?="#blind" | unique?="#unique" |
 * 	immobile?="#immobile" | aquatic?="#aquatic" | amphibian?="#amphibian" | pooramphibian?="#pooramphibian" |
 * 	flying?="#flying" | stormimmune?="#stormimmune" | sailing?="#sailing" | forestsurvival?="#forestsurvival" |
 * 	mountainsurvival?="#mountainsurvival" | swampsurvival?="#swampsurvival" | wastesurvival?="#wastesurvival" |
 * 	illusion?="#illusion" | spy?="#spy" | assassin?="#assassin" | heal?="#heal" | noheal?="#noheal" |
 * 	neednoteat?="#neednoteat" | ethereal?="#ethereal" | trample?="#trample" | entangle?="#entangle" | eyeloss?="#eyeloss"
 * 	| horrormark?="#horrormark" | poisonarmor?="#poisonarmor" | inquisitor?="#inquisitor" | noitem?="#noitem" |
 * 	drainimmune?="#drainimmune" | noleader?="#noleader" | poorleader?="#poorleader" | okleader?="#okleader" |
 * 	goodleader?="#goodleader" | expertleader?="#expertleader" | superiorleader?="#superiorleader" |
 * 	nomagicleader?="#nomagicleader" | poormagicleader?="#poormagicleader" | okmagicleader?="#okmagicleader" |
 * 	goodmagicleader?="#goodmagicleader" | expertmagicleader?="#expertmagicleader" |
 * 	superiormagicleader?="#superiormagicleader" | noundeadleader?="#noundeadleader" |
 * 	poorundeadleader?="#poorundeadleader" | okundeadleader?="#okundeadleader" | goodundeadleader?="#goodundeadleader" |
 * 	expertundeadleader?="#expertundeadleader" | superiorundeadleader?="#superiorundeadleader";
 *
 **/

// clear?="#clear" | clearweapons?="#clearweapons" | cleararmor?="#cleararmor" | clearmagic?="#clearmagic" |
// clearspec?="#clearspec" | female?="#female" | mounted?="#mounted" | holy?="#holy" | animal?="#animal" |
// undead?="#undead" | demon?="#demon" | magicbeing?="#magicbeing" | stonebeing?="#stonebeing" | inanimate?="#inanimate" |
// coldblood?="#coldblood" | coldblood?="#coldblooded" | immortal?="#immortal" | blind?="#blind" | unique?="#unique" |
// immobile?="#immobile" | aquatic?="#aquatic" | amphibian?="#amphibian" | pooramphibian?="#pooramphibian" |
// flying?="#flying" | stormimmune?="#stormimmune" | sailing?="#sailing" | forestsurvival?="#forestsurvival" |
// mountainsurvival?="#mountainsurvival" | swampsurvival?="#swampsurvival" | wastesurvival?="#wastesurvival" |
// illusion?="#illusion" | spy?="#spy" | assassin?="#assassin" | heal?="#heal" | noheal?="#noheal" |
// neednoteat?="#neednoteat" | ethereal?="#ethereal" | trample?="#trample" | entangle?="#entangle" | eyeloss?="#eyeloss" |
// horrormark?="#horrormark" | poisonarmor?="#poisonarmor" | inquisitor?="#inquisitor" | noitem?="#noitem" |
// drainimmune?="#drainimmune" | noleader?="#noleader" | poorleader?="#poorleader" | okleader?="#okleader" |
// goodleader?="#goodleader" | expertleader?="#expertleader" | superiorleader?="#superiorleader" |
// nomagicleader?="#nomagicleader" | poormagicleader?="#poormagicleader" | okmagicleader?="#okmagicleader" |
// goodmagicleader?="#goodmagicleader" | expertmagicleader?="#expertmagicleader" |
// superiormagicleader?="#superiormagicleader" | noundeadleader?="#noundeadleader" | poorundeadleader?="#poorundeadleader"
// | okundeadleader?="#okundeadleader" | goodundeadleader?="#goodundeadleader" | expertundeadleader?="#expertundeadleader"
// | superiorundeadleader?="#superiorundeadleader"
protected class MonsterInst4_Alternatives extends AlternativesToken {

	public MonsterInst4_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst4_ClearAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MonsterInst4_ClearweaponsAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MonsterInst4_CleararmorAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new MonsterInst4_ClearmagicAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new MonsterInst4_ClearspecAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new MonsterInst4_FemaleAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new MonsterInst4_MountedAssignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new MonsterInst4_HolyAssignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new MonsterInst4_AnimalAssignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new MonsterInst4_UndeadAssignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new MonsterInst4_DemonAssignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new MonsterInst4_MagicbeingAssignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new MonsterInst4_StonebeingAssignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new MonsterInst4_InanimateAssignment_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new MonsterInst4_ColdbloodAssignment_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new MonsterInst4_ColdbloodAssignment_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new MonsterInst4_ImmortalAssignment_16(lastRuleCallOrigin, this, 16, inst);
			case 17: return new MonsterInst4_BlindAssignment_17(lastRuleCallOrigin, this, 17, inst);
			case 18: return new MonsterInst4_UniqueAssignment_18(lastRuleCallOrigin, this, 18, inst);
			case 19: return new MonsterInst4_ImmobileAssignment_19(lastRuleCallOrigin, this, 19, inst);
			case 20: return new MonsterInst4_AquaticAssignment_20(lastRuleCallOrigin, this, 20, inst);
			case 21: return new MonsterInst4_AmphibianAssignment_21(lastRuleCallOrigin, this, 21, inst);
			case 22: return new MonsterInst4_PooramphibianAssignment_22(lastRuleCallOrigin, this, 22, inst);
			case 23: return new MonsterInst4_FlyingAssignment_23(lastRuleCallOrigin, this, 23, inst);
			case 24: return new MonsterInst4_StormimmuneAssignment_24(lastRuleCallOrigin, this, 24, inst);
			case 25: return new MonsterInst4_SailingAssignment_25(lastRuleCallOrigin, this, 25, inst);
			case 26: return new MonsterInst4_ForestsurvivalAssignment_26(lastRuleCallOrigin, this, 26, inst);
			case 27: return new MonsterInst4_MountainsurvivalAssignment_27(lastRuleCallOrigin, this, 27, inst);
			case 28: return new MonsterInst4_SwampsurvivalAssignment_28(lastRuleCallOrigin, this, 28, inst);
			case 29: return new MonsterInst4_WastesurvivalAssignment_29(lastRuleCallOrigin, this, 29, inst);
			case 30: return new MonsterInst4_IllusionAssignment_30(lastRuleCallOrigin, this, 30, inst);
			case 31: return new MonsterInst4_SpyAssignment_31(lastRuleCallOrigin, this, 31, inst);
			case 32: return new MonsterInst4_AssassinAssignment_32(lastRuleCallOrigin, this, 32, inst);
			case 33: return new MonsterInst4_HealAssignment_33(lastRuleCallOrigin, this, 33, inst);
			case 34: return new MonsterInst4_NohealAssignment_34(lastRuleCallOrigin, this, 34, inst);
			case 35: return new MonsterInst4_NeednoteatAssignment_35(lastRuleCallOrigin, this, 35, inst);
			case 36: return new MonsterInst4_EtherealAssignment_36(lastRuleCallOrigin, this, 36, inst);
			case 37: return new MonsterInst4_TrampleAssignment_37(lastRuleCallOrigin, this, 37, inst);
			case 38: return new MonsterInst4_EntangleAssignment_38(lastRuleCallOrigin, this, 38, inst);
			case 39: return new MonsterInst4_EyelossAssignment_39(lastRuleCallOrigin, this, 39, inst);
			case 40: return new MonsterInst4_HorrormarkAssignment_40(lastRuleCallOrigin, this, 40, inst);
			case 41: return new MonsterInst4_PoisonarmorAssignment_41(lastRuleCallOrigin, this, 41, inst);
			case 42: return new MonsterInst4_InquisitorAssignment_42(lastRuleCallOrigin, this, 42, inst);
			case 43: return new MonsterInst4_NoitemAssignment_43(lastRuleCallOrigin, this, 43, inst);
			case 44: return new MonsterInst4_DrainimmuneAssignment_44(lastRuleCallOrigin, this, 44, inst);
			case 45: return new MonsterInst4_NoleaderAssignment_45(lastRuleCallOrigin, this, 45, inst);
			case 46: return new MonsterInst4_PoorleaderAssignment_46(lastRuleCallOrigin, this, 46, inst);
			case 47: return new MonsterInst4_OkleaderAssignment_47(lastRuleCallOrigin, this, 47, inst);
			case 48: return new MonsterInst4_GoodleaderAssignment_48(lastRuleCallOrigin, this, 48, inst);
			case 49: return new MonsterInst4_ExpertleaderAssignment_49(lastRuleCallOrigin, this, 49, inst);
			case 50: return new MonsterInst4_SuperiorleaderAssignment_50(lastRuleCallOrigin, this, 50, inst);
			case 51: return new MonsterInst4_NomagicleaderAssignment_51(lastRuleCallOrigin, this, 51, inst);
			case 52: return new MonsterInst4_PoormagicleaderAssignment_52(lastRuleCallOrigin, this, 52, inst);
			case 53: return new MonsterInst4_OkmagicleaderAssignment_53(lastRuleCallOrigin, this, 53, inst);
			case 54: return new MonsterInst4_GoodmagicleaderAssignment_54(lastRuleCallOrigin, this, 54, inst);
			case 55: return new MonsterInst4_ExpertmagicleaderAssignment_55(lastRuleCallOrigin, this, 55, inst);
			case 56: return new MonsterInst4_SuperiormagicleaderAssignment_56(lastRuleCallOrigin, this, 56, inst);
			case 57: return new MonsterInst4_NoundeadleaderAssignment_57(lastRuleCallOrigin, this, 57, inst);
			case 58: return new MonsterInst4_PoorundeadleaderAssignment_58(lastRuleCallOrigin, this, 58, inst);
			case 59: return new MonsterInst4_OkundeadleaderAssignment_59(lastRuleCallOrigin, this, 59, inst);
			case 60: return new MonsterInst4_GoodundeadleaderAssignment_60(lastRuleCallOrigin, this, 60, inst);
			case 61: return new MonsterInst4_ExpertundeadleaderAssignment_61(lastRuleCallOrigin, this, 61, inst);
			case 62: return new MonsterInst4_SuperiorundeadleaderAssignment_62(lastRuleCallOrigin, this, 62, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// clear?="#clear"
protected class MonsterInst4_ClearAssignment_0 extends AssignmentToken  {
	
	public MonsterInst4_ClearAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getClearAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("clear",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clear");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getClearClearKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// clearweapons?="#clearweapons"
protected class MonsterInst4_ClearweaponsAssignment_1 extends AssignmentToken  {
	
	public MonsterInst4_ClearweaponsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getClearweaponsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("clearweapons",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clearweapons");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getClearweaponsClearweaponsKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// cleararmor?="#cleararmor"
protected class MonsterInst4_CleararmorAssignment_2 extends AssignmentToken  {
	
	public MonsterInst4_CleararmorAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getCleararmorAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cleararmor",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cleararmor");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getCleararmorCleararmorKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// clearmagic?="#clearmagic"
protected class MonsterInst4_ClearmagicAssignment_3 extends AssignmentToken  {
	
	public MonsterInst4_ClearmagicAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getClearmagicAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("clearmagic",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clearmagic");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getClearmagicClearmagicKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// clearspec?="#clearspec"
protected class MonsterInst4_ClearspecAssignment_4 extends AssignmentToken  {
	
	public MonsterInst4_ClearspecAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getClearspecAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("clearspec",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clearspec");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getClearspecClearspecKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// female?="#female"
protected class MonsterInst4_FemaleAssignment_5 extends AssignmentToken  {
	
	public MonsterInst4_FemaleAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getFemaleAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("female",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("female");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getFemaleFemaleKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// mounted?="#mounted"
protected class MonsterInst4_MountedAssignment_6 extends AssignmentToken  {
	
	public MonsterInst4_MountedAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getMountedAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mounted",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mounted");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getMountedMountedKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// holy?="#holy"
protected class MonsterInst4_HolyAssignment_7 extends AssignmentToken  {
	
	public MonsterInst4_HolyAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getHolyAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("holy",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("holy");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getHolyHolyKeyword_7_0();
			return obj;
		}
		return null;
	}

}

// animal?="#animal"
protected class MonsterInst4_AnimalAssignment_8 extends AssignmentToken  {
	
	public MonsterInst4_AnimalAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getAnimalAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("animal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("animal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getAnimalAnimalKeyword_8_0();
			return obj;
		}
		return null;
	}

}

// undead?="#undead"
protected class MonsterInst4_UndeadAssignment_9 extends AssignmentToken  {
	
	public MonsterInst4_UndeadAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getUndeadAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("undead",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("undead");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getUndeadUndeadKeyword_9_0();
			return obj;
		}
		return null;
	}

}

// demon?="#demon"
protected class MonsterInst4_DemonAssignment_10 extends AssignmentToken  {
	
	public MonsterInst4_DemonAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getDemonAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("demon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("demon");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getDemonDemonKeyword_10_0();
			return obj;
		}
		return null;
	}

}

// magicbeing?="#magicbeing"
protected class MonsterInst4_MagicbeingAssignment_11 extends AssignmentToken  {
	
	public MonsterInst4_MagicbeingAssignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getMagicbeingAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("magicbeing",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("magicbeing");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getMagicbeingMagicbeingKeyword_11_0();
			return obj;
		}
		return null;
	}

}

// stonebeing?="#stonebeing"
protected class MonsterInst4_StonebeingAssignment_12 extends AssignmentToken  {
	
	public MonsterInst4_StonebeingAssignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getStonebeingAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stonebeing",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stonebeing");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getStonebeingStonebeingKeyword_12_0();
			return obj;
		}
		return null;
	}

}

// inanimate?="#inanimate"
protected class MonsterInst4_InanimateAssignment_13 extends AssignmentToken  {
	
	public MonsterInst4_InanimateAssignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getInanimateAssignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("inanimate",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("inanimate");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getInanimateInanimateKeyword_13_0();
			return obj;
		}
		return null;
	}

}

// coldblood?="#coldblood"
protected class MonsterInst4_ColdbloodAssignment_14 extends AssignmentToken  {
	
	public MonsterInst4_ColdbloodAssignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getColdbloodAssignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("coldblood",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("coldblood");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getColdbloodColdbloodKeyword_14_0();
			return obj;
		}
		return null;
	}

}

// coldblood?="#coldblooded"
protected class MonsterInst4_ColdbloodAssignment_15 extends AssignmentToken  {
	
	public MonsterInst4_ColdbloodAssignment_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getColdbloodAssignment_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("coldblood",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("coldblood");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getColdbloodColdbloodedKeyword_15_0();
			return obj;
		}
		return null;
	}

}

// immortal?="#immortal"
protected class MonsterInst4_ImmortalAssignment_16 extends AssignmentToken  {
	
	public MonsterInst4_ImmortalAssignment_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getImmortalAssignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("immortal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("immortal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getImmortalImmortalKeyword_16_0();
			return obj;
		}
		return null;
	}

}

// blind?="#blind"
protected class MonsterInst4_BlindAssignment_17 extends AssignmentToken  {
	
	public MonsterInst4_BlindAssignment_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getBlindAssignment_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("blind",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("blind");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getBlindBlindKeyword_17_0();
			return obj;
		}
		return null;
	}

}

// unique?="#unique"
protected class MonsterInst4_UniqueAssignment_18 extends AssignmentToken  {
	
	public MonsterInst4_UniqueAssignment_18(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getUniqueAssignment_18();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("unique",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("unique");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getUniqueUniqueKeyword_18_0();
			return obj;
		}
		return null;
	}

}

// immobile?="#immobile"
protected class MonsterInst4_ImmobileAssignment_19 extends AssignmentToken  {
	
	public MonsterInst4_ImmobileAssignment_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getImmobileAssignment_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("immobile",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("immobile");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getImmobileImmobileKeyword_19_0();
			return obj;
		}
		return null;
	}

}

// aquatic?="#aquatic"
protected class MonsterInst4_AquaticAssignment_20 extends AssignmentToken  {
	
	public MonsterInst4_AquaticAssignment_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getAquaticAssignment_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("aquatic",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("aquatic");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getAquaticAquaticKeyword_20_0();
			return obj;
		}
		return null;
	}

}

// amphibian?="#amphibian"
protected class MonsterInst4_AmphibianAssignment_21 extends AssignmentToken  {
	
	public MonsterInst4_AmphibianAssignment_21(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getAmphibianAssignment_21();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("amphibian",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("amphibian");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getAmphibianAmphibianKeyword_21_0();
			return obj;
		}
		return null;
	}

}

// pooramphibian?="#pooramphibian"
protected class MonsterInst4_PooramphibianAssignment_22 extends AssignmentToken  {
	
	public MonsterInst4_PooramphibianAssignment_22(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getPooramphibianAssignment_22();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("pooramphibian",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("pooramphibian");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getPooramphibianPooramphibianKeyword_22_0();
			return obj;
		}
		return null;
	}

}

// flying?="#flying"
protected class MonsterInst4_FlyingAssignment_23 extends AssignmentToken  {
	
	public MonsterInst4_FlyingAssignment_23(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getFlyingAssignment_23();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("flying",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("flying");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getFlyingFlyingKeyword_23_0();
			return obj;
		}
		return null;
	}

}

// stormimmune?="#stormimmune"
protected class MonsterInst4_StormimmuneAssignment_24 extends AssignmentToken  {
	
	public MonsterInst4_StormimmuneAssignment_24(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getStormimmuneAssignment_24();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stormimmune",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stormimmune");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getStormimmuneStormimmuneKeyword_24_0();
			return obj;
		}
		return null;
	}

}

// sailing?="#sailing"
protected class MonsterInst4_SailingAssignment_25 extends AssignmentToken  {
	
	public MonsterInst4_SailingAssignment_25(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getSailingAssignment_25();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sailing",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sailing");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getSailingSailingKeyword_25_0();
			return obj;
		}
		return null;
	}

}

// forestsurvival?="#forestsurvival"
protected class MonsterInst4_ForestsurvivalAssignment_26 extends AssignmentToken  {
	
	public MonsterInst4_ForestsurvivalAssignment_26(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getForestsurvivalAssignment_26();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("forestsurvival",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("forestsurvival");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getForestsurvivalForestsurvivalKeyword_26_0();
			return obj;
		}
		return null;
	}

}

// mountainsurvival?="#mountainsurvival"
protected class MonsterInst4_MountainsurvivalAssignment_27 extends AssignmentToken  {
	
	public MonsterInst4_MountainsurvivalAssignment_27(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getMountainsurvivalAssignment_27();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mountainsurvival",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mountainsurvival");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getMountainsurvivalMountainsurvivalKeyword_27_0();
			return obj;
		}
		return null;
	}

}

// swampsurvival?="#swampsurvival"
protected class MonsterInst4_SwampsurvivalAssignment_28 extends AssignmentToken  {
	
	public MonsterInst4_SwampsurvivalAssignment_28(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getSwampsurvivalAssignment_28();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("swampsurvival",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("swampsurvival");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getSwampsurvivalSwampsurvivalKeyword_28_0();
			return obj;
		}
		return null;
	}

}

// wastesurvival?="#wastesurvival"
protected class MonsterInst4_WastesurvivalAssignment_29 extends AssignmentToken  {
	
	public MonsterInst4_WastesurvivalAssignment_29(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getWastesurvivalAssignment_29();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("wastesurvival",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("wastesurvival");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getWastesurvivalWastesurvivalKeyword_29_0();
			return obj;
		}
		return null;
	}

}

// illusion?="#illusion"
protected class MonsterInst4_IllusionAssignment_30 extends AssignmentToken  {
	
	public MonsterInst4_IllusionAssignment_30(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getIllusionAssignment_30();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("illusion",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("illusion");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getIllusionIllusionKeyword_30_0();
			return obj;
		}
		return null;
	}

}

// spy?="#spy"
protected class MonsterInst4_SpyAssignment_31 extends AssignmentToken  {
	
	public MonsterInst4_SpyAssignment_31(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getSpyAssignment_31();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("spy",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("spy");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getSpySpyKeyword_31_0();
			return obj;
		}
		return null;
	}

}

// assassin?="#assassin"
protected class MonsterInst4_AssassinAssignment_32 extends AssignmentToken  {
	
	public MonsterInst4_AssassinAssignment_32(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getAssassinAssignment_32();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("assassin",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("assassin");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getAssassinAssassinKeyword_32_0();
			return obj;
		}
		return null;
	}

}

// heal?="#heal"
protected class MonsterInst4_HealAssignment_33 extends AssignmentToken  {
	
	public MonsterInst4_HealAssignment_33(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getHealAssignment_33();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("heal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("heal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getHealHealKeyword_33_0();
			return obj;
		}
		return null;
	}

}

// noheal?="#noheal"
protected class MonsterInst4_NohealAssignment_34 extends AssignmentToken  {
	
	public MonsterInst4_NohealAssignment_34(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getNohealAssignment_34();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noheal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noheal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getNohealNohealKeyword_34_0();
			return obj;
		}
		return null;
	}

}

// neednoteat?="#neednoteat"
protected class MonsterInst4_NeednoteatAssignment_35 extends AssignmentToken  {
	
	public MonsterInst4_NeednoteatAssignment_35(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getNeednoteatAssignment_35();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("neednoteat",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("neednoteat");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getNeednoteatNeednoteatKeyword_35_0();
			return obj;
		}
		return null;
	}

}

// ethereal?="#ethereal"
protected class MonsterInst4_EtherealAssignment_36 extends AssignmentToken  {
	
	public MonsterInst4_EtherealAssignment_36(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getEtherealAssignment_36();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ethereal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ethereal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getEtherealEtherealKeyword_36_0();
			return obj;
		}
		return null;
	}

}

// trample?="#trample"
protected class MonsterInst4_TrampleAssignment_37 extends AssignmentToken  {
	
	public MonsterInst4_TrampleAssignment_37(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getTrampleAssignment_37();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trample",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trample");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getTrampleTrampleKeyword_37_0();
			return obj;
		}
		return null;
	}

}

// entangle?="#entangle"
protected class MonsterInst4_EntangleAssignment_38 extends AssignmentToken  {
	
	public MonsterInst4_EntangleAssignment_38(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getEntangleAssignment_38();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("entangle",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("entangle");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getEntangleEntangleKeyword_38_0();
			return obj;
		}
		return null;
	}

}

// eyeloss?="#eyeloss"
protected class MonsterInst4_EyelossAssignment_39 extends AssignmentToken  {
	
	public MonsterInst4_EyelossAssignment_39(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getEyelossAssignment_39();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eyeloss",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eyeloss");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getEyelossEyelossKeyword_39_0();
			return obj;
		}
		return null;
	}

}

// horrormark?="#horrormark"
protected class MonsterInst4_HorrormarkAssignment_40 extends AssignmentToken  {
	
	public MonsterInst4_HorrormarkAssignment_40(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getHorrormarkAssignment_40();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("horrormark",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("horrormark");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getHorrormarkHorrormarkKeyword_40_0();
			return obj;
		}
		return null;
	}

}

// poisonarmor?="#poisonarmor"
protected class MonsterInst4_PoisonarmorAssignment_41 extends AssignmentToken  {
	
	public MonsterInst4_PoisonarmorAssignment_41(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getPoisonarmorAssignment_41();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("poisonarmor",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("poisonarmor");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getPoisonarmorPoisonarmorKeyword_41_0();
			return obj;
		}
		return null;
	}

}

// inquisitor?="#inquisitor"
protected class MonsterInst4_InquisitorAssignment_42 extends AssignmentToken  {
	
	public MonsterInst4_InquisitorAssignment_42(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getInquisitorAssignment_42();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("inquisitor",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("inquisitor");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getInquisitorInquisitorKeyword_42_0();
			return obj;
		}
		return null;
	}

}

// noitem?="#noitem"
protected class MonsterInst4_NoitemAssignment_43 extends AssignmentToken  {
	
	public MonsterInst4_NoitemAssignment_43(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getNoitemAssignment_43();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noitem",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noitem");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getNoitemNoitemKeyword_43_0();
			return obj;
		}
		return null;
	}

}

// drainimmune?="#drainimmune"
protected class MonsterInst4_DrainimmuneAssignment_44 extends AssignmentToken  {
	
	public MonsterInst4_DrainimmuneAssignment_44(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getDrainimmuneAssignment_44();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("drainimmune",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("drainimmune");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getDrainimmuneDrainimmuneKeyword_44_0();
			return obj;
		}
		return null;
	}

}

// noleader?="#noleader"
protected class MonsterInst4_NoleaderAssignment_45 extends AssignmentToken  {
	
	public MonsterInst4_NoleaderAssignment_45(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getNoleaderAssignment_45();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getNoleaderNoleaderKeyword_45_0();
			return obj;
		}
		return null;
	}

}

// poorleader?="#poorleader"
protected class MonsterInst4_PoorleaderAssignment_46 extends AssignmentToken  {
	
	public MonsterInst4_PoorleaderAssignment_46(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getPoorleaderAssignment_46();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("poorleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("poorleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getPoorleaderPoorleaderKeyword_46_0();
			return obj;
		}
		return null;
	}

}

// okleader?="#okleader"
protected class MonsterInst4_OkleaderAssignment_47 extends AssignmentToken  {
	
	public MonsterInst4_OkleaderAssignment_47(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getOkleaderAssignment_47();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("okleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("okleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getOkleaderOkleaderKeyword_47_0();
			return obj;
		}
		return null;
	}

}

// goodleader?="#goodleader"
protected class MonsterInst4_GoodleaderAssignment_48 extends AssignmentToken  {
	
	public MonsterInst4_GoodleaderAssignment_48(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getGoodleaderAssignment_48();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("goodleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("goodleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getGoodleaderGoodleaderKeyword_48_0();
			return obj;
		}
		return null;
	}

}

// expertleader?="#expertleader"
protected class MonsterInst4_ExpertleaderAssignment_49 extends AssignmentToken  {
	
	public MonsterInst4_ExpertleaderAssignment_49(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getExpertleaderAssignment_49();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expertleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expertleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getExpertleaderExpertleaderKeyword_49_0();
			return obj;
		}
		return null;
	}

}

// superiorleader?="#superiorleader"
protected class MonsterInst4_SuperiorleaderAssignment_50 extends AssignmentToken  {
	
	public MonsterInst4_SuperiorleaderAssignment_50(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getSuperiorleaderAssignment_50();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("superiorleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("superiorleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getSuperiorleaderSuperiorleaderKeyword_50_0();
			return obj;
		}
		return null;
	}

}

// nomagicleader?="#nomagicleader"
protected class MonsterInst4_NomagicleaderAssignment_51 extends AssignmentToken  {
	
	public MonsterInst4_NomagicleaderAssignment_51(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getNomagicleaderAssignment_51();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nomagicleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nomagicleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getNomagicleaderNomagicleaderKeyword_51_0();
			return obj;
		}
		return null;
	}

}

// poormagicleader?="#poormagicleader"
protected class MonsterInst4_PoormagicleaderAssignment_52 extends AssignmentToken  {
	
	public MonsterInst4_PoormagicleaderAssignment_52(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getPoormagicleaderAssignment_52();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("poormagicleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("poormagicleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getPoormagicleaderPoormagicleaderKeyword_52_0();
			return obj;
		}
		return null;
	}

}

// okmagicleader?="#okmagicleader"
protected class MonsterInst4_OkmagicleaderAssignment_53 extends AssignmentToken  {
	
	public MonsterInst4_OkmagicleaderAssignment_53(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getOkmagicleaderAssignment_53();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("okmagicleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("okmagicleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getOkmagicleaderOkmagicleaderKeyword_53_0();
			return obj;
		}
		return null;
	}

}

// goodmagicleader?="#goodmagicleader"
protected class MonsterInst4_GoodmagicleaderAssignment_54 extends AssignmentToken  {
	
	public MonsterInst4_GoodmagicleaderAssignment_54(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getGoodmagicleaderAssignment_54();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("goodmagicleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("goodmagicleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getGoodmagicleaderGoodmagicleaderKeyword_54_0();
			return obj;
		}
		return null;
	}

}

// expertmagicleader?="#expertmagicleader"
protected class MonsterInst4_ExpertmagicleaderAssignment_55 extends AssignmentToken  {
	
	public MonsterInst4_ExpertmagicleaderAssignment_55(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getExpertmagicleaderAssignment_55();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expertmagicleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expertmagicleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getExpertmagicleaderExpertmagicleaderKeyword_55_0();
			return obj;
		}
		return null;
	}

}

// superiormagicleader?="#superiormagicleader"
protected class MonsterInst4_SuperiormagicleaderAssignment_56 extends AssignmentToken  {
	
	public MonsterInst4_SuperiormagicleaderAssignment_56(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getSuperiormagicleaderAssignment_56();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("superiormagicleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("superiormagicleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getSuperiormagicleaderSuperiormagicleaderKeyword_56_0();
			return obj;
		}
		return null;
	}

}

// noundeadleader?="#noundeadleader"
protected class MonsterInst4_NoundeadleaderAssignment_57 extends AssignmentToken  {
	
	public MonsterInst4_NoundeadleaderAssignment_57(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getNoundeadleaderAssignment_57();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("noundeadleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("noundeadleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getNoundeadleaderNoundeadleaderKeyword_57_0();
			return obj;
		}
		return null;
	}

}

// poorundeadleader?="#poorundeadleader"
protected class MonsterInst4_PoorundeadleaderAssignment_58 extends AssignmentToken  {
	
	public MonsterInst4_PoorundeadleaderAssignment_58(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getPoorundeadleaderAssignment_58();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("poorundeadleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("poorundeadleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getPoorundeadleaderPoorundeadleaderKeyword_58_0();
			return obj;
		}
		return null;
	}

}

// okundeadleader?="#okundeadleader"
protected class MonsterInst4_OkundeadleaderAssignment_59 extends AssignmentToken  {
	
	public MonsterInst4_OkundeadleaderAssignment_59(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getOkundeadleaderAssignment_59();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("okundeadleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("okundeadleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getOkundeadleaderOkundeadleaderKeyword_59_0();
			return obj;
		}
		return null;
	}

}

// goodundeadleader?="#goodundeadleader"
protected class MonsterInst4_GoodundeadleaderAssignment_60 extends AssignmentToken  {
	
	public MonsterInst4_GoodundeadleaderAssignment_60(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getGoodundeadleaderAssignment_60();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("goodundeadleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("goodundeadleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getGoodundeadleaderGoodundeadleaderKeyword_60_0();
			return obj;
		}
		return null;
	}

}

// expertundeadleader?="#expertundeadleader"
protected class MonsterInst4_ExpertundeadleaderAssignment_61 extends AssignmentToken  {
	
	public MonsterInst4_ExpertundeadleaderAssignment_61(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getExpertundeadleaderAssignment_61();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expertundeadleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expertundeadleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getExpertundeadleaderExpertundeadleaderKeyword_61_0();
			return obj;
		}
		return null;
	}

}

// superiorundeadleader?="#superiorundeadleader"
protected class MonsterInst4_SuperiorundeadleaderAssignment_62 extends AssignmentToken  {
	
	public MonsterInst4_SuperiorundeadleaderAssignment_62(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst4Access().getSuperiorundeadleaderAssignment_62();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("superiorundeadleader",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("superiorundeadleader");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst4Access().getSuperiorundeadleaderSuperiorundeadleaderKeyword_62_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterInst4 ****************/


/************ begin Rule MonsterInst5 ****************
 *
 * MonsterInst5:
 * 	weapon?="#weapon" | armor?="#armor" | onebattlespell?="#onebattlespell" | firstshape?="#firstshape" |
 * 	secondshape?="#secondshape" | secondtmpshape?="#secondtmpshape" | shapechange?="#shapechange" |
 * 	landshape?="#landshape" | watershape?="#watershape" | forestshape?="#forestshape" | plainshape?="#plainshape" |
 * 	domsummon?="#domsummon" | domsummon2?="#domsummon2" | domsummon20?="#domsummon20" | makemonster1?="#makemonster1" |
 * 	makemonster2?="#makemonster2" | makemonster3?="#makemonster3" | makemonster4?="#makemonster4" |
 * 	makemonster5?="#makemonster5" | summon1?="#summon1" | summon5?="#summon5";
 *
 **/

// weapon?="#weapon" | armor?="#armor" | onebattlespell?="#onebattlespell" | firstshape?="#firstshape" |
// secondshape?="#secondshape" | secondtmpshape?="#secondtmpshape" | shapechange?="#shapechange" | landshape?="#landshape"
// | watershape?="#watershape" | forestshape?="#forestshape" | plainshape?="#plainshape" | domsummon?="#domsummon" |
// domsummon2?="#domsummon2" | domsummon20?="#domsummon20" | makemonster1?="#makemonster1" | makemonster2?="#makemonster2"
// | makemonster3?="#makemonster3" | makemonster4?="#makemonster4" | makemonster5?="#makemonster5" | summon1?="#summon1" |
// summon5?="#summon5"
protected class MonsterInst5_Alternatives extends AlternativesToken {

	public MonsterInst5_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst5_WeaponAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MonsterInst5_ArmorAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MonsterInst5_OnebattlespellAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new MonsterInst5_FirstshapeAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new MonsterInst5_SecondshapeAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new MonsterInst5_SecondtmpshapeAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new MonsterInst5_ShapechangeAssignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new MonsterInst5_LandshapeAssignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new MonsterInst5_WatershapeAssignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new MonsterInst5_ForestshapeAssignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new MonsterInst5_PlainshapeAssignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new MonsterInst5_DomsummonAssignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new MonsterInst5_Domsummon2Assignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new MonsterInst5_Domsummon20Assignment_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new MonsterInst5_Makemonster1Assignment_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new MonsterInst5_Makemonster2Assignment_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new MonsterInst5_Makemonster3Assignment_16(lastRuleCallOrigin, this, 16, inst);
			case 17: return new MonsterInst5_Makemonster4Assignment_17(lastRuleCallOrigin, this, 17, inst);
			case 18: return new MonsterInst5_Makemonster5Assignment_18(lastRuleCallOrigin, this, 18, inst);
			case 19: return new MonsterInst5_Summon1Assignment_19(lastRuleCallOrigin, this, 19, inst);
			case 20: return new MonsterInst5_Summon5Assignment_20(lastRuleCallOrigin, this, 20, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst5Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// weapon?="#weapon"
protected class MonsterInst5_WeaponAssignment_0 extends AssignmentToken  {
	
	public MonsterInst5_WeaponAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getWeaponAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("weapon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("weapon");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getWeaponWeaponKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// armor?="#armor"
protected class MonsterInst5_ArmorAssignment_1 extends AssignmentToken  {
	
	public MonsterInst5_ArmorAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getArmorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("armor",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("armor");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getArmorArmorKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// onebattlespell?="#onebattlespell"
protected class MonsterInst5_OnebattlespellAssignment_2 extends AssignmentToken  {
	
	public MonsterInst5_OnebattlespellAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getOnebattlespellAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("onebattlespell",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("onebattlespell");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getOnebattlespellOnebattlespellKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// firstshape?="#firstshape"
protected class MonsterInst5_FirstshapeAssignment_3 extends AssignmentToken  {
	
	public MonsterInst5_FirstshapeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getFirstshapeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("firstshape",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("firstshape");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getFirstshapeFirstshapeKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// secondshape?="#secondshape"
protected class MonsterInst5_SecondshapeAssignment_4 extends AssignmentToken  {
	
	public MonsterInst5_SecondshapeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getSecondshapeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("secondshape",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("secondshape");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getSecondshapeSecondshapeKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// secondtmpshape?="#secondtmpshape"
protected class MonsterInst5_SecondtmpshapeAssignment_5 extends AssignmentToken  {
	
	public MonsterInst5_SecondtmpshapeAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getSecondtmpshapeAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("secondtmpshape",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("secondtmpshape");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getSecondtmpshapeSecondtmpshapeKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// shapechange?="#shapechange"
protected class MonsterInst5_ShapechangeAssignment_6 extends AssignmentToken  {
	
	public MonsterInst5_ShapechangeAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getShapechangeAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("shapechange",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("shapechange");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getShapechangeShapechangeKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// landshape?="#landshape"
protected class MonsterInst5_LandshapeAssignment_7 extends AssignmentToken  {
	
	public MonsterInst5_LandshapeAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getLandshapeAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("landshape",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("landshape");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getLandshapeLandshapeKeyword_7_0();
			return obj;
		}
		return null;
	}

}

// watershape?="#watershape"
protected class MonsterInst5_WatershapeAssignment_8 extends AssignmentToken  {
	
	public MonsterInst5_WatershapeAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getWatershapeAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("watershape",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("watershape");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getWatershapeWatershapeKeyword_8_0();
			return obj;
		}
		return null;
	}

}

// forestshape?="#forestshape"
protected class MonsterInst5_ForestshapeAssignment_9 extends AssignmentToken  {
	
	public MonsterInst5_ForestshapeAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getForestshapeAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("forestshape",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("forestshape");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getForestshapeForestshapeKeyword_9_0();
			return obj;
		}
		return null;
	}

}

// plainshape?="#plainshape"
protected class MonsterInst5_PlainshapeAssignment_10 extends AssignmentToken  {
	
	public MonsterInst5_PlainshapeAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getPlainshapeAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("plainshape",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("plainshape");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getPlainshapePlainshapeKeyword_10_0();
			return obj;
		}
		return null;
	}

}

// domsummon?="#domsummon"
protected class MonsterInst5_DomsummonAssignment_11 extends AssignmentToken  {
	
	public MonsterInst5_DomsummonAssignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getDomsummonAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("domsummon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("domsummon");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getDomsummonDomsummonKeyword_11_0();
			return obj;
		}
		return null;
	}

}

// domsummon2?="#domsummon2"
protected class MonsterInst5_Domsummon2Assignment_12 extends AssignmentToken  {
	
	public MonsterInst5_Domsummon2Assignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getDomsummon2Assignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("domsummon2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("domsummon2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getDomsummon2Domsummon2Keyword_12_0();
			return obj;
		}
		return null;
	}

}

// domsummon20?="#domsummon20"
protected class MonsterInst5_Domsummon20Assignment_13 extends AssignmentToken  {
	
	public MonsterInst5_Domsummon20Assignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getDomsummon20Assignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("domsummon20",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("domsummon20");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getDomsummon20Domsummon20Keyword_13_0();
			return obj;
		}
		return null;
	}

}

// makemonster1?="#makemonster1"
protected class MonsterInst5_Makemonster1Assignment_14 extends AssignmentToken  {
	
	public MonsterInst5_Makemonster1Assignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getMakemonster1Assignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("makemonster1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("makemonster1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getMakemonster1Makemonster1Keyword_14_0();
			return obj;
		}
		return null;
	}

}

// makemonster2?="#makemonster2"
protected class MonsterInst5_Makemonster2Assignment_15 extends AssignmentToken  {
	
	public MonsterInst5_Makemonster2Assignment_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getMakemonster2Assignment_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("makemonster2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("makemonster2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getMakemonster2Makemonster2Keyword_15_0();
			return obj;
		}
		return null;
	}

}

// makemonster3?="#makemonster3"
protected class MonsterInst5_Makemonster3Assignment_16 extends AssignmentToken  {
	
	public MonsterInst5_Makemonster3Assignment_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getMakemonster3Assignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("makemonster3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("makemonster3");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getMakemonster3Makemonster3Keyword_16_0();
			return obj;
		}
		return null;
	}

}

// makemonster4?="#makemonster4"
protected class MonsterInst5_Makemonster4Assignment_17 extends AssignmentToken  {
	
	public MonsterInst5_Makemonster4Assignment_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getMakemonster4Assignment_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("makemonster4",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("makemonster4");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getMakemonster4Makemonster4Keyword_17_0();
			return obj;
		}
		return null;
	}

}

// makemonster5?="#makemonster5"
protected class MonsterInst5_Makemonster5Assignment_18 extends AssignmentToken  {
	
	public MonsterInst5_Makemonster5Assignment_18(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getMakemonster5Assignment_18();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("makemonster5",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("makemonster5");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getMakemonster5Makemonster5Keyword_18_0();
			return obj;
		}
		return null;
	}

}

// summon1?="#summon1"
protected class MonsterInst5_Summon1Assignment_19 extends AssignmentToken  {
	
	public MonsterInst5_Summon1Assignment_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getSummon1Assignment_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("summon1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("summon1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getSummon1Summon1Keyword_19_0();
			return obj;
		}
		return null;
	}

}

// summon5?="#summon5"
protected class MonsterInst5_Summon5Assignment_20 extends AssignmentToken  {
	
	public MonsterInst5_Summon5Assignment_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst5Access().getSummon5Assignment_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("summon5",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("summon5");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst5Access().getSummon5Summon5Keyword_20_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterInst5 ****************/


/************ begin Rule MonsterInst6 ****************
 *
 * MonsterInst6:
 * 	stealthy?="#stealthy" | heat?="#heat" | cold?="#cold";
 *
 **/

// stealthy?="#stealthy" | heat?="#heat" | cold?="#cold"
protected class MonsterInst6_Alternatives extends AlternativesToken {

	public MonsterInst6_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMonsterInst6Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MonsterInst6_StealthyAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MonsterInst6_HeatAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new MonsterInst6_ColdAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMonsterInst6Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// stealthy?="#stealthy"
protected class MonsterInst6_StealthyAssignment_0 extends AssignmentToken  {
	
	public MonsterInst6_StealthyAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst6Access().getStealthyAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stealthy",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stealthy");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst6Access().getStealthyStealthyKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// heat?="#heat"
protected class MonsterInst6_HeatAssignment_1 extends AssignmentToken  {
	
	public MonsterInst6_HeatAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst6Access().getHeatAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("heat",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("heat");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst6Access().getHeatHeatKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// cold?="#cold"
protected class MonsterInst6_ColdAssignment_2 extends AssignmentToken  {
	
	public MonsterInst6_ColdAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMonsterInst6Access().getColdAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cold",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cold");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMonsterInst6Access().getColdColdKeyword_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MonsterInst6 ****************/


/************ begin Rule Spell ****************
 *
 * / ************** / / * Spell Mods * / / ************** / Spell:
 * 	SelectSpellById | SelectSpellByName | NewSpell;
 *
 **/

// SelectSpellById | SelectSpellByName | NewSpell
protected class Spell_Alternatives extends AlternativesToken {

	public Spell_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSpellAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Spell_SelectSpellByIdParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Spell_SelectSpellByNameParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Spell_NewSpellParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewSpellRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSpellByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSpellByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SelectSpellById
protected class Spell_SelectSpellByIdParserRuleCall_0 extends RuleCallToken {
	
	public Spell_SelectSpellByIdParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellAccess().getSelectSpellByIdParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSpellById_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectSpellByIdRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectSpellById_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SelectSpellByName
protected class Spell_SelectSpellByNameParserRuleCall_1 extends RuleCallToken {
	
	public Spell_SelectSpellByNameParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellAccess().getSelectSpellByNameParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSpellByName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectSpellByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectSpellByName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NewSpell
protected class Spell_NewSpellParserRuleCall_2 extends RuleCallToken {
	
	public Spell_NewSpellParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellAccess().getNewSpellParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewSpell_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewSpellRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NewSpell_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Spell ****************/


/************ begin Rule SelectSpellById ****************
 *
 * SelectSpellById:
 * 	"#selectspell" value=INT FREE_FORM_COMMENT* mods+=SpellMods* "#end";
 *
 **/

// "#selectspell" value=INT FREE_FORM_COMMENT* mods+=SpellMods* "#end"
protected class SelectSpellById_Group extends GroupToken {
	
	public SelectSpellById_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectSpellByIdAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSpellById_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectSpellByIdRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectspell"
protected class SelectSpellById_SelectspellKeyword_0 extends KeywordToken  {
	
	public SelectSpellById_SelectspellKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectSpellByIdAccess().getSelectspellKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class SelectSpellById_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectSpellById_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectSpellByIdAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSpellById_SelectspellKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectSpellByIdAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectSpellByIdAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=SpellMods*
protected class SelectSpellById_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectSpellById_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectSpellByIdAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSpellModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectSpellByIdAccess().getModsSpellModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectSpellById_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectSpellById_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectSpellById_EndKeyword_4 extends KeywordToken  {
	
	public SelectSpellById_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectSpellByIdAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSpellById_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectSpellById_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectSpellById ****************/


/************ begin Rule SelectSpellByName ****************
 *
 * SelectSpellByName:
 * 	"#selectspell" value=STRING FREE_FORM_COMMENT* mods+=SpellMods* "#end";
 *
 **/

// "#selectspell" value=STRING FREE_FORM_COMMENT* mods+=SpellMods* "#end"
protected class SelectSpellByName_Group extends GroupToken {
	
	public SelectSpellByName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectSpellByNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSpellByName_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectSpellByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectspell"
protected class SelectSpellByName_SelectspellKeyword_0 extends KeywordToken  {
	
	public SelectSpellByName_SelectspellKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectSpellByNameAccess().getSelectspellKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=STRING
protected class SelectSpellByName_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectSpellByName_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectSpellByNameAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSpellByName_SelectspellKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectSpellByNameAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectSpellByNameAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=SpellMods*
protected class SelectSpellByName_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectSpellByName_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectSpellByNameAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSpellModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectSpellByNameAccess().getModsSpellModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectSpellByName_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectSpellByName_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectSpellByName_EndKeyword_4 extends KeywordToken  {
	
	public SelectSpellByName_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectSpellByNameAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSpellByName_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectSpellByName_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectSpellByName ****************/


/************ begin Rule NewSpell ****************
 *
 * NewSpell:
 * 	"#newspell" FREE_FORM_COMMENT* mods+=SpellMods* "#end";
 *
 **/

// "#newspell" FREE_FORM_COMMENT* mods+=SpellMods* "#end"
protected class NewSpell_Group extends GroupToken {
	
	public NewSpell_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNewSpellAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewSpell_EndKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewSpellRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#newspell"
protected class NewSpell_NewspellKeyword_0 extends KeywordToken  {
	
	public NewSpell_NewspellKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewSpellAccess().getNewspellKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// mods+=SpellMods*
protected class NewSpell_ModsAssignment_2 extends AssignmentToken  {
	
	public NewSpell_ModsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewSpellAccess().getModsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSpellModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNewSpellAccess().getModsSpellModsParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NewSpell_ModsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NewSpell_NewspellKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class NewSpell_EndKeyword_3 extends KeywordToken  {
	
	public NewSpell_EndKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewSpellAccess().getEndKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewSpell_ModsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NewSpell_NewspellKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NewSpell ****************/


/************ begin Rule SpellMods ****************
 *
 * SpellMods:
 * 	SpellPattern1 | SpellPattern2 | SpellPattern3 | SpellPattern4 | SpellPattern5;
 *
 **/

// SpellPattern1 | SpellPattern2 | SpellPattern3 | SpellPattern4 | SpellPattern5
protected class SpellMods_Alternatives extends AlternativesToken {

	public SpellMods_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSpellModsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellMods_SpellPattern1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SpellMods_SpellPattern2ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SpellMods_SpellPattern3ParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SpellMods_SpellPattern4ParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new SpellMods_SpellPattern5ParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst1Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpellInst2Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpellInst3Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpellInst4Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpellInst5Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SpellPattern1
protected class SpellMods_SpellPattern1ParserRuleCall_0 extends RuleCallToken {
	
	public SpellMods_SpellPattern1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellModsAccess().getSpellPattern1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst1Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(SpellPattern1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SpellPattern2
protected class SpellMods_SpellPattern2ParserRuleCall_1 extends RuleCallToken {
	
	public SpellMods_SpellPattern2ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellModsAccess().getSpellPattern2ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst2Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(SpellPattern2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SpellPattern3
protected class SpellMods_SpellPattern3ParserRuleCall_2 extends RuleCallToken {
	
	public SpellMods_SpellPattern3ParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellModsAccess().getSpellPattern3ParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst3Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(SpellPattern3_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SpellPattern4
protected class SpellMods_SpellPattern4ParserRuleCall_3 extends RuleCallToken {
	
	public SpellMods_SpellPattern4ParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellModsAccess().getSpellPattern4ParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst4Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(SpellPattern4_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SpellPattern5
protected class SpellMods_SpellPattern5ParserRuleCall_4 extends RuleCallToken {
	
	public SpellMods_SpellPattern5ParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellModsAccess().getSpellPattern5ParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern5_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst5Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(SpellPattern5_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SpellMods ****************/


/************ begin Rule SpellPattern1 ****************
 *
 * SpellPattern1:
 * 	SpellInst1 value=STRING FREE_FORM_COMMENT*;
 *
 **/

// SpellInst1 value=STRING FREE_FORM_COMMENT*
protected class SpellPattern1_Group extends GroupToken {
	
	public SpellPattern1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSpellPattern1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern1_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SpellInst1
protected class SpellPattern1_SpellInst1ParserRuleCall_0 extends RuleCallToken {
	
	public SpellPattern1_SpellInst1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellPattern1Access().getSpellInst1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellInst1_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SpellInst1_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=STRING
protected class SpellPattern1_ValueAssignment_1 extends AssignmentToken  {
	
	public SpellPattern1_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellPattern1Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern1_SpellInst1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSpellPattern1Access().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSpellPattern1Access().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SpellPattern1 ****************/


/************ begin Rule SpellPattern2 ****************
 *
 * SpellPattern2:
 * 	SpellInst2 value=INT FREE_FORM_COMMENT*;
 *
 **/

// SpellInst2 value=INT FREE_FORM_COMMENT*
protected class SpellPattern2_Group extends GroupToken {
	
	public SpellPattern2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSpellPattern2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern2_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SpellInst2
protected class SpellPattern2_SpellInst2ParserRuleCall_0 extends RuleCallToken {
	
	public SpellPattern2_SpellInst2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellPattern2Access().getSpellInst2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellInst2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SpellInst2_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=INT
protected class SpellPattern2_ValueAssignment_1 extends AssignmentToken  {
	
	public SpellPattern2_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellPattern2Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern2_SpellInst2ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSpellPattern2Access().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSpellPattern2Access().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SpellPattern2 ****************/


/************ begin Rule SpellPattern3 ****************
 *
 * SpellPattern3:
 * 	SpellInst3 value1=INT value2=INT FREE_FORM_COMMENT*;
 *
 **/

// SpellInst3 value1=INT value2=INT FREE_FORM_COMMENT*
protected class SpellPattern3_Group extends GroupToken {
	
	public SpellPattern3_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSpellPattern3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern3_Value2Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SpellInst3
protected class SpellPattern3_SpellInst3ParserRuleCall_0 extends RuleCallToken {
	
	public SpellPattern3_SpellInst3ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellPattern3Access().getSpellInst3ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellInst3_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SpellInst3_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value1=INT
protected class SpellPattern3_Value1Assignment_1 extends AssignmentToken  {
	
	public SpellPattern3_Value1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellPattern3Access().getValue1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern3_SpellInst3ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSpellPattern3Access().getValue1INTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSpellPattern3Access().getValue1INTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// value2=INT
protected class SpellPattern3_Value2Assignment_2 extends AssignmentToken  {
	
	public SpellPattern3_Value2Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellPattern3Access().getValue2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern3_Value1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSpellPattern3Access().getValue2INTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSpellPattern3Access().getValue2INTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SpellPattern3 ****************/


/************ begin Rule SpellPattern4 ****************
 *
 * SpellPattern4:
 * 	SpellInst4 FREE_FORM_COMMENT*;
 *
 **/

// SpellInst4 FREE_FORM_COMMENT*
protected class SpellPattern4_Group extends GroupToken {
	
	public SpellPattern4_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSpellPattern4Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern4_SpellInst4ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SpellInst4
protected class SpellPattern4_SpellInst4ParserRuleCall_0 extends RuleCallToken {
	
	public SpellPattern4_SpellInst4ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellPattern4Access().getSpellInst4ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellInst4_ClearAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SpellInst4_ClearAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SpellPattern4 ****************/


/************ begin Rule SpellPattern5 ****************
 *
 * SpellPattern5:
 * 	SpellInst5 (value1=STRING | value2=INT) FREE_FORM_COMMENT*;
 *
 **/

// SpellInst5 (value1=STRING | value2=INT) FREE_FORM_COMMENT*
protected class SpellPattern5_Group extends GroupToken {
	
	public SpellPattern5_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSpellPattern5Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern5_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst5Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SpellInst5
protected class SpellPattern5_SpellInst5ParserRuleCall_0 extends RuleCallToken {
	
	public SpellPattern5_SpellInst5ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpellPattern5Access().getSpellInst5ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellInst5_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SpellInst5_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value1=STRING | value2=INT
protected class SpellPattern5_Alternatives_1 extends AlternativesToken {

	public SpellPattern5_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSpellPattern5Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern5_Value1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SpellPattern5_Value2Assignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// value1=STRING
protected class SpellPattern5_Value1Assignment_1_0 extends AssignmentToken  {
	
	public SpellPattern5_Value1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellPattern5Access().getValue1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern5_SpellInst5ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSpellPattern5Access().getValue1STRINGTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSpellPattern5Access().getValue1STRINGTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// value2=INT
protected class SpellPattern5_Value2Assignment_1_1 extends AssignmentToken  {
	
	public SpellPattern5_Value2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellPattern5Access().getValue2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellPattern5_SpellInst5ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSpellPattern5Access().getValue2INTTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSpellPattern5Access().getValue2INTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule SpellPattern5 ****************/


/************ begin Rule SpellInst1 ****************
 *
 * SpellInst1:
 * 	name?="#name" | descr?="#descr";
 *
 **/

// name?="#name" | descr?="#descr"
protected class SpellInst1_Alternatives extends AlternativesToken {

	public SpellInst1_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSpellInst1Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellInst1_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SpellInst1_DescrAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name?="#name"
protected class SpellInst1_NameAssignment_0 extends AssignmentToken  {
	
	public SpellInst1_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst1Access().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst1Access().getNameNameKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// descr?="#descr"
protected class SpellInst1_DescrAssignment_1 extends AssignmentToken  {
	
	public SpellInst1_DescrAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst1Access().getDescrAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("descr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("descr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst1Access().getDescrDescrKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SpellInst1 ****************/


/************ begin Rule SpellInst2 ****************
 *
 * SpellInst2:
 * 	school?="#school" | researchlevel?="#researchlevel" | aoe?="#aoe" | damage?="#damage" | effect?="#effect" |
 * 	fatiguecost?="#fatiguecost" | flightspr?="#flightspr" | explspr?="#explspr" | nreff?="#nreff" | range?="#range" |
 * 	precision?="#precision" | sound?="#sound" | spec?="#spec" | restricted?="#restricted";
 *
 **/

// school?="#school" | researchlevel?="#researchlevel" | aoe?="#aoe" | damage?="#damage" | effect?="#effect" |
// fatiguecost?="#fatiguecost" | flightspr?="#flightspr" | explspr?="#explspr" | nreff?="#nreff" | range?="#range" |
// precision?="#precision" | sound?="#sound" | spec?="#spec" | restricted?="#restricted"
protected class SpellInst2_Alternatives extends AlternativesToken {

	public SpellInst2_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellInst2_SchoolAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SpellInst2_ResearchlevelAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SpellInst2_AoeAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SpellInst2_DamageAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new SpellInst2_EffectAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new SpellInst2_FatiguecostAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new SpellInst2_FlightsprAssignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new SpellInst2_ExplsprAssignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new SpellInst2_NreffAssignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new SpellInst2_RangeAssignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new SpellInst2_PrecisionAssignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new SpellInst2_SoundAssignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new SpellInst2_SpecAssignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new SpellInst2_RestrictedAssignment_13(lastRuleCallOrigin, this, 13, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// school?="#school"
protected class SpellInst2_SchoolAssignment_0 extends AssignmentToken  {
	
	public SpellInst2_SchoolAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getSchoolAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("school",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("school");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getSchoolSchoolKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// researchlevel?="#researchlevel"
protected class SpellInst2_ResearchlevelAssignment_1 extends AssignmentToken  {
	
	public SpellInst2_ResearchlevelAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getResearchlevelAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("researchlevel",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("researchlevel");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getResearchlevelResearchlevelKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// aoe?="#aoe"
protected class SpellInst2_AoeAssignment_2 extends AssignmentToken  {
	
	public SpellInst2_AoeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getAoeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("aoe",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("aoe");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getAoeAoeKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// damage?="#damage"
protected class SpellInst2_DamageAssignment_3 extends AssignmentToken  {
	
	public SpellInst2_DamageAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getDamageAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("damage",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("damage");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getDamageDamageKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// effect?="#effect"
protected class SpellInst2_EffectAssignment_4 extends AssignmentToken  {
	
	public SpellInst2_EffectAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getEffectAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("effect",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("effect");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getEffectEffectKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// fatiguecost?="#fatiguecost"
protected class SpellInst2_FatiguecostAssignment_5 extends AssignmentToken  {
	
	public SpellInst2_FatiguecostAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getFatiguecostAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fatiguecost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fatiguecost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getFatiguecostFatiguecostKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// flightspr?="#flightspr"
protected class SpellInst2_FlightsprAssignment_6 extends AssignmentToken  {
	
	public SpellInst2_FlightsprAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getFlightsprAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("flightspr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("flightspr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getFlightsprFlightsprKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// explspr?="#explspr"
protected class SpellInst2_ExplsprAssignment_7 extends AssignmentToken  {
	
	public SpellInst2_ExplsprAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getExplsprAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("explspr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("explspr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getExplsprExplsprKeyword_7_0();
			return obj;
		}
		return null;
	}

}

// nreff?="#nreff"
protected class SpellInst2_NreffAssignment_8 extends AssignmentToken  {
	
	public SpellInst2_NreffAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getNreffAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nreff",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nreff");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getNreffNreffKeyword_8_0();
			return obj;
		}
		return null;
	}

}

// range?="#range"
protected class SpellInst2_RangeAssignment_9 extends AssignmentToken  {
	
	public SpellInst2_RangeAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getRangeAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("range",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("range");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getRangeRangeKeyword_9_0();
			return obj;
		}
		return null;
	}

}

// precision?="#precision"
protected class SpellInst2_PrecisionAssignment_10 extends AssignmentToken  {
	
	public SpellInst2_PrecisionAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getPrecisionAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("precision",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("precision");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getPrecisionPrecisionKeyword_10_0();
			return obj;
		}
		return null;
	}

}

// sound?="#sound"
protected class SpellInst2_SoundAssignment_11 extends AssignmentToken  {
	
	public SpellInst2_SoundAssignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getSoundAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sound",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sound");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getSoundSoundKeyword_11_0();
			return obj;
		}
		return null;
	}

}

// spec?="#spec"
protected class SpellInst2_SpecAssignment_12 extends AssignmentToken  {
	
	public SpellInst2_SpecAssignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getSpecAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("spec",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("spec");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getSpecSpecKeyword_12_0();
			return obj;
		}
		return null;
	}

}

// restricted?="#restricted"
protected class SpellInst2_RestrictedAssignment_13 extends AssignmentToken  {
	
	public SpellInst2_RestrictedAssignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst2Access().getRestrictedAssignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("restricted",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("restricted");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst2Access().getRestrictedRestrictedKeyword_13_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SpellInst2 ****************/


/************ begin Rule SpellInst3 ****************
 *
 * SpellInst3:
 * 	path?="#path" | pathlevel?="#pathlevel";
 *
 **/

// path?="#path" | pathlevel?="#pathlevel"
protected class SpellInst3_Alternatives extends AlternativesToken {

	public SpellInst3_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSpellInst3Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellInst3_PathAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SpellInst3_PathlevelAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// path?="#path"
protected class SpellInst3_PathAssignment_0 extends AssignmentToken  {
	
	public SpellInst3_PathAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst3Access().getPathAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("path",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("path");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst3Access().getPathPathKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// pathlevel?="#pathlevel"
protected class SpellInst3_PathlevelAssignment_1 extends AssignmentToken  {
	
	public SpellInst3_PathlevelAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst3Access().getPathlevelAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("pathlevel",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("pathlevel");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst3Access().getPathlevelPathlevelKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SpellInst3 ****************/


/************ begin Rule SpellInst4 ****************
 *
 * SpellInst4:
 * 	clear?="#clear";
 *
 **/

// clear?="#clear"
protected class SpellInst4_ClearAssignment extends AssignmentToken  {
	
	public SpellInst4_ClearAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst4Access().getClearAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst4Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("clear",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clear");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst4Access().getClearClearKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule SpellInst4 ****************/


/************ begin Rule SpellInst5 ****************
 *
 * SpellInst5:
 * 	copyspell?="#copyspell" | nextspell?="#nextspell";
 *
 **/

// copyspell?="#copyspell" | nextspell?="#nextspell"
protected class SpellInst5_Alternatives extends AlternativesToken {

	public SpellInst5_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSpellInst5Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpellInst5_CopyspellAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SpellInst5_NextspellAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpellInst5Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// copyspell?="#copyspell"
protected class SpellInst5_CopyspellAssignment_0 extends AssignmentToken  {
	
	public SpellInst5_CopyspellAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst5Access().getCopyspellAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("copyspell",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("copyspell");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst5Access().getCopyspellCopyspellKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// nextspell?="#nextspell"
protected class SpellInst5_NextspellAssignment_1 extends AssignmentToken  {
	
	public SpellInst5_NextspellAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpellInst5Access().getNextspellAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nextspell",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nextspell");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpellInst5Access().getNextspellNextspellKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SpellInst5 ****************/


/************ begin Rule Item ****************
 *
 * / ************** / / * Item Mods * / / ************** / Item:
 * 	SelectItemById | SelectItemByName | NewItem;
 *
 **/

// SelectItemById | SelectItemByName | NewItem
protected class Item_Alternatives extends AlternativesToken {

	public Item_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getItemAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Item_SelectItemByIdParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Item_SelectItemByNameParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Item_NewItemParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewItemRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectItemByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectItemByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SelectItemById
protected class Item_SelectItemByIdParserRuleCall_0 extends RuleCallToken {
	
	public Item_SelectItemByIdParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemAccess().getSelectItemByIdParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectItemById_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectItemByIdRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectItemById_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SelectItemByName
protected class Item_SelectItemByNameParserRuleCall_1 extends RuleCallToken {
	
	public Item_SelectItemByNameParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemAccess().getSelectItemByNameParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectItemByName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectItemByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectItemByName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NewItem
protected class Item_NewItemParserRuleCall_2 extends RuleCallToken {
	
	public Item_NewItemParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemAccess().getNewItemParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewItem_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewItemRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NewItem_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Item ****************/


/************ begin Rule SelectItemById ****************
 *
 * SelectItemById:
 * 	"#selectitem" value=INT FREE_FORM_COMMENT* mods+=ItemMods* "#end";
 *
 **/

// "#selectitem" value=INT FREE_FORM_COMMENT* mods+=ItemMods* "#end"
protected class SelectItemById_Group extends GroupToken {
	
	public SelectItemById_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectItemByIdAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectItemById_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectItemByIdRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectitem"
protected class SelectItemById_SelectitemKeyword_0 extends KeywordToken  {
	
	public SelectItemById_SelectitemKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectItemByIdAccess().getSelectitemKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class SelectItemById_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectItemById_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectItemByIdAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectItemById_SelectitemKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectItemByIdAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectItemByIdAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=ItemMods*
protected class SelectItemById_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectItemById_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectItemByIdAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getItemModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectItemByIdAccess().getModsItemModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectItemById_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectItemById_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectItemById_EndKeyword_4 extends KeywordToken  {
	
	public SelectItemById_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectItemByIdAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectItemById_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectItemById_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectItemById ****************/


/************ begin Rule SelectItemByName ****************
 *
 * SelectItemByName:
 * 	"#selectitem" value=STRING FREE_FORM_COMMENT* mods+=ItemMods* "#end";
 *
 **/

// "#selectitem" value=STRING FREE_FORM_COMMENT* mods+=ItemMods* "#end"
protected class SelectItemByName_Group extends GroupToken {
	
	public SelectItemByName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectItemByNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectItemByName_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectItemByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectitem"
protected class SelectItemByName_SelectitemKeyword_0 extends KeywordToken  {
	
	public SelectItemByName_SelectitemKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectItemByNameAccess().getSelectitemKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=STRING
protected class SelectItemByName_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectItemByName_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectItemByNameAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectItemByName_SelectitemKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectItemByNameAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectItemByNameAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=ItemMods*
protected class SelectItemByName_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectItemByName_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectItemByNameAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getItemModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectItemByNameAccess().getModsItemModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectItemByName_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectItemByName_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectItemByName_EndKeyword_4 extends KeywordToken  {
	
	public SelectItemByName_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectItemByNameAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectItemByName_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectItemByName_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectItemByName ****************/


/************ begin Rule NewItem ****************
 *
 * NewItem:
 * 	"#newitem" FREE_FORM_COMMENT* mods+=ItemMods* "#end";
 *
 **/

// "#newitem" FREE_FORM_COMMENT* mods+=ItemMods* "#end"
protected class NewItem_Group extends GroupToken {
	
	public NewItem_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNewItemAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewItem_EndKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewItemRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#newitem"
protected class NewItem_NewitemKeyword_0 extends KeywordToken  {
	
	public NewItem_NewitemKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewItemAccess().getNewitemKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// mods+=ItemMods*
protected class NewItem_ModsAssignment_2 extends AssignmentToken  {
	
	public NewItem_ModsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewItemAccess().getModsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getItemModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNewItemAccess().getModsItemModsParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NewItem_ModsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NewItem_NewitemKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class NewItem_EndKeyword_3 extends KeywordToken  {
	
	public NewItem_EndKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewItemAccess().getEndKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewItem_ModsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NewItem_NewitemKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NewItem ****************/


/************ begin Rule ItemMods ****************
 *
 * ItemMods:
 * 	ItemPattern1 | ItemPattern2 | ItemPattern3;
 *
 **/

// ItemPattern1 | ItemPattern2 | ItemPattern3
protected class ItemMods_Alternatives extends AlternativesToken {

	public ItemMods_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getItemModsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemMods_ItemPattern1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ItemMods_ItemPattern2ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ItemMods_ItemPattern3ParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst1Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getItemInst2Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getItemInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ItemPattern1
protected class ItemMods_ItemPattern1ParserRuleCall_0 extends RuleCallToken {
	
	public ItemMods_ItemPattern1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemModsAccess().getItemPattern1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst1Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(ItemPattern1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ItemPattern2
protected class ItemMods_ItemPattern2ParserRuleCall_1 extends RuleCallToken {
	
	public ItemMods_ItemPattern2ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemModsAccess().getItemPattern2ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst2Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(ItemPattern2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ItemPattern3
protected class ItemMods_ItemPattern3ParserRuleCall_2 extends RuleCallToken {
	
	public ItemMods_ItemPattern3ParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemModsAccess().getItemPattern3ParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst3Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(ItemPattern3_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ItemMods ****************/


/************ begin Rule ItemPattern1 ****************
 *
 * ItemPattern1:
 * 	ItemInst1 value=STRING FREE_FORM_COMMENT*;
 *
 **/

// ItemInst1 value=STRING FREE_FORM_COMMENT*
protected class ItemPattern1_Group extends GroupToken {
	
	public ItemPattern1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getItemPattern1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern1_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ItemInst1
protected class ItemPattern1_ItemInst1ParserRuleCall_0 extends RuleCallToken {
	
	public ItemPattern1_ItemInst1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemPattern1Access().getItemInst1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemInst1_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ItemInst1_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=STRING
protected class ItemPattern1_ValueAssignment_1 extends AssignmentToken  {
	
	public ItemPattern1_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemPattern1Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern1_ItemInst1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getItemPattern1Access().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getItemPattern1Access().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ItemPattern1 ****************/


/************ begin Rule ItemPattern2 ****************
 *
 * ItemPattern2:
 * 	ItemInst2 value=INT FREE_FORM_COMMENT*;
 *
 **/

// ItemInst2 value=INT FREE_FORM_COMMENT*
protected class ItemPattern2_Group extends GroupToken {
	
	public ItemPattern2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getItemPattern2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern2_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ItemInst2
protected class ItemPattern2_ItemInst2ParserRuleCall_0 extends RuleCallToken {
	
	public ItemPattern2_ItemInst2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemPattern2Access().getItemInst2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemInst2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ItemInst2_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=INT
protected class ItemPattern2_ValueAssignment_1 extends AssignmentToken  {
	
	public ItemPattern2_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemPattern2Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern2_ItemInst2ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getItemPattern2Access().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getItemPattern2Access().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ItemPattern2 ****************/


/************ begin Rule ItemPattern3 ****************
 *
 * ItemPattern3:
 * 	ItemInst3 (value1=STRING | value2=INT) FREE_FORM_COMMENT*;
 *
 **/

// ItemInst3 (value1=STRING | value2=INT) FREE_FORM_COMMENT*
protected class ItemPattern3_Group extends GroupToken {
	
	public ItemPattern3_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getItemPattern3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ItemInst3
protected class ItemPattern3_ItemInst3ParserRuleCall_0 extends RuleCallToken {
	
	public ItemPattern3_ItemInst3ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemPattern3Access().getItemInst3ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemInst3_CopysprAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ItemInst3_CopysprAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value1=STRING | value2=INT
protected class ItemPattern3_Alternatives_1 extends AlternativesToken {

	public ItemPattern3_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getItemPattern3Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern3_Value1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ItemPattern3_Value2Assignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// value1=STRING
protected class ItemPattern3_Value1Assignment_1_0 extends AssignmentToken  {
	
	public ItemPattern3_Value1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemPattern3Access().getValue1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern3_ItemInst3ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getItemPattern3Access().getValue1STRINGTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getItemPattern3Access().getValue1STRINGTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// value2=INT
protected class ItemPattern3_Value2Assignment_1_1 extends AssignmentToken  {
	
	public ItemPattern3_Value2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemPattern3Access().getValue2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemPattern3_ItemInst3ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getItemPattern3Access().getValue2INTTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getItemPattern3Access().getValue2INTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule ItemPattern3 ****************/


/************ begin Rule ItemInst1 ****************
 *
 * ItemInst1:
 * 	name?="#name" | descr?="#descr" | armor?="#armor";
 *
 **/

// name?="#name" | descr?="#descr" | armor?="#armor"
protected class ItemInst1_Alternatives extends AlternativesToken {

	public ItemInst1_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getItemInst1Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemInst1_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ItemInst1_DescrAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ItemInst1_ArmorAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name?="#name"
protected class ItemInst1_NameAssignment_0 extends AssignmentToken  {
	
	public ItemInst1_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst1Access().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst1Access().getNameNameKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// descr?="#descr"
protected class ItemInst1_DescrAssignment_1 extends AssignmentToken  {
	
	public ItemInst1_DescrAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst1Access().getDescrAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("descr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("descr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst1Access().getDescrDescrKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// armor?="#armor"
protected class ItemInst1_ArmorAssignment_2 extends AssignmentToken  {
	
	public ItemInst1_ArmorAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst1Access().getArmorAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("armor",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("armor");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst1Access().getArmorArmorKeyword_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ItemInst1 ****************/


/************ begin Rule ItemInst2 ****************
 *
 * ItemInst2:
 * 	constlevel?="#constlevel" | mainpath?="#mainpath" | mainlevel?="#mainlevel" | secondarypath?="#secondarypath" |
 * 	secondarylevel?="#secondarylevel" | type?="#type" | weapon?="#weapon";
 *
 **/

// constlevel?="#constlevel" | mainpath?="#mainpath" | mainlevel?="#mainlevel" | secondarypath?="#secondarypath" |
// secondarylevel?="#secondarylevel" | type?="#type" | weapon?="#weapon"
protected class ItemInst2_Alternatives extends AlternativesToken {

	public ItemInst2_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getItemInst2Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemInst2_ConstlevelAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ItemInst2_MainpathAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ItemInst2_MainlevelAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ItemInst2_SecondarypathAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ItemInst2_SecondarylevelAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ItemInst2_TypeAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new ItemInst2_WeaponAssignment_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// constlevel?="#constlevel"
protected class ItemInst2_ConstlevelAssignment_0 extends AssignmentToken  {
	
	public ItemInst2_ConstlevelAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst2Access().getConstlevelAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constlevel",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constlevel");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst2Access().getConstlevelConstlevelKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// mainpath?="#mainpath"
protected class ItemInst2_MainpathAssignment_1 extends AssignmentToken  {
	
	public ItemInst2_MainpathAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst2Access().getMainpathAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mainpath",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mainpath");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst2Access().getMainpathMainpathKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// mainlevel?="#mainlevel"
protected class ItemInst2_MainlevelAssignment_2 extends AssignmentToken  {
	
	public ItemInst2_MainlevelAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst2Access().getMainlevelAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mainlevel",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mainlevel");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst2Access().getMainlevelMainlevelKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// secondarypath?="#secondarypath"
protected class ItemInst2_SecondarypathAssignment_3 extends AssignmentToken  {
	
	public ItemInst2_SecondarypathAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst2Access().getSecondarypathAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("secondarypath",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("secondarypath");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst2Access().getSecondarypathSecondarypathKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// secondarylevel?="#secondarylevel"
protected class ItemInst2_SecondarylevelAssignment_4 extends AssignmentToken  {
	
	public ItemInst2_SecondarylevelAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst2Access().getSecondarylevelAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("secondarylevel",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("secondarylevel");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst2Access().getSecondarylevelSecondarylevelKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// type?="#type"
protected class ItemInst2_TypeAssignment_5 extends AssignmentToken  {
	
	public ItemInst2_TypeAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst2Access().getTypeAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst2Access().getTypeTypeKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// weapon?="#weapon"
protected class ItemInst2_WeaponAssignment_6 extends AssignmentToken  {
	
	public ItemInst2_WeaponAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst2Access().getWeaponAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("weapon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("weapon");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst2Access().getWeaponWeaponKeyword_6_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ItemInst2 ****************/


/************ begin Rule ItemInst3 ****************
 *
 * ItemInst3:
 * 	copyspr?="#copyspr";
 *
 **/

// copyspr?="#copyspr"
protected class ItemInst3_CopysprAssignment extends AssignmentToken  {
	
	public ItemInst3_CopysprAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getItemInst3Access().getCopysprAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getItemInst3Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("copyspr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("copyspr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getItemInst3Access().getCopysprCopysprKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule ItemInst3 ****************/


/************ begin Rule Name ****************
 *
 * / ************** / / * Name Mods * / / ************** / Name:
 * 	SelectName;
 *
 **/

// SelectName
protected class Name_SelectNameParserRuleCall extends RuleCallToken {
	
	public Name_SelectNameParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameAccess().getSelectNameParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Name ****************/


/************ begin Rule SelectName ****************
 *
 * SelectName:
 * 	"#selectnametype" value=INT FREE_FORM_COMMENT* mods+=NameMods* "#end";
 *
 **/

// "#selectnametype" value=INT FREE_FORM_COMMENT* mods+=NameMods* "#end"
protected class SelectName_Group extends GroupToken {
	
	public SelectName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectName_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectnametype"
protected class SelectName_SelectnametypeKeyword_0 extends KeywordToken  {
	
	public SelectName_SelectnametypeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectNameAccess().getSelectnametypeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class SelectName_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectName_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectNameAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectName_SelectnametypeKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectNameAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectNameAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=NameMods*
protected class SelectName_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectName_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectNameAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NameMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectNameAccess().getModsNameModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectName_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectName_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectName_EndKeyword_4 extends KeywordToken  {
	
	public SelectName_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectNameAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectName_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectName_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectName ****************/


/************ begin Rule NameMods ****************
 *
 * NameMods:
 * 	NamePattern1 | NamePattern2;
 *
 **/

// NamePattern1 | NamePattern2
protected class NameMods_Alternatives extends AlternativesToken {

	public NameMods_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNameModsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NameMods_NamePattern1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NameMods_NamePattern2ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNameInst1Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNameInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NamePattern1
protected class NameMods_NamePattern1ParserRuleCall_0 extends RuleCallToken {
	
	public NameMods_NamePattern1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameModsAccess().getNamePattern1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamePattern1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNameInst1Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(NamePattern1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NamePattern2
protected class NameMods_NamePattern2ParserRuleCall_1 extends RuleCallToken {
	
	public NameMods_NamePattern2ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameModsAccess().getNamePattern2ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamePattern2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNameInst2Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(NamePattern2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NameMods ****************/


/************ begin Rule NamePattern1 ****************
 *
 * NamePattern1:
 * 	NameInst1 value=STRING FREE_FORM_COMMENT*;
 *
 **/

// NameInst1 value=STRING FREE_FORM_COMMENT*
protected class NamePattern1_Group extends GroupToken {
	
	public NamePattern1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamePattern1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamePattern1_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNameInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NameInst1
protected class NamePattern1_NameInst1ParserRuleCall_0 extends RuleCallToken {
	
	public NamePattern1_NameInst1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNamePattern1Access().getNameInst1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NameInst1_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NameInst1_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=STRING
protected class NamePattern1_ValueAssignment_1 extends AssignmentToken  {
	
	public NamePattern1_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamePattern1Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamePattern1_NameInst1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNamePattern1Access().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNamePattern1Access().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NamePattern1 ****************/


/************ begin Rule NamePattern2 ****************
 *
 * NamePattern2:
 * 	NameInst2 FREE_FORM_COMMENT*;
 *
 **/

// NameInst2 FREE_FORM_COMMENT*
protected class NamePattern2_Group extends GroupToken {
	
	public NamePattern2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamePattern2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamePattern2_NameInst2ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNameInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NameInst2
protected class NamePattern2_NameInst2ParserRuleCall_0 extends RuleCallToken {
	
	public NamePattern2_NameInst2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNamePattern2Access().getNameInst2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NameInst2_ClearAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NameInst2_ClearAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NamePattern2 ****************/


/************ begin Rule NameInst1 ****************
 *
 * NameInst1:
 * 	name?="#addname";
 *
 **/

// name?="#addname"
protected class NameInst1_NameAssignment extends AssignmentToken  {
	
	public NameInst1_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNameInst1Access().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNameInst1Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNameInst1Access().getNameAddnameKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NameInst1 ****************/


/************ begin Rule NameInst2 ****************
 *
 * NameInst2:
 * 	clear?="#clear";
 *
 **/

// clear?="#clear"
protected class NameInst2_ClearAssignment extends AssignmentToken  {
	
	public NameInst2_ClearAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNameInst2Access().getClearAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNameInst2Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("clear",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clear");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNameInst2Access().getClearClearKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NameInst2 ****************/


/************ begin Rule Site ****************
 *
 * / ************** / / * Site Mods * / / ************** / Site:
 * 	SelectSiteById | SelectSiteByName | NewSite;
 *
 **/

// SelectSiteById | SelectSiteByName | NewSite
protected class Site_Alternatives extends AlternativesToken {

	public Site_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSiteAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Site_SelectSiteByIdParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Site_SelectSiteByNameParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Site_NewSiteParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewSiteRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSiteByIdRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectSiteByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SelectSiteById
protected class Site_SelectSiteByIdParserRuleCall_0 extends RuleCallToken {
	
	public Site_SelectSiteByIdParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSiteAccess().getSelectSiteByIdParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSiteById_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectSiteByIdRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectSiteById_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SelectSiteByName
protected class Site_SelectSiteByNameParserRuleCall_1 extends RuleCallToken {
	
	public Site_SelectSiteByNameParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSiteAccess().getSelectSiteByNameParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSiteByName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectSiteByNameRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectSiteByName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NewSite
protected class Site_NewSiteParserRuleCall_2 extends RuleCallToken {
	
	public Site_NewSiteParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSiteAccess().getNewSiteParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewSite_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewSiteRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NewSite_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Site ****************/


/************ begin Rule SelectSiteById ****************
 *
 * SelectSiteById:
 * 	"#selectsite" value=INT FREE_FORM_COMMENT* mods+=SiteMods* "#end";
 *
 **/

// "#selectsite" value=INT FREE_FORM_COMMENT* mods+=SiteMods* "#end"
protected class SelectSiteById_Group extends GroupToken {
	
	public SelectSiteById_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectSiteByIdAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSiteById_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectSiteByIdRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectsite"
protected class SelectSiteById_SelectsiteKeyword_0 extends KeywordToken  {
	
	public SelectSiteById_SelectsiteKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectSiteByIdAccess().getSelectsiteKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class SelectSiteById_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectSiteById_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectSiteByIdAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSiteById_SelectsiteKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectSiteByIdAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectSiteByIdAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=SiteMods*
protected class SelectSiteById_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectSiteById_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectSiteByIdAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSiteModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectSiteByIdAccess().getModsSiteModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectSiteById_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectSiteById_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectSiteById_EndKeyword_4 extends KeywordToken  {
	
	public SelectSiteById_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectSiteByIdAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSiteById_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectSiteById_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectSiteById ****************/


/************ begin Rule SelectSiteByName ****************
 *
 * SelectSiteByName:
 * 	"#selectsite" value=STRING FREE_FORM_COMMENT* mods+=SiteMods* "#end";
 *
 **/

// "#selectsite" value=STRING FREE_FORM_COMMENT* mods+=SiteMods* "#end"
protected class SelectSiteByName_Group extends GroupToken {
	
	public SelectSiteByName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectSiteByNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSiteByName_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectSiteByNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectsite"
protected class SelectSiteByName_SelectsiteKeyword_0 extends KeywordToken  {
	
	public SelectSiteByName_SelectsiteKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectSiteByNameAccess().getSelectsiteKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=STRING
protected class SelectSiteByName_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectSiteByName_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectSiteByNameAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSiteByName_SelectsiteKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectSiteByNameAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectSiteByNameAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=SiteMods*
protected class SelectSiteByName_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectSiteByName_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectSiteByNameAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSiteModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectSiteByNameAccess().getModsSiteModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectSiteByName_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectSiteByName_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectSiteByName_EndKeyword_4 extends KeywordToken  {
	
	public SelectSiteByName_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectSiteByNameAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectSiteByName_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectSiteByName_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectSiteByName ****************/


/************ begin Rule NewSite ****************
 *
 * NewSite:
 * 	"#newsite" value=INT FREE_FORM_COMMENT* mods+=SiteMods* "#end";
 *
 **/

// "#newsite" value=INT FREE_FORM_COMMENT* mods+=SiteMods* "#end"
protected class NewSite_Group extends GroupToken {
	
	public NewSite_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNewSiteAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewSite_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewSiteRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#newsite"
protected class NewSite_NewsiteKeyword_0 extends KeywordToken  {
	
	public NewSite_NewsiteKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewSiteAccess().getNewsiteKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class NewSite_ValueAssignment_1 extends AssignmentToken  {
	
	public NewSite_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewSiteAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewSite_NewsiteKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNewSiteAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNewSiteAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=SiteMods*
protected class NewSite_ModsAssignment_3 extends AssignmentToken  {
	
	public NewSite_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewSiteAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSiteModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNewSiteAccess().getModsSiteModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NewSite_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NewSite_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class NewSite_EndKeyword_4 extends KeywordToken  {
	
	public NewSite_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNewSiteAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewSite_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NewSite_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NewSite ****************/


/************ begin Rule SiteMods ****************
 *
 * SiteMods:
 * 	SitePattern1 | SitePattern2 | SitePattern3 | SitePattern4;
 *
 **/

// SitePattern1 | SitePattern2 | SitePattern3 | SitePattern4
protected class SiteMods_Alternatives extends AlternativesToken {

	public SiteMods_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSiteModsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteMods_SitePattern1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SiteMods_SitePattern2ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SiteMods_SitePattern3ParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SiteMods_SitePattern4ParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst1Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSiteInst2Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSiteInst3Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSiteInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SitePattern1
protected class SiteMods_SitePattern1ParserRuleCall_0 extends RuleCallToken {
	
	public SiteMods_SitePattern1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSiteModsAccess().getSitePattern1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst1Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(SitePattern1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SitePattern2
protected class SiteMods_SitePattern2ParserRuleCall_1 extends RuleCallToken {
	
	public SiteMods_SitePattern2ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSiteModsAccess().getSitePattern2ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst2Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(SitePattern2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SitePattern3
protected class SiteMods_SitePattern3ParserRuleCall_2 extends RuleCallToken {
	
	public SiteMods_SitePattern3ParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSiteModsAccess().getSitePattern3ParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst3Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(SitePattern3_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SitePattern4
protected class SiteMods_SitePattern4ParserRuleCall_3 extends RuleCallToken {
	
	public SiteMods_SitePattern4ParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSiteModsAccess().getSitePattern4ParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst4Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(SitePattern4_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SiteMods ****************/


/************ begin Rule SitePattern1 ****************
 *
 * SitePattern1:
 * 	SiteInst1 value=STRING FREE_FORM_COMMENT*;
 *
 **/

// SiteInst1 value=STRING FREE_FORM_COMMENT*
protected class SitePattern1_Group extends GroupToken {
	
	public SitePattern1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSitePattern1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern1_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SiteInst1
protected class SitePattern1_SiteInst1ParserRuleCall_0 extends RuleCallToken {
	
	public SitePattern1_SiteInst1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSitePattern1Access().getSiteInst1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteInst1_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SiteInst1_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=STRING
protected class SitePattern1_ValueAssignment_1 extends AssignmentToken  {
	
	public SitePattern1_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSitePattern1Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern1_SiteInst1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSitePattern1Access().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSitePattern1Access().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SitePattern1 ****************/


/************ begin Rule SitePattern2 ****************
 *
 * SitePattern2:
 * 	SiteInst2 value=INT FREE_FORM_COMMENT*;
 *
 **/

// SiteInst2 value=INT FREE_FORM_COMMENT*
protected class SitePattern2_Group extends GroupToken {
	
	public SitePattern2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSitePattern2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern2_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SiteInst2
protected class SitePattern2_SiteInst2ParserRuleCall_0 extends RuleCallToken {
	
	public SitePattern2_SiteInst2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSitePattern2Access().getSiteInst2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteInst2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SiteInst2_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=INT
protected class SitePattern2_ValueAssignment_1 extends AssignmentToken  {
	
	public SitePattern2_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSitePattern2Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern2_SiteInst2ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSitePattern2Access().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSitePattern2Access().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SitePattern2 ****************/


/************ begin Rule SitePattern3 ****************
 *
 * SitePattern3:
 * 	SiteInst3 value1=INT value2=INT FREE_FORM_COMMENT*;
 *
 **/

// SiteInst3 value1=INT value2=INT FREE_FORM_COMMENT*
protected class SitePattern3_Group extends GroupToken {
	
	public SitePattern3_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSitePattern3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern3_Value2Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SiteInst3
protected class SitePattern3_SiteInst3ParserRuleCall_0 extends RuleCallToken {
	
	public SitePattern3_SiteInst3ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSitePattern3Access().getSiteInst3ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteInst3_GemsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SiteInst3_GemsAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value1=INT
protected class SitePattern3_Value1Assignment_1 extends AssignmentToken  {
	
	public SitePattern3_Value1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSitePattern3Access().getValue1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern3_SiteInst3ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSitePattern3Access().getValue1INTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSitePattern3Access().getValue1INTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// value2=INT
protected class SitePattern3_Value2Assignment_2 extends AssignmentToken  {
	
	public SitePattern3_Value2Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSitePattern3Access().getValue2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern3_Value1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSitePattern3Access().getValue2INTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSitePattern3Access().getValue2INTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SitePattern3 ****************/


/************ begin Rule SitePattern4 ****************
 *
 * SitePattern4:
 * 	SiteInst4 FREE_FORM_COMMENT*;
 *
 **/

// SiteInst4 FREE_FORM_COMMENT*
protected class SitePattern4_Group extends GroupToken {
	
	public SitePattern4_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSitePattern4Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SitePattern4_SiteInst4ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SiteInst4
protected class SitePattern4_SiteInst4ParserRuleCall_0 extends RuleCallToken {
	
	public SitePattern4_SiteInst4ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSitePattern4Access().getSiteInst4ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteInst4_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SiteInst4_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SitePattern4 ****************/


/************ begin Rule SiteInst1 ****************
 *
 * SiteInst1:
 * 	name?="#name";
 *
 **/

// name?="#name"
protected class SiteInst1_NameAssignment extends AssignmentToken  {
	
	public SiteInst1_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst1Access().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst1Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst1Access().getNameNameKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule SiteInst1 ****************/


/************ begin Rule SiteInst2 ****************
 *
 * SiteInst2:
 * 	path?="#path" | level?="#level" | rarity?="#rarity" | loc?="#loc" | homemon?="#homemon" | homecom?="#homecom" |
 * 	mon?="#mon" | com?="#com" | gold?="#gold" | res?="#res" | incscale?="#incscale" | decscale?="#decscale" |
 * 	heal?="#heal" | curse?="#curse" | disease?="#disease" | horrormark?="#horrormark" | holyfire?="#holyfire" |
 * 	holypower?="#holypower" | conjcost?="#conjcost" | altcost?="#altcost" | evocost?="#evocost" | constcost?="#constcost"
 * 	| enchcost?="#enchcost" | thaucost?="#thaucost" | bloodcost?="#bloodcost";
 *
 **/

// path?="#path" | level?="#level" | rarity?="#rarity" | loc?="#loc" | homemon?="#homemon" | homecom?="#homecom" |
// mon?="#mon" | com?="#com" | gold?="#gold" | res?="#res" | incscale?="#incscale" | decscale?="#decscale" | heal?="#heal"
// | curse?="#curse" | disease?="#disease" | horrormark?="#horrormark" | holyfire?="#holyfire" | holypower?="#holypower" |
// conjcost?="#conjcost" | altcost?="#altcost" | evocost?="#evocost" | constcost?="#constcost" | enchcost?="#enchcost" |
// thaucost?="#thaucost" | bloodcost?="#bloodcost"
protected class SiteInst2_Alternatives extends AlternativesToken {

	public SiteInst2_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteInst2_PathAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SiteInst2_LevelAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SiteInst2_RarityAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SiteInst2_LocAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new SiteInst2_HomemonAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new SiteInst2_HomecomAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new SiteInst2_MonAssignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new SiteInst2_ComAssignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new SiteInst2_GoldAssignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new SiteInst2_ResAssignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new SiteInst2_IncscaleAssignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new SiteInst2_DecscaleAssignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new SiteInst2_HealAssignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new SiteInst2_CurseAssignment_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new SiteInst2_DiseaseAssignment_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new SiteInst2_HorrormarkAssignment_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new SiteInst2_HolyfireAssignment_16(lastRuleCallOrigin, this, 16, inst);
			case 17: return new SiteInst2_HolypowerAssignment_17(lastRuleCallOrigin, this, 17, inst);
			case 18: return new SiteInst2_ConjcostAssignment_18(lastRuleCallOrigin, this, 18, inst);
			case 19: return new SiteInst2_AltcostAssignment_19(lastRuleCallOrigin, this, 19, inst);
			case 20: return new SiteInst2_EvocostAssignment_20(lastRuleCallOrigin, this, 20, inst);
			case 21: return new SiteInst2_ConstcostAssignment_21(lastRuleCallOrigin, this, 21, inst);
			case 22: return new SiteInst2_EnchcostAssignment_22(lastRuleCallOrigin, this, 22, inst);
			case 23: return new SiteInst2_ThaucostAssignment_23(lastRuleCallOrigin, this, 23, inst);
			case 24: return new SiteInst2_BloodcostAssignment_24(lastRuleCallOrigin, this, 24, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// path?="#path"
protected class SiteInst2_PathAssignment_0 extends AssignmentToken  {
	
	public SiteInst2_PathAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getPathAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("path",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("path");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getPathPathKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// level?="#level"
protected class SiteInst2_LevelAssignment_1 extends AssignmentToken  {
	
	public SiteInst2_LevelAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getLevelAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("level",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("level");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getLevelLevelKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// rarity?="#rarity"
protected class SiteInst2_RarityAssignment_2 extends AssignmentToken  {
	
	public SiteInst2_RarityAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getRarityAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rarity",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rarity");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getRarityRarityKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// loc?="#loc"
protected class SiteInst2_LocAssignment_3 extends AssignmentToken  {
	
	public SiteInst2_LocAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getLocAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("loc",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("loc");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getLocLocKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// homemon?="#homemon"
protected class SiteInst2_HomemonAssignment_4 extends AssignmentToken  {
	
	public SiteInst2_HomemonAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getHomemonAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("homemon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("homemon");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getHomemonHomemonKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// homecom?="#homecom"
protected class SiteInst2_HomecomAssignment_5 extends AssignmentToken  {
	
	public SiteInst2_HomecomAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getHomecomAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("homecom",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("homecom");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getHomecomHomecomKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// mon?="#mon"
protected class SiteInst2_MonAssignment_6 extends AssignmentToken  {
	
	public SiteInst2_MonAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getMonAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mon",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mon");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getMonMonKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// com?="#com"
protected class SiteInst2_ComAssignment_7 extends AssignmentToken  {
	
	public SiteInst2_ComAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getComAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("com",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("com");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getComComKeyword_7_0();
			return obj;
		}
		return null;
	}

}

// gold?="#gold"
protected class SiteInst2_GoldAssignment_8 extends AssignmentToken  {
	
	public SiteInst2_GoldAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getGoldAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("gold",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("gold");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getGoldGoldKeyword_8_0();
			return obj;
		}
		return null;
	}

}

// res?="#res"
protected class SiteInst2_ResAssignment_9 extends AssignmentToken  {
	
	public SiteInst2_ResAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getResAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("res",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("res");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getResResKeyword_9_0();
			return obj;
		}
		return null;
	}

}

// incscale?="#incscale"
protected class SiteInst2_IncscaleAssignment_10 extends AssignmentToken  {
	
	public SiteInst2_IncscaleAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getIncscaleAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("incscale",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("incscale");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getIncscaleIncscaleKeyword_10_0();
			return obj;
		}
		return null;
	}

}

// decscale?="#decscale"
protected class SiteInst2_DecscaleAssignment_11 extends AssignmentToken  {
	
	public SiteInst2_DecscaleAssignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getDecscaleAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("decscale",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("decscale");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getDecscaleDecscaleKeyword_11_0();
			return obj;
		}
		return null;
	}

}

// heal?="#heal"
protected class SiteInst2_HealAssignment_12 extends AssignmentToken  {
	
	public SiteInst2_HealAssignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getHealAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("heal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("heal");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getHealHealKeyword_12_0();
			return obj;
		}
		return null;
	}

}

// curse?="#curse"
protected class SiteInst2_CurseAssignment_13 extends AssignmentToken  {
	
	public SiteInst2_CurseAssignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getCurseAssignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("curse",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("curse");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getCurseCurseKeyword_13_0();
			return obj;
		}
		return null;
	}

}

// disease?="#disease"
protected class SiteInst2_DiseaseAssignment_14 extends AssignmentToken  {
	
	public SiteInst2_DiseaseAssignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getDiseaseAssignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("disease",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("disease");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getDiseaseDiseaseKeyword_14_0();
			return obj;
		}
		return null;
	}

}

// horrormark?="#horrormark"
protected class SiteInst2_HorrormarkAssignment_15 extends AssignmentToken  {
	
	public SiteInst2_HorrormarkAssignment_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getHorrormarkAssignment_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("horrormark",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("horrormark");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getHorrormarkHorrormarkKeyword_15_0();
			return obj;
		}
		return null;
	}

}

// holyfire?="#holyfire"
protected class SiteInst2_HolyfireAssignment_16 extends AssignmentToken  {
	
	public SiteInst2_HolyfireAssignment_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getHolyfireAssignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("holyfire",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("holyfire");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getHolyfireHolyfireKeyword_16_0();
			return obj;
		}
		return null;
	}

}

// holypower?="#holypower"
protected class SiteInst2_HolypowerAssignment_17 extends AssignmentToken  {
	
	public SiteInst2_HolypowerAssignment_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getHolypowerAssignment_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("holypower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("holypower");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getHolypowerHolypowerKeyword_17_0();
			return obj;
		}
		return null;
	}

}

// conjcost?="#conjcost"
protected class SiteInst2_ConjcostAssignment_18 extends AssignmentToken  {
	
	public SiteInst2_ConjcostAssignment_18(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getConjcostAssignment_18();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("conjcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("conjcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getConjcostConjcostKeyword_18_0();
			return obj;
		}
		return null;
	}

}

// altcost?="#altcost"
protected class SiteInst2_AltcostAssignment_19 extends AssignmentToken  {
	
	public SiteInst2_AltcostAssignment_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getAltcostAssignment_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("altcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("altcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getAltcostAltcostKeyword_19_0();
			return obj;
		}
		return null;
	}

}

// evocost?="#evocost"
protected class SiteInst2_EvocostAssignment_20 extends AssignmentToken  {
	
	public SiteInst2_EvocostAssignment_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getEvocostAssignment_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("evocost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("evocost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getEvocostEvocostKeyword_20_0();
			return obj;
		}
		return null;
	}

}

// constcost?="#constcost"
protected class SiteInst2_ConstcostAssignment_21 extends AssignmentToken  {
	
	public SiteInst2_ConstcostAssignment_21(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getConstcostAssignment_21();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getConstcostConstcostKeyword_21_0();
			return obj;
		}
		return null;
	}

}

// enchcost?="#enchcost"
protected class SiteInst2_EnchcostAssignment_22 extends AssignmentToken  {
	
	public SiteInst2_EnchcostAssignment_22(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getEnchcostAssignment_22();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("enchcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("enchcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getEnchcostEnchcostKeyword_22_0();
			return obj;
		}
		return null;
	}

}

// thaucost?="#thaucost"
protected class SiteInst2_ThaucostAssignment_23 extends AssignmentToken  {
	
	public SiteInst2_ThaucostAssignment_23(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getThaucostAssignment_23();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("thaucost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("thaucost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getThaucostThaucostKeyword_23_0();
			return obj;
		}
		return null;
	}

}

// bloodcost?="#bloodcost"
protected class SiteInst2_BloodcostAssignment_24 extends AssignmentToken  {
	
	public SiteInst2_BloodcostAssignment_24(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst2Access().getBloodcostAssignment_24();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bloodcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bloodcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst2Access().getBloodcostBloodcostKeyword_24_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SiteInst2 ****************/


/************ begin Rule SiteInst3 ****************
 *
 * SiteInst3:
 * 	gems?="#gems";
 *
 **/

// gems?="#gems"
protected class SiteInst3_GemsAssignment extends AssignmentToken  {
	
	public SiteInst3_GemsAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst3Access().getGemsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst3Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("gems",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("gems");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst3Access().getGemsGemsKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule SiteInst3 ****************/


/************ begin Rule SiteInst4 ****************
 *
 * SiteInst4:
 * 	clear?="#clear" | lab?="#lab";
 *
 **/

// clear?="#clear" | lab?="#lab"
protected class SiteInst4_Alternatives extends AlternativesToken {

	public SiteInst4_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSiteInst4Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SiteInst4_ClearAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SiteInst4_LabAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSiteInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// clear?="#clear"
protected class SiteInst4_ClearAssignment_0 extends AssignmentToken  {
	
	public SiteInst4_ClearAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst4Access().getClearAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("clear",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clear");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst4Access().getClearClearKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// lab?="#lab"
protected class SiteInst4_LabAssignment_1 extends AssignmentToken  {
	
	public SiteInst4_LabAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSiteInst4Access().getLabAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lab",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lab");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSiteInst4Access().getLabLabKeyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SiteInst4 ****************/


/************ begin Rule Nation ****************
 *
 * / *************** / / * Nation Mods * / / *************** / Nation:
 * 	SelectNation | IndepFlag;
 *
 **/

// SelectNation | IndepFlag
protected class Nation_Alternatives extends AlternativesToken {

	public Nation_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Nation_SelectNationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Nation_IndepFlagParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIndepFlagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelectNationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SelectNation
protected class Nation_SelectNationParserRuleCall_0 extends RuleCallToken {
	
	public Nation_SelectNationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationAccess().getSelectNationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectNation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectNationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SelectNation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// IndepFlag
protected class Nation_IndepFlagParserRuleCall_1 extends RuleCallToken {
	
	public Nation_IndepFlagParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationAccess().getIndepFlagParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IndepFlag_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIndepFlagRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IndepFlag_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Nation ****************/


/************ begin Rule SelectNation ****************
 *
 * SelectNation:
 * 	"#selectnation" value=INT FREE_FORM_COMMENT* mods+=NationMods* "#end";
 *
 **/

// "#selectnation" value=INT FREE_FORM_COMMENT* mods+=NationMods* "#end"
protected class SelectNation_Group extends GroupToken {
	
	public SelectNation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelectNationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectNation_EndKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelectNationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#selectnation"
protected class SelectNation_SelectnationKeyword_0 extends KeywordToken  {
	
	public SelectNation_SelectnationKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectNationAccess().getSelectnationKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=INT
protected class SelectNation_ValueAssignment_1 extends AssignmentToken  {
	
	public SelectNation_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectNationAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectNation_SelectnationKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelectNationAccess().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSelectNationAccess().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// mods+=NationMods*
protected class SelectNation_ModsAssignment_3 extends AssignmentToken  {
	
	public SelectNation_ModsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectNationAccess().getModsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationMods_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mods",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNationModsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSelectNationAccess().getModsNationModsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SelectNation_ModsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SelectNation_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "#end"
protected class SelectNation_EndKeyword_4 extends KeywordToken  {
	
	public SelectNation_EndKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectNationAccess().getEndKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SelectNation_ModsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SelectNation_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SelectNation ****************/


/************ begin Rule IndepFlag ****************
 *
 * IndepFlag:
 * 	"#indepflag" value=STRING FREE_FORM_COMMENT*;
 *
 **/

// "#indepflag" value=STRING FREE_FORM_COMMENT*
protected class IndepFlag_Group extends GroupToken {
	
	public IndepFlag_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIndepFlagAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IndepFlag_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIndepFlagRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#indepflag"
protected class IndepFlag_IndepflagKeyword_0 extends KeywordToken  {
	
	public IndepFlag_IndepflagKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIndepFlagAccess().getIndepflagKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value=STRING
protected class IndepFlag_ValueAssignment_1 extends AssignmentToken  {
	
	public IndepFlag_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIndepFlagAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IndepFlag_IndepflagKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIndepFlagAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIndepFlagAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule IndepFlag ****************/


/************ begin Rule NationMods ****************
 *
 * NationMods:
 * 	NationPattern1 | NationPattern2 | NationPattern3 | NationPattern4 | NationPattern5;
 *
 **/

// NationPattern1 | NationPattern2 | NationPattern3 | NationPattern4 | NationPattern5
protected class NationMods_Alternatives extends AlternativesToken {

	public NationMods_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNationModsAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationMods_NationPattern1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NationMods_NationPattern2ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NationMods_NationPattern3ParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new NationMods_NationPattern4ParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new NationMods_NationPattern5ParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst1Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNationInst2Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNationInst3Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNationInst4Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNationInst5Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NationPattern1
protected class NationMods_NationPattern1ParserRuleCall_0 extends RuleCallToken {
	
	public NationMods_NationPattern1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationModsAccess().getNationPattern1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst1Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(NationPattern1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NationPattern2
protected class NationMods_NationPattern2ParserRuleCall_1 extends RuleCallToken {
	
	public NationMods_NationPattern2ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationModsAccess().getNationPattern2ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst2Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(NationPattern2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NationPattern3
protected class NationMods_NationPattern3ParserRuleCall_2 extends RuleCallToken {
	
	public NationMods_NationPattern3ParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationModsAccess().getNationPattern3ParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst3Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(NationPattern3_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NationPattern4
protected class NationMods_NationPattern4ParserRuleCall_3 extends RuleCallToken {
	
	public NationMods_NationPattern4ParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationModsAccess().getNationPattern4ParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst4Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(NationPattern4_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NationPattern5
protected class NationMods_NationPattern5ParserRuleCall_4 extends RuleCallToken {
	
	public NationMods_NationPattern5ParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationModsAccess().getNationPattern5ParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern5_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst5Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(NationPattern5_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NationMods ****************/


/************ begin Rule NationPattern1 ****************
 *
 * NationPattern1:
 * 	NationInst1 value=STRING FREE_FORM_COMMENT*;
 *
 **/

// NationInst1 value=STRING FREE_FORM_COMMENT*
protected class NationPattern1_Group extends GroupToken {
	
	public NationPattern1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNationPattern1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern1_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NationInst1
protected class NationPattern1_NationInst1ParserRuleCall_0 extends RuleCallToken {
	
	public NationPattern1_NationInst1ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationPattern1Access().getNationInst1ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationInst1_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NationInst1_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=STRING
protected class NationPattern1_ValueAssignment_1 extends AssignmentToken  {
	
	public NationPattern1_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationPattern1Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern1_NationInst1ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNationPattern1Access().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNationPattern1Access().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NationPattern1 ****************/


/************ begin Rule NationPattern2 ****************
 *
 * NationPattern2:
 * 	NationInst2 value=INT FREE_FORM_COMMENT*;
 *
 **/

// NationInst2 value=INT FREE_FORM_COMMENT*
protected class NationPattern2_Group extends GroupToken {
	
	public NationPattern2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNationPattern2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern2_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NationInst2
protected class NationPattern2_NationInst2ParserRuleCall_0 extends RuleCallToken {
	
	public NationPattern2_NationInst2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationPattern2Access().getNationInst2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationInst2_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NationInst2_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value=INT
protected class NationPattern2_ValueAssignment_1 extends AssignmentToken  {
	
	public NationPattern2_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationPattern2Access().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern2_NationInst2ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNationPattern2Access().getValueINTTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNationPattern2Access().getValueINTTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NationPattern2 ****************/


/************ begin Rule NationPattern3 ****************
 *
 * NationPattern3:
 * 	NationInst3 FREE_FORM_COMMENT*;
 *
 **/

// NationInst3 FREE_FORM_COMMENT*
protected class NationPattern3_Group extends GroupToken {
	
	public NationPattern3_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNationPattern3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern3_NationInst3ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NationInst3
protected class NationPattern3_NationInst3ParserRuleCall_0 extends RuleCallToken {
	
	public NationPattern3_NationInst3ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationPattern3Access().getNationInst3ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationInst3_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NationInst3_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NationPattern3 ****************/


/************ begin Rule NationPattern4 ****************
 *
 * NationPattern4:
 * 	NationInst4 (value1=STRING | value2=INT) FREE_FORM_COMMENT*;
 *
 **/

// NationInst4 (value1=STRING | value2=INT) FREE_FORM_COMMENT*
protected class NationPattern4_Group extends GroupToken {
	
	public NationPattern4_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNationPattern4Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern4_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NationInst4
protected class NationPattern4_NationInst4ParserRuleCall_0 extends RuleCallToken {
	
	public NationPattern4_NationInst4ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationPattern4Access().getNationInst4ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationInst4_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NationInst4_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value1=STRING | value2=INT
protected class NationPattern4_Alternatives_1 extends AlternativesToken {

	public NationPattern4_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNationPattern4Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern4_Value1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NationPattern4_Value2Assignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// value1=STRING
protected class NationPattern4_Value1Assignment_1_0 extends AssignmentToken  {
	
	public NationPattern4_Value1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationPattern4Access().getValue1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern4_NationInst4ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNationPattern4Access().getValue1STRINGTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNationPattern4Access().getValue1STRINGTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// value2=INT
protected class NationPattern4_Value2Assignment_1_1 extends AssignmentToken  {
	
	public NationPattern4_Value2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationPattern4Access().getValue2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern4_NationInst4ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNationPattern4Access().getValue2INTTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNationPattern4Access().getValue2INTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule NationPattern4 ****************/


/************ begin Rule NationPattern5 ****************
 *
 * NationPattern5:
 * 	NationInst5 value1=DecimalValue value2=DecimalValue value3=DecimalValue FREE_FORM_COMMENT*;
 *
 **/

// NationInst5 value1=DecimalValue value2=DecimalValue value3=DecimalValue FREE_FORM_COMMENT*
protected class NationPattern5_Group extends GroupToken {
	
	public NationPattern5_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNationPattern5Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern5_Value3Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst5Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NationInst5
protected class NationPattern5_NationInst5ParserRuleCall_0 extends RuleCallToken {
	
	public NationPattern5_NationInst5ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNationPattern5Access().getNationInst5ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationInst5_ColorAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NationInst5_ColorAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// value1=DecimalValue
protected class NationPattern5_Value1Assignment_1 extends AssignmentToken  {
	
	public NationPattern5_Value1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationPattern5Access().getValue1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern5_NationInst5ParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNationPattern5Access().getValue1DecimalValueParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getNationPattern5Access().getValue1DecimalValueParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// value2=DecimalValue
protected class NationPattern5_Value2Assignment_2 extends AssignmentToken  {
	
	public NationPattern5_Value2Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationPattern5Access().getValue2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern5_Value1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNationPattern5Access().getValue2DecimalValueParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getNationPattern5Access().getValue2DecimalValueParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// value3=DecimalValue
protected class NationPattern5_Value3Assignment_3 extends AssignmentToken  {
	
	public NationPattern5_Value3Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationPattern5Access().getValue3Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationPattern5_Value2Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value3");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNationPattern5Access().getValue3DecimalValueParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getNationPattern5Access().getValue3DecimalValueParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NationPattern5 ****************/


/************ begin Rule NationInst1 ****************
 *
 * NationInst1:
 * 	name?="#name" | epithet?="#epithet" | descr?="#descr" | summary?="#summary" | brief?="#brief" | flag?="#flag" |
 * 	mapbackground?="#mapbackground" | startsite?="#startsite";
 *
 **/

// name?="#name" | epithet?="#epithet" | descr?="#descr" | summary?="#summary" | brief?="#brief" | flag?="#flag" |
// mapbackground?="#mapbackground" | startsite?="#startsite"
protected class NationInst1_Alternatives extends AlternativesToken {

	public NationInst1_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNationInst1Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationInst1_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NationInst1_EpithetAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NationInst1_DescrAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new NationInst1_SummaryAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new NationInst1_BriefAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new NationInst1_FlagAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new NationInst1_MapbackgroundAssignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new NationInst1_StartsiteAssignment_7(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name?="#name"
protected class NationInst1_NameAssignment_0 extends AssignmentToken  {
	
	public NationInst1_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst1Access().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst1Access().getNameNameKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// epithet?="#epithet"
protected class NationInst1_EpithetAssignment_1 extends AssignmentToken  {
	
	public NationInst1_EpithetAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst1Access().getEpithetAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("epithet",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("epithet");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst1Access().getEpithetEpithetKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// descr?="#descr"
protected class NationInst1_DescrAssignment_2 extends AssignmentToken  {
	
	public NationInst1_DescrAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst1Access().getDescrAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("descr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("descr");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst1Access().getDescrDescrKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// summary?="#summary"
protected class NationInst1_SummaryAssignment_3 extends AssignmentToken  {
	
	public NationInst1_SummaryAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst1Access().getSummaryAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("summary",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("summary");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst1Access().getSummarySummaryKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// brief?="#brief"
protected class NationInst1_BriefAssignment_4 extends AssignmentToken  {
	
	public NationInst1_BriefAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst1Access().getBriefAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("brief",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("brief");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst1Access().getBriefBriefKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// flag?="#flag"
protected class NationInst1_FlagAssignment_5 extends AssignmentToken  {
	
	public NationInst1_FlagAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst1Access().getFlagAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("flag",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("flag");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst1Access().getFlagFlagKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// mapbackground?="#mapbackground"
protected class NationInst1_MapbackgroundAssignment_6 extends AssignmentToken  {
	
	public NationInst1_MapbackgroundAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst1Access().getMapbackgroundAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mapbackground",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mapbackground");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst1Access().getMapbackgroundMapbackgroundKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// startsite?="#startsite"
protected class NationInst1_StartsiteAssignment_7 extends AssignmentToken  {
	
	public NationInst1_StartsiteAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst1Access().getStartsiteAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startsite",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startsite");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst1Access().getStartsiteStartsiteKeyword_7_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NationInst1 ****************/


/************ begin Rule NationInst2 ****************
 *
 * NationInst2:
 * 	era?="#era" | labcost?="#labcost" | templecost?="#templecost" | templepic?="#templepic" |
 * 	startunitnbrs1?="#startunitnbrs1" | startunitnbrs2?="#startunitnbrs2" | hero1?="#hero1" | hero2?="#hero2" |
 * 	hero3?="#hero3" | hero4?="#hero4" | hero5?="#hero5" | hero6?="#hero6" | multihero1?="#multihero1" |
 * 	multihero2?="#multihero2" | defmult1?="#defmult1" | defmult1b?="#defmult1b" | defmult2?="#defmult2" |
 * 	defmult2b?="#defmult2b" | idealcold?="#idealcold" | castleprod?="#castleprod" | domkill?="#domkill" |
 * 	domunrest?="#domunrest" | startfort?="#startfort" | defaultfort?="#defaultfort" | farmfort?="#farmfort" |
 * 	mountainfort?="#mountainfort" | forestfort?="#forestfort" | swampfort?="#swampfort" | uwfort?="#uwfort" |
 * 	deepfort?="#deepfort";
 *
 **/

// era?="#era" | labcost?="#labcost" | templecost?="#templecost" | templepic?="#templepic" |
// startunitnbrs1?="#startunitnbrs1" | startunitnbrs2?="#startunitnbrs2" | hero1?="#hero1" | hero2?="#hero2" |
// hero3?="#hero3" | hero4?="#hero4" | hero5?="#hero5" | hero6?="#hero6" | multihero1?="#multihero1" |
// multihero2?="#multihero2" | defmult1?="#defmult1" | defmult1b?="#defmult1b" | defmult2?="#defmult2" |
// defmult2b?="#defmult2b" | idealcold?="#idealcold" | castleprod?="#castleprod" | domkill?="#domkill" |
// domunrest?="#domunrest" | startfort?="#startfort" | defaultfort?="#defaultfort" | farmfort?="#farmfort" |
// mountainfort?="#mountainfort" | forestfort?="#forestfort" | swampfort?="#swampfort" | uwfort?="#uwfort" |
// deepfort?="#deepfort"
protected class NationInst2_Alternatives extends AlternativesToken {

	public NationInst2_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNationInst2Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationInst2_EraAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NationInst2_LabcostAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NationInst2_TemplecostAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new NationInst2_TemplepicAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new NationInst2_Startunitnbrs1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new NationInst2_Startunitnbrs2Assignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new NationInst2_Hero1Assignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new NationInst2_Hero2Assignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new NationInst2_Hero3Assignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new NationInst2_Hero4Assignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new NationInst2_Hero5Assignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new NationInst2_Hero6Assignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new NationInst2_Multihero1Assignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new NationInst2_Multihero2Assignment_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new NationInst2_Defmult1Assignment_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new NationInst2_Defmult1bAssignment_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new NationInst2_Defmult2Assignment_16(lastRuleCallOrigin, this, 16, inst);
			case 17: return new NationInst2_Defmult2bAssignment_17(lastRuleCallOrigin, this, 17, inst);
			case 18: return new NationInst2_IdealcoldAssignment_18(lastRuleCallOrigin, this, 18, inst);
			case 19: return new NationInst2_CastleprodAssignment_19(lastRuleCallOrigin, this, 19, inst);
			case 20: return new NationInst2_DomkillAssignment_20(lastRuleCallOrigin, this, 20, inst);
			case 21: return new NationInst2_DomunrestAssignment_21(lastRuleCallOrigin, this, 21, inst);
			case 22: return new NationInst2_StartfortAssignment_22(lastRuleCallOrigin, this, 22, inst);
			case 23: return new NationInst2_DefaultfortAssignment_23(lastRuleCallOrigin, this, 23, inst);
			case 24: return new NationInst2_FarmfortAssignment_24(lastRuleCallOrigin, this, 24, inst);
			case 25: return new NationInst2_MountainfortAssignment_25(lastRuleCallOrigin, this, 25, inst);
			case 26: return new NationInst2_ForestfortAssignment_26(lastRuleCallOrigin, this, 26, inst);
			case 27: return new NationInst2_SwampfortAssignment_27(lastRuleCallOrigin, this, 27, inst);
			case 28: return new NationInst2_UwfortAssignment_28(lastRuleCallOrigin, this, 28, inst);
			case 29: return new NationInst2_DeepfortAssignment_29(lastRuleCallOrigin, this, 29, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// era?="#era"
protected class NationInst2_EraAssignment_0 extends AssignmentToken  {
	
	public NationInst2_EraAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getEraAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("era",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("era");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getEraEraKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// labcost?="#labcost"
protected class NationInst2_LabcostAssignment_1 extends AssignmentToken  {
	
	public NationInst2_LabcostAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getLabcostAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labcost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labcost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getLabcostLabcostKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// templecost?="#templecost"
protected class NationInst2_TemplecostAssignment_2 extends AssignmentToken  {
	
	public NationInst2_TemplecostAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getTemplecostAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("templecost",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("templecost");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getTemplecostTemplecostKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// templepic?="#templepic"
protected class NationInst2_TemplepicAssignment_3 extends AssignmentToken  {
	
	public NationInst2_TemplepicAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getTemplepicAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("templepic",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("templepic");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getTemplepicTemplepicKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// startunitnbrs1?="#startunitnbrs1"
protected class NationInst2_Startunitnbrs1Assignment_4 extends AssignmentToken  {
	
	public NationInst2_Startunitnbrs1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getStartunitnbrs1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startunitnbrs1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startunitnbrs1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getStartunitnbrs1Startunitnbrs1Keyword_4_0();
			return obj;
		}
		return null;
	}

}

// startunitnbrs2?="#startunitnbrs2"
protected class NationInst2_Startunitnbrs2Assignment_5 extends AssignmentToken  {
	
	public NationInst2_Startunitnbrs2Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getStartunitnbrs2Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startunitnbrs2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startunitnbrs2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getStartunitnbrs2Startunitnbrs2Keyword_5_0();
			return obj;
		}
		return null;
	}

}

// hero1?="#hero1"
protected class NationInst2_Hero1Assignment_6 extends AssignmentToken  {
	
	public NationInst2_Hero1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getHero1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hero1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hero1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getHero1Hero1Keyword_6_0();
			return obj;
		}
		return null;
	}

}

// hero2?="#hero2"
protected class NationInst2_Hero2Assignment_7 extends AssignmentToken  {
	
	public NationInst2_Hero2Assignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getHero2Assignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hero2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hero2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getHero2Hero2Keyword_7_0();
			return obj;
		}
		return null;
	}

}

// hero3?="#hero3"
protected class NationInst2_Hero3Assignment_8 extends AssignmentToken  {
	
	public NationInst2_Hero3Assignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getHero3Assignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hero3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hero3");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getHero3Hero3Keyword_8_0();
			return obj;
		}
		return null;
	}

}

// hero4?="#hero4"
protected class NationInst2_Hero4Assignment_9 extends AssignmentToken  {
	
	public NationInst2_Hero4Assignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getHero4Assignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hero4",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hero4");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getHero4Hero4Keyword_9_0();
			return obj;
		}
		return null;
	}

}

// hero5?="#hero5"
protected class NationInst2_Hero5Assignment_10 extends AssignmentToken  {
	
	public NationInst2_Hero5Assignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getHero5Assignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hero5",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hero5");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getHero5Hero5Keyword_10_0();
			return obj;
		}
		return null;
	}

}

// hero6?="#hero6"
protected class NationInst2_Hero6Assignment_11 extends AssignmentToken  {
	
	public NationInst2_Hero6Assignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getHero6Assignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hero6",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hero6");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getHero6Hero6Keyword_11_0();
			return obj;
		}
		return null;
	}

}

// multihero1?="#multihero1"
protected class NationInst2_Multihero1Assignment_12 extends AssignmentToken  {
	
	public NationInst2_Multihero1Assignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getMultihero1Assignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("multihero1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("multihero1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getMultihero1Multihero1Keyword_12_0();
			return obj;
		}
		return null;
	}

}

// multihero2?="#multihero2"
protected class NationInst2_Multihero2Assignment_13 extends AssignmentToken  {
	
	public NationInst2_Multihero2Assignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getMultihero2Assignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("multihero2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("multihero2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getMultihero2Multihero2Keyword_13_0();
			return obj;
		}
		return null;
	}

}

// defmult1?="#defmult1"
protected class NationInst2_Defmult1Assignment_14 extends AssignmentToken  {
	
	public NationInst2_Defmult1Assignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getDefmult1Assignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defmult1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defmult1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getDefmult1Defmult1Keyword_14_0();
			return obj;
		}
		return null;
	}

}

// defmult1b?="#defmult1b"
protected class NationInst2_Defmult1bAssignment_15 extends AssignmentToken  {
	
	public NationInst2_Defmult1bAssignment_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getDefmult1bAssignment_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defmult1b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defmult1b");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getDefmult1bDefmult1bKeyword_15_0();
			return obj;
		}
		return null;
	}

}

// defmult2?="#defmult2"
protected class NationInst2_Defmult2Assignment_16 extends AssignmentToken  {
	
	public NationInst2_Defmult2Assignment_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getDefmult2Assignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defmult2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defmult2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getDefmult2Defmult2Keyword_16_0();
			return obj;
		}
		return null;
	}

}

// defmult2b?="#defmult2b"
protected class NationInst2_Defmult2bAssignment_17 extends AssignmentToken  {
	
	public NationInst2_Defmult2bAssignment_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getDefmult2bAssignment_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defmult2b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defmult2b");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getDefmult2bDefmult2bKeyword_17_0();
			return obj;
		}
		return null;
	}

}

// idealcold?="#idealcold"
protected class NationInst2_IdealcoldAssignment_18 extends AssignmentToken  {
	
	public NationInst2_IdealcoldAssignment_18(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getIdealcoldAssignment_18();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("idealcold",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("idealcold");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getIdealcoldIdealcoldKeyword_18_0();
			return obj;
		}
		return null;
	}

}

// castleprod?="#castleprod"
protected class NationInst2_CastleprodAssignment_19 extends AssignmentToken  {
	
	public NationInst2_CastleprodAssignment_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getCastleprodAssignment_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("castleprod",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("castleprod");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getCastleprodCastleprodKeyword_19_0();
			return obj;
		}
		return null;
	}

}

// domkill?="#domkill"
protected class NationInst2_DomkillAssignment_20 extends AssignmentToken  {
	
	public NationInst2_DomkillAssignment_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getDomkillAssignment_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("domkill",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("domkill");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getDomkillDomkillKeyword_20_0();
			return obj;
		}
		return null;
	}

}

// domunrest?="#domunrest"
protected class NationInst2_DomunrestAssignment_21 extends AssignmentToken  {
	
	public NationInst2_DomunrestAssignment_21(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getDomunrestAssignment_21();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("domunrest",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("domunrest");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getDomunrestDomunrestKeyword_21_0();
			return obj;
		}
		return null;
	}

}

// startfort?="#startfort"
protected class NationInst2_StartfortAssignment_22 extends AssignmentToken  {
	
	public NationInst2_StartfortAssignment_22(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getStartfortAssignment_22();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startfort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startfort");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getStartfortStartfortKeyword_22_0();
			return obj;
		}
		return null;
	}

}

// defaultfort?="#defaultfort"
protected class NationInst2_DefaultfortAssignment_23 extends AssignmentToken  {
	
	public NationInst2_DefaultfortAssignment_23(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getDefaultfortAssignment_23();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defaultfort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defaultfort");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getDefaultfortDefaultfortKeyword_23_0();
			return obj;
		}
		return null;
	}

}

// farmfort?="#farmfort"
protected class NationInst2_FarmfortAssignment_24 extends AssignmentToken  {
	
	public NationInst2_FarmfortAssignment_24(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getFarmfortAssignment_24();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("farmfort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("farmfort");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getFarmfortFarmfortKeyword_24_0();
			return obj;
		}
		return null;
	}

}

// mountainfort?="#mountainfort"
protected class NationInst2_MountainfortAssignment_25 extends AssignmentToken  {
	
	public NationInst2_MountainfortAssignment_25(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getMountainfortAssignment_25();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mountainfort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mountainfort");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getMountainfortMountainfortKeyword_25_0();
			return obj;
		}
		return null;
	}

}

// forestfort?="#forestfort"
protected class NationInst2_ForestfortAssignment_26 extends AssignmentToken  {
	
	public NationInst2_ForestfortAssignment_26(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getForestfortAssignment_26();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("forestfort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("forestfort");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getForestfortForestfortKeyword_26_0();
			return obj;
		}
		return null;
	}

}

// swampfort?="#swampfort"
protected class NationInst2_SwampfortAssignment_27 extends AssignmentToken  {
	
	public NationInst2_SwampfortAssignment_27(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getSwampfortAssignment_27();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("swampfort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("swampfort");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getSwampfortSwampfortKeyword_27_0();
			return obj;
		}
		return null;
	}

}

// uwfort?="#uwfort"
protected class NationInst2_UwfortAssignment_28 extends AssignmentToken  {
	
	public NationInst2_UwfortAssignment_28(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getUwfortAssignment_28();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwfort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwfort");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getUwfortUwfortKeyword_28_0();
			return obj;
		}
		return null;
	}

}

// deepfort?="#deepfort"
protected class NationInst2_DeepfortAssignment_29 extends AssignmentToken  {
	
	public NationInst2_DeepfortAssignment_29(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst2Access().getDeepfortAssignment_29();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("deepfort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("deepfort");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst2Access().getDeepfortDeepfortKeyword_29_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NationInst2 ****************/


/************ begin Rule NationInst3 ****************
 *
 * NationInst3:
 * 	clearnation?="#clearnation" | clearrec?="#clearrec" | clearsites?="#clearsites" | uwnation?="#uwnation" |
 * 	bloodnation?="#bloodnation" | nopreach?="#nopreach" | dyingdom?="#dyingdom" | sacrificedom?="#sacrificedom" |
 * 	nodeathsupply?="#nodeathsupply" | autoundead?="#autoundead" | zombiereanim?="#zombiereanim" |
 * 	horsereanim?="#horsereanim" | wightreanim?="#wightreanim" | manikinreanim?="#manikinreanim" |
 * 	tombwyrmreanim?="#tombwyrmreanim";
 *
 **/

// clearnation?="#clearnation" | clearrec?="#clearrec" | clearsites?="#clearsites" | uwnation?="#uwnation" |
// bloodnation?="#bloodnation" | nopreach?="#nopreach" | dyingdom?="#dyingdom" | sacrificedom?="#sacrificedom" |
// nodeathsupply?="#nodeathsupply" | autoundead?="#autoundead" | zombiereanim?="#zombiereanim" |
// horsereanim?="#horsereanim" | wightreanim?="#wightreanim" | manikinreanim?="#manikinreanim" |
// tombwyrmreanim?="#tombwyrmreanim"
protected class NationInst3_Alternatives extends AlternativesToken {

	public NationInst3_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNationInst3Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationInst3_ClearnationAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NationInst3_ClearrecAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NationInst3_ClearsitesAssignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new NationInst3_UwnationAssignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new NationInst3_BloodnationAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new NationInst3_NopreachAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new NationInst3_DyingdomAssignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new NationInst3_SacrificedomAssignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new NationInst3_NodeathsupplyAssignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new NationInst3_AutoundeadAssignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new NationInst3_ZombiereanimAssignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new NationInst3_HorsereanimAssignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new NationInst3_WightreanimAssignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new NationInst3_ManikinreanimAssignment_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new NationInst3_TombwyrmreanimAssignment_14(lastRuleCallOrigin, this, 14, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// clearnation?="#clearnation"
protected class NationInst3_ClearnationAssignment_0 extends AssignmentToken  {
	
	public NationInst3_ClearnationAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getClearnationAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("clearnation",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clearnation");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getClearnationClearnationKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// clearrec?="#clearrec"
protected class NationInst3_ClearrecAssignment_1 extends AssignmentToken  {
	
	public NationInst3_ClearrecAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getClearrecAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("clearrec",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clearrec");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getClearrecClearrecKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// clearsites?="#clearsites"
protected class NationInst3_ClearsitesAssignment_2 extends AssignmentToken  {
	
	public NationInst3_ClearsitesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getClearsitesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("clearsites",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("clearsites");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getClearsitesClearsitesKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// uwnation?="#uwnation"
protected class NationInst3_UwnationAssignment_3 extends AssignmentToken  {
	
	public NationInst3_UwnationAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getUwnationAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwnation",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwnation");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getUwnationUwnationKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// bloodnation?="#bloodnation"
protected class NationInst3_BloodnationAssignment_4 extends AssignmentToken  {
	
	public NationInst3_BloodnationAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getBloodnationAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bloodnation",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bloodnation");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getBloodnationBloodnationKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// nopreach?="#nopreach"
protected class NationInst3_NopreachAssignment_5 extends AssignmentToken  {
	
	public NationInst3_NopreachAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getNopreachAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nopreach",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nopreach");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getNopreachNopreachKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// dyingdom?="#dyingdom"
protected class NationInst3_DyingdomAssignment_6 extends AssignmentToken  {
	
	public NationInst3_DyingdomAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getDyingdomAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dyingdom",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dyingdom");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getDyingdomDyingdomKeyword_6_0();
			return obj;
		}
		return null;
	}

}

// sacrificedom?="#sacrificedom"
protected class NationInst3_SacrificedomAssignment_7 extends AssignmentToken  {
	
	public NationInst3_SacrificedomAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getSacrificedomAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sacrificedom",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sacrificedom");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getSacrificedomSacrificedomKeyword_7_0();
			return obj;
		}
		return null;
	}

}

// nodeathsupply?="#nodeathsupply"
protected class NationInst3_NodeathsupplyAssignment_8 extends AssignmentToken  {
	
	public NationInst3_NodeathsupplyAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getNodeathsupplyAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nodeathsupply",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nodeathsupply");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getNodeathsupplyNodeathsupplyKeyword_8_0();
			return obj;
		}
		return null;
	}

}

// autoundead?="#autoundead"
protected class NationInst3_AutoundeadAssignment_9 extends AssignmentToken  {
	
	public NationInst3_AutoundeadAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getAutoundeadAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("autoundead",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("autoundead");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getAutoundeadAutoundeadKeyword_9_0();
			return obj;
		}
		return null;
	}

}

// zombiereanim?="#zombiereanim"
protected class NationInst3_ZombiereanimAssignment_10 extends AssignmentToken  {
	
	public NationInst3_ZombiereanimAssignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getZombiereanimAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("zombiereanim",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("zombiereanim");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getZombiereanimZombiereanimKeyword_10_0();
			return obj;
		}
		return null;
	}

}

// horsereanim?="#horsereanim"
protected class NationInst3_HorsereanimAssignment_11 extends AssignmentToken  {
	
	public NationInst3_HorsereanimAssignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getHorsereanimAssignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("horsereanim",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("horsereanim");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getHorsereanimHorsereanimKeyword_11_0();
			return obj;
		}
		return null;
	}

}

// wightreanim?="#wightreanim"
protected class NationInst3_WightreanimAssignment_12 extends AssignmentToken  {
	
	public NationInst3_WightreanimAssignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getWightreanimAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("wightreanim",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("wightreanim");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getWightreanimWightreanimKeyword_12_0();
			return obj;
		}
		return null;
	}

}

// manikinreanim?="#manikinreanim"
protected class NationInst3_ManikinreanimAssignment_13 extends AssignmentToken  {
	
	public NationInst3_ManikinreanimAssignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getManikinreanimAssignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("manikinreanim",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("manikinreanim");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getManikinreanimManikinreanimKeyword_13_0();
			return obj;
		}
		return null;
	}

}

// tombwyrmreanim?="#tombwyrmreanim"
protected class NationInst3_TombwyrmreanimAssignment_14 extends AssignmentToken  {
	
	public NationInst3_TombwyrmreanimAssignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst3Access().getTombwyrmreanimAssignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tombwyrmreanim",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tombwyrmreanim");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst3Access().getTombwyrmreanimTombwyrmreanimKeyword_14_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NationInst3 ****************/


/************ begin Rule NationInst4 ****************
 *
 * NationInst4:
 * 	startcom?="#startcom" | startscout?="#startscout" | startunittype1?="#startunittype1" |
 * 	startunittype2?="#startunittype2" | addrecunit?="#addrecunit" | addreccom?="#addreccom" | uwunit1?="#uwunit1" |
 * 	uwunit2?="#uwunit2" | uwunit3?="#uwunit3" | uwunit4?="#uwunit4" | uwunit5?="#uwunit5" | uwcom1?="#uwcom1" |
 * 	uwcom2?="#uwcom2" | uwcom3?="#uwcom3" | uwcom4?="#uwcom4" | uwcom5?="#uwcom5" | defcom1?="#defcom1" |
 * 	defcom2?="#defcom2" | defunit1?="#defunit1" | defunit1b?="#defunit1b" | defunit2?="#defunit2" |
 * 	defunit2b?="#defunit2b";
 *
 **/

// startcom?="#startcom" | startscout?="#startscout" | startunittype1?="#startunittype1" |
// startunittype2?="#startunittype2" | addrecunit?="#addrecunit" | addreccom?="#addreccom" | uwunit1?="#uwunit1" |
// uwunit2?="#uwunit2" | uwunit3?="#uwunit3" | uwunit4?="#uwunit4" | uwunit5?="#uwunit5" | uwcom1?="#uwcom1" |
// uwcom2?="#uwcom2" | uwcom3?="#uwcom3" | uwcom4?="#uwcom4" | uwcom5?="#uwcom5" | defcom1?="#defcom1" |
// defcom2?="#defcom2" | defunit1?="#defunit1" | defunit1b?="#defunit1b" | defunit2?="#defunit2" | defunit2b?="#defunit2b"
protected class NationInst4_Alternatives extends AlternativesToken {

	public NationInst4_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNationInst4Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NationInst4_StartcomAssignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NationInst4_StartscoutAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NationInst4_Startunittype1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new NationInst4_Startunittype2Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new NationInst4_AddrecunitAssignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new NationInst4_AddreccomAssignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new NationInst4_Uwunit1Assignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new NationInst4_Uwunit2Assignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new NationInst4_Uwunit3Assignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new NationInst4_Uwunit4Assignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new NationInst4_Uwunit5Assignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new NationInst4_Uwcom1Assignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new NationInst4_Uwcom2Assignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new NationInst4_Uwcom3Assignment_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new NationInst4_Uwcom4Assignment_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new NationInst4_Uwcom5Assignment_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new NationInst4_Defcom1Assignment_16(lastRuleCallOrigin, this, 16, inst);
			case 17: return new NationInst4_Defcom2Assignment_17(lastRuleCallOrigin, this, 17, inst);
			case 18: return new NationInst4_Defunit1Assignment_18(lastRuleCallOrigin, this, 18, inst);
			case 19: return new NationInst4_Defunit1bAssignment_19(lastRuleCallOrigin, this, 19, inst);
			case 20: return new NationInst4_Defunit2Assignment_20(lastRuleCallOrigin, this, 20, inst);
			case 21: return new NationInst4_Defunit2bAssignment_21(lastRuleCallOrigin, this, 21, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst4Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// startcom?="#startcom"
protected class NationInst4_StartcomAssignment_0 extends AssignmentToken  {
	
	public NationInst4_StartcomAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getStartcomAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startcom",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startcom");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getStartcomStartcomKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// startscout?="#startscout"
protected class NationInst4_StartscoutAssignment_1 extends AssignmentToken  {
	
	public NationInst4_StartscoutAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getStartscoutAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startscout",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startscout");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getStartscoutStartscoutKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// startunittype1?="#startunittype1"
protected class NationInst4_Startunittype1Assignment_2 extends AssignmentToken  {
	
	public NationInst4_Startunittype1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getStartunittype1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startunittype1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startunittype1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getStartunittype1Startunittype1Keyword_2_0();
			return obj;
		}
		return null;
	}

}

// startunittype2?="#startunittype2"
protected class NationInst4_Startunittype2Assignment_3 extends AssignmentToken  {
	
	public NationInst4_Startunittype2Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getStartunittype2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("startunittype2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("startunittype2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getStartunittype2Startunittype2Keyword_3_0();
			return obj;
		}
		return null;
	}

}

// addrecunit?="#addrecunit"
protected class NationInst4_AddrecunitAssignment_4 extends AssignmentToken  {
	
	public NationInst4_AddrecunitAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getAddrecunitAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("addrecunit",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("addrecunit");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getAddrecunitAddrecunitKeyword_4_0();
			return obj;
		}
		return null;
	}

}

// addreccom?="#addreccom"
protected class NationInst4_AddreccomAssignment_5 extends AssignmentToken  {
	
	public NationInst4_AddreccomAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getAddreccomAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("addreccom",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("addreccom");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getAddreccomAddreccomKeyword_5_0();
			return obj;
		}
		return null;
	}

}

// uwunit1?="#uwunit1"
protected class NationInst4_Uwunit1Assignment_6 extends AssignmentToken  {
	
	public NationInst4_Uwunit1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwunit1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwunit1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwunit1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwunit1Uwunit1Keyword_6_0();
			return obj;
		}
		return null;
	}

}

// uwunit2?="#uwunit2"
protected class NationInst4_Uwunit2Assignment_7 extends AssignmentToken  {
	
	public NationInst4_Uwunit2Assignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwunit2Assignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwunit2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwunit2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwunit2Uwunit2Keyword_7_0();
			return obj;
		}
		return null;
	}

}

// uwunit3?="#uwunit3"
protected class NationInst4_Uwunit3Assignment_8 extends AssignmentToken  {
	
	public NationInst4_Uwunit3Assignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwunit3Assignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwunit3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwunit3");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwunit3Uwunit3Keyword_8_0();
			return obj;
		}
		return null;
	}

}

// uwunit4?="#uwunit4"
protected class NationInst4_Uwunit4Assignment_9 extends AssignmentToken  {
	
	public NationInst4_Uwunit4Assignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwunit4Assignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwunit4",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwunit4");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwunit4Uwunit4Keyword_9_0();
			return obj;
		}
		return null;
	}

}

// uwunit5?="#uwunit5"
protected class NationInst4_Uwunit5Assignment_10 extends AssignmentToken  {
	
	public NationInst4_Uwunit5Assignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwunit5Assignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwunit5",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwunit5");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwunit5Uwunit5Keyword_10_0();
			return obj;
		}
		return null;
	}

}

// uwcom1?="#uwcom1"
protected class NationInst4_Uwcom1Assignment_11 extends AssignmentToken  {
	
	public NationInst4_Uwcom1Assignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwcom1Assignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwcom1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwcom1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwcom1Uwcom1Keyword_11_0();
			return obj;
		}
		return null;
	}

}

// uwcom2?="#uwcom2"
protected class NationInst4_Uwcom2Assignment_12 extends AssignmentToken  {
	
	public NationInst4_Uwcom2Assignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwcom2Assignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwcom2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwcom2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwcom2Uwcom2Keyword_12_0();
			return obj;
		}
		return null;
	}

}

// uwcom3?="#uwcom3"
protected class NationInst4_Uwcom3Assignment_13 extends AssignmentToken  {
	
	public NationInst4_Uwcom3Assignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwcom3Assignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwcom3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwcom3");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwcom3Uwcom3Keyword_13_0();
			return obj;
		}
		return null;
	}

}

// uwcom4?="#uwcom4"
protected class NationInst4_Uwcom4Assignment_14 extends AssignmentToken  {
	
	public NationInst4_Uwcom4Assignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwcom4Assignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwcom4",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwcom4");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwcom4Uwcom4Keyword_14_0();
			return obj;
		}
		return null;
	}

}

// uwcom5?="#uwcom5"
protected class NationInst4_Uwcom5Assignment_15 extends AssignmentToken  {
	
	public NationInst4_Uwcom5Assignment_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getUwcom5Assignment_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("uwcom5",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("uwcom5");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getUwcom5Uwcom5Keyword_15_0();
			return obj;
		}
		return null;
	}

}

// defcom1?="#defcom1"
protected class NationInst4_Defcom1Assignment_16 extends AssignmentToken  {
	
	public NationInst4_Defcom1Assignment_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getDefcom1Assignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defcom1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defcom1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getDefcom1Defcom1Keyword_16_0();
			return obj;
		}
		return null;
	}

}

// defcom2?="#defcom2"
protected class NationInst4_Defcom2Assignment_17 extends AssignmentToken  {
	
	public NationInst4_Defcom2Assignment_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getDefcom2Assignment_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defcom2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defcom2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getDefcom2Defcom2Keyword_17_0();
			return obj;
		}
		return null;
	}

}

// defunit1?="#defunit1"
protected class NationInst4_Defunit1Assignment_18 extends AssignmentToken  {
	
	public NationInst4_Defunit1Assignment_18(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getDefunit1Assignment_18();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defunit1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defunit1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getDefunit1Defunit1Keyword_18_0();
			return obj;
		}
		return null;
	}

}

// defunit1b?="#defunit1b"
protected class NationInst4_Defunit1bAssignment_19 extends AssignmentToken  {
	
	public NationInst4_Defunit1bAssignment_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getDefunit1bAssignment_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defunit1b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defunit1b");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getDefunit1bDefunit1bKeyword_19_0();
			return obj;
		}
		return null;
	}

}

// defunit2?="#defunit2"
protected class NationInst4_Defunit2Assignment_20 extends AssignmentToken  {
	
	public NationInst4_Defunit2Assignment_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getDefunit2Assignment_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defunit2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defunit2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getDefunit2Defunit2Keyword_20_0();
			return obj;
		}
		return null;
	}

}

// defunit2b?="#defunit2b"
protected class NationInst4_Defunit2bAssignment_21 extends AssignmentToken  {
	
	public NationInst4_Defunit2bAssignment_21(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst4Access().getDefunit2bAssignment_21();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("defunit2b",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("defunit2b");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst4Access().getDefunit2bDefunit2bKeyword_21_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NationInst4 ****************/


/************ begin Rule NationInst5 ****************
 *
 * NationInst5:
 * 	color?="#color";
 *
 **/

// color?="#color"
protected class NationInst5_ColorAssignment extends AssignmentToken  {
	
	public NationInst5_ColorAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNationInst5Access().getColorAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNationInst5Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("color",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("color");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNationInst5Access().getColorColorKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NationInst5 ****************/


}
